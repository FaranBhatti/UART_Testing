
UART_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eac  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08009160  08009160  00019160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009778  08009778  00019778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009780  08009780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08009788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  240001e0  08009968  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400033c  08009968  0002033c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fcee  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e7b  00000000  00000000  0002fefc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b08  00000000  00000000  00031d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a50  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002fbf6  00000000  00000000  000332d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e80b  00000000  00000000  00062ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00134654  00000000  00000000  000716d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a5d25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d3c  00000000  00000000  001a5d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08009144 	.word	0x08009144

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	08009144 	.word	0x08009144

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006ac:	1d39      	adds	r1, r7, #4
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	2201      	movs	r2, #1
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <__io_putchar+0x20>)
 80006b6:	f004 f809 	bl	80046cc <HAL_UART_Transmit>
  return ch;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	24000290 	.word	0x24000290

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	ed2d 8b02 	vpush	{d8}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fdf7 	bl	80012c4 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t tx_data = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f957 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 fa6b 	bl	8000bb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e2:	f000 fa15 	bl	8000b10 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006e6:	f000 fa5f 	bl	8000ba8 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 80006ea:	f000 f9c5 	bl	8000a78 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  uint16_t SAMPLE_RATE = 16000;		//samples/second
 80006ee:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80006f2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t AUDIO_DURATION = 15;		//seconds
 80006f4:	230f      	movs	r3, #15
 80006f6:	843b      	strh	r3, [r7, #32]
  float PI = 3.14159;
 80006f8:	4b9f      	ldr	r3, [pc, #636]	; (8000978 <main+0x2b0>)
 80006fa:	61fb      	str	r3, [r7, #28]

  double AMPLITUDE = 0X2000;
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	4b9e      	ldr	r3, [pc, #632]	; (800097c <main+0x2b4>)
 8000702:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const double ONE_HZ = 2 * PI / SAMPLE_RATE; //Digital frequency equivalent to 1 Hz -- units of cycles/sample
 8000706:	edd7 7a07 	vldr	s15, [r7, #28]
 800070a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800070e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800071c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000720:	ed87 7b02 	vstr	d7, [r7, #8]
  volatile int16_t sample; //actually 32 bits long, not sure why
  int i = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  int i_max = SAMPLE_RATE * AUDIO_DURATION; //number of samples to be generated in file
 8000728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800072a:	8c3a      	ldrh	r2, [r7, #32]
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  if (i == 0) {
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	2b00      	cmp	r3, #0
 8000736:	d122      	bne.n	800077e <main+0xb6>
	  printf("Starting data transmission.");
 8000738:	4891      	ldr	r0, [pc, #580]	; (8000980 <main+0x2b8>)
 800073a:	f005 fe53 	bl	80063e4 <iprintf>

	  //send start character
	  tx_data = 0xFF;
 800073e:	23ff      	movs	r3, #255	; 0xff
 8000740:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000742:	1cf9      	adds	r1, r7, #3
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	2201      	movs	r2, #1
 800074a:	488e      	ldr	r0, [pc, #568]	; (8000984 <main+0x2bc>)
 800074c:	f003 ffbe 	bl	80046cc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000750:	1cf9      	adds	r1, r7, #3
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	2201      	movs	r2, #1
 8000758:	488a      	ldr	r0, [pc, #552]	; (8000984 <main+0x2bc>)
 800075a:	f003 ffb7 	bl	80046cc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 800075e:	1cf9      	adds	r1, r7, #3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	2201      	movs	r2, #1
 8000766:	4887      	ldr	r0, [pc, #540]	; (8000984 <main+0x2bc>)
 8000768:	f003 ffb0 	bl	80046cc <HAL_UART_Transmit>
	  tx_data = 0xEE;
 800076c:	23ee      	movs	r3, #238	; 0xee
 800076e:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000770:	1cf9      	adds	r1, r7, #3
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	2201      	movs	r2, #1
 8000778:	4882      	ldr	r0, [pc, #520]	; (8000984 <main+0x2bc>)
 800077a:	f003 ffa7 	bl	80046cc <HAL_UART_Transmit>

  }

  i++;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	3301      	adds	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  //i = i_max+1;
  if (i <= i_max && i != 0) {
 8000784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	f300 80b9 	bgt.w	8000900 <main+0x238>
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	2b00      	cmp	r3, #0
 8000792:	f000 80b5 	beq.w	8000900 <main+0x238>

	  //sine waves at 262, 330, 392Hz
	  //values of sample must be between -0x8000 and 0x7999
	  sample = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	803b      	strh	r3, [r7, #0]
	  sample += AMPLITUDE * sin(i * ONE_HZ * 262 * 2);
 800079a:	883b      	ldrh	r3, [r7, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80007b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007b8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8000960 <main+0x298>
 80007bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80007c4:	eeb0 0b47 	vmov.f64	d0, d7
 80007c8:	f007 fec6 	bl	8008558 <sin>
 80007cc:	eeb0 6b40 	vmov.f64	d6, d0
 80007d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80007d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007d8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80007dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007e0:	ee17 3a90 	vmov	r3, s15
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	803b      	strh	r3, [r7, #0]
	  sample += AMPLITUDE * sin(i * ONE_HZ * 330 * 2);
 80007e8:	883b      	ldrh	r3, [r7, #0]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8000802:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000806:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8000968 <main+0x2a0>
 800080a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800080e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000812:	eeb0 0b47 	vmov.f64	d0, d7
 8000816:	f007 fe9f 	bl	8008558 <sin>
 800081a:	eeb0 6b40 	vmov.f64	d6, d0
 800081e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000822:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000826:	ee38 7b07 	vadd.f64	d7, d8, d7
 800082a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800082e:	ee17 3a90 	vmov	r3, s15
 8000832:	b21b      	sxth	r3, r3
 8000834:	803b      	strh	r3, [r7, #0]
	  sample += AMPLITUDE * sin(i * ONE_HZ * 392 * 2);
 8000836:	883b      	ldrh	r3, [r7, #0]
 8000838:	b21b      	sxth	r3, r3
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800084c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000850:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000854:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8000970 <main+0x2a8>
 8000858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800085c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000860:	eeb0 0b47 	vmov.f64	d0, d7
 8000864:	f007 fe78 	bl	8008558 <sin>
 8000868:	eeb0 6b40 	vmov.f64	d6, d0
 800086c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000870:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000874:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000878:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800087c:	ee17 3a90 	vmov	r3, s15
 8000880:	b21b      	sxth	r3, r3
 8000882:	803b      	strh	r3, [r7, #0]
	  //printf("sample is: 0x%x\r\n", sample);
	  //printf("last 16 bits: 0x%x\r\n", sample & 0xFFFF);
	  //printf("checked against mask: 0x%x\r\n", (sample & 0xFFFF) ^ 0xFFFF);

	  //send escape char twice to indicate escape char value is being sent
	  if (!((sample & 0xFFFF) ^ 0xFFFF)) {
 8000884:	883b      	ldrh	r3, [r7, #0]
 8000886:	b21b      	sxth	r3, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d11e      	bne.n	80008ce <main+0x206>

		  //send 0xFFFF twice to
		  tx_data = 0xFF;
 8000890:	23ff      	movs	r3, #255	; 0xff
 8000892:	70fb      	strb	r3, [r7, #3]
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000894:	1cf9      	adds	r1, r7, #3
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2201      	movs	r2, #1
 800089c:	4839      	ldr	r0, [pc, #228]	; (8000984 <main+0x2bc>)
 800089e:	f003 ff15 	bl	80046cc <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008a2:	1cf9      	adds	r1, r7, #3
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	2201      	movs	r2, #1
 80008aa:	4836      	ldr	r0, [pc, #216]	; (8000984 <main+0x2bc>)
 80008ac:	f003 ff0e 	bl	80046cc <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008b0:	1cf9      	adds	r1, r7, #3
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2201      	movs	r2, #1
 80008b8:	4832      	ldr	r0, [pc, #200]	; (8000984 <main+0x2bc>)
 80008ba:	f003 ff07 	bl	80046cc <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008be:	1cf9      	adds	r1, r7, #3
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	2201      	movs	r2, #1
 80008c6:	482f      	ldr	r0, [pc, #188]	; (8000984 <main+0x2bc>)
 80008c8:	f003 ff00 	bl	80046cc <HAL_UART_Transmit>
	  if (!((sample & 0xFFFF) ^ 0xFFFF)) {
 80008cc:	e045      	b.n	800095a <main+0x292>
	  else { //send data normally

		  //say sample = 0x1234;

		  //transmit first 8 bits
		  tx_data = sample >> 8;     // high byte (0x12)
 80008ce:	883b      	ldrh	r3, [r7, #0]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	121b      	asrs	r3, r3, #8
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	70fb      	strb	r3, [r7, #3]
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008da:	1cf9      	adds	r1, r7, #3
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	2201      	movs	r2, #1
 80008e2:	4828      	ldr	r0, [pc, #160]	; (8000984 <main+0x2bc>)
 80008e4:	f003 fef2 	bl	80046cc <HAL_UART_Transmit>
		  //printf("Sent as: %x\t", tx_data); //debug only

		  //transmit last 8 bits
		  tx_data = sample & 0x00FF; // low byte (0x34)
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	70fb      	strb	r3, [r7, #3]
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008f0:	1cf9      	adds	r1, r7, #3
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	2201      	movs	r2, #1
 80008f8:	4822      	ldr	r0, [pc, #136]	; (8000984 <main+0x2bc>)
 80008fa:	f003 fee7 	bl	80046cc <HAL_UART_Transmit>
	  if (!((sample & 0xFFFF) ^ 0xFFFF)) {
 80008fe:	e02c      	b.n	800095a <main+0x292>
	  //HAL_Delay(1000); //debug only
  }
  else { //end of file, send end of file char after escape char

	  //send escape character (0xFFFF)
	  tx_data = 0xFF;
 8000900:	23ff      	movs	r3, #255	; 0xff
 8000902:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000904:	1cf9      	adds	r1, r7, #3
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	2201      	movs	r2, #1
 800090c:	481d      	ldr	r0, [pc, #116]	; (8000984 <main+0x2bc>)
 800090e:	f003 fedd 	bl	80046cc <HAL_UART_Transmit>
	  tx_data = 0xFF;
 8000912:	23ff      	movs	r3, #255	; 0xff
 8000914:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000916:	1cf9      	adds	r1, r7, #3
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	2201      	movs	r2, #1
 800091e:	4819      	ldr	r0, [pc, #100]	; (8000984 <main+0x2bc>)
 8000920:	f003 fed4 	bl	80046cc <HAL_UART_Transmit>

	  //send end of file character (0xFFFE)
	  tx_data = 0xFF;
 8000924:	23ff      	movs	r3, #255	; 0xff
 8000926:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000928:	1cf9      	adds	r1, r7, #3
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	2201      	movs	r2, #1
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <main+0x2bc>)
 8000932:	f003 fecb 	bl	80046cc <HAL_UART_Transmit>
	  tx_data = 0xFE;
 8000936:	23fe      	movs	r3, #254	; 0xfe
 8000938:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 800093a:	1cf9      	adds	r1, r7, #3
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	2201      	movs	r2, #1
 8000942:	4810      	ldr	r0, [pc, #64]	; (8000984 <main+0x2bc>)
 8000944:	f003 fec2 	bl	80046cc <HAL_UART_Transmit>

	  //reset counter
	  i = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24

	  //delay for viewing
	  printf("All data sent.\r\n");
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <main+0x2c0>)
 800094e:	f005 fdcf 	bl	80064f0 <puts>
	  HAL_Delay(1000);
 8000952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000956:	f000 fd47 	bl	80013e8 <HAL_Delay>
  if (i == 0) {
 800095a:	e6ea      	b.n	8000732 <main+0x6a>
 800095c:	f3af 8000 	nop.w
 8000960:	00000000 	.word	0x00000000
 8000964:	40706000 	.word	0x40706000
 8000968:	00000000 	.word	0x00000000
 800096c:	4074a000 	.word	0x4074a000
 8000970:	00000000 	.word	0x00000000
 8000974:	40788000 	.word	0x40788000
 8000978:	40490fd0 	.word	0x40490fd0
 800097c:	40c00000 	.word	0x40c00000
 8000980:	08009160 	.word	0x08009160
 8000984:	240001fc 	.word	0x240001fc
 8000988:	0800917c 	.word	0x0800917c

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09c      	sub	sp, #112	; 0x70
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	224c      	movs	r2, #76	; 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f005 f8d8 	bl	8005b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 f8d2 	bl	8005b50 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <SystemClock_Config+0xe4>)
 80009ae:	f04f 32ff 	mov.w	r2, #4294967295
 80009b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009b6:	2004      	movs	r0, #4
 80009b8:	f000 ffe8 	bl	800198c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <SystemClock_Config+0xe8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <SystemClock_Config+0xe8>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <SystemClock_Config+0xe8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d8:	bf00      	nop
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <SystemClock_Config+0xe8>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009e6:	d1f8      	bne.n	80009da <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009e8:	2321      	movs	r3, #33	; 0x21
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009f2:	2301      	movs	r3, #1
 80009f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a02:	2318      	movs	r3, #24
 8000a04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a12:	230c      	movs	r3, #12
 8000a14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f80c 	bl	8001a40 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2e:	f000 f9dd 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	233f      	movs	r3, #63	; 0x3f
 8000a34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2303      	movs	r3, #3
 8000a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2102      	movs	r1, #2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fc24 	bl	80022a4 <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000a62:	f000 f9c3 	bl	8000dec <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3770      	adds	r7, #112	; 0x70
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58024400 	.word	0x58024400
 8000a74:	58024800 	.word	0x58024800

08000a78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_UART4_Init+0x94>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa2:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_UART4_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_UART4_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_UART4_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ac2:	f003 fdab 	bl	800461c <HAL_HalfDuplex_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000acc:	f000 f98e 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ad4:	f004 ff47 	bl	8005966 <HAL_UARTEx_SetTxFifoThreshold>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ade:	f000 f985 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4808      	ldr	r0, [pc, #32]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ae6:	f004 ff7c 	bl	80059e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000af0:	f000 f97c 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_UART4_Init+0x90>)
 8000af6:	f004 fefd 	bl	80058f4 <HAL_UARTEx_DisableFifoMode>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f000 f974 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	240001fc 	.word	0x240001fc
 8000b0c:	40004c00 	.word	0x40004c00

08000b10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b16:	4a23      	ldr	r2, [pc, #140]	; (8000ba4 <MX_USART3_UART_Init+0x94>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b58:	4811      	ldr	r0, [pc, #68]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b5a:	f003 fd0f 	bl	800457c <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f942 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b6c:	f004 fefb 	bl	8005966 <HAL_UARTEx_SetTxFifoThreshold>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b76:	f000 f939 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b7e:	f004 ff30 	bl	80059e2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 f930 	bl	8000dec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	f004 feb1 	bl	80058f4 <HAL_UARTEx_DisableFifoMode>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f928 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	24000290 	.word	0x24000290
 8000ba4:	40004800 	.word	0x40004800

08000ba8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
 8000bcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	4b80      	ldr	r3, [pc, #512]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd4:	4a7e      	ldr	r2, [pc, #504]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000bd6:	f043 0304 	orr.w	r3, r3, #4
 8000bda:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bde:	4b7c      	ldr	r3, [pc, #496]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	623b      	str	r3, [r7, #32]
 8000bea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bec:	4b78      	ldr	r3, [pc, #480]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf2:	4a77      	ldr	r2, [pc, #476]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000bf4:	f043 0320 	orr.w	r3, r3, #32
 8000bf8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000bfc:	4b74      	ldr	r3, [pc, #464]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c02:	f003 0320 	and.w	r3, r3, #32
 8000c06:	61fb      	str	r3, [r7, #28]
 8000c08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	4b71      	ldr	r3, [pc, #452]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c10:	4a6f      	ldr	r2, [pc, #444]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c1a:	4b6d      	ldr	r3, [pc, #436]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b69      	ldr	r3, [pc, #420]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c2e:	4a68      	ldr	r2, [pc, #416]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c38:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c4c:	4a60      	ldr	r2, [pc, #384]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c4e:	f043 0302 	orr.w	r3, r3, #2
 8000c52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c56:	4b5e      	ldr	r3, [pc, #376]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b5a      	ldr	r3, [pc, #360]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6a:	4a59      	ldr	r2, [pc, #356]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c74:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	4b53      	ldr	r3, [pc, #332]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c88:	4a51      	ldr	r2, [pc, #324]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c92:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000c94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca0:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000ca2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ca6:	4a4a      	ldr	r2, [pc, #296]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000ca8:	f043 0310 	orr.w	r3, r3, #16
 8000cac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cb0:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <MX_GPIO_Init+0x218>)
 8000cb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc4:	4843      	ldr	r0, [pc, #268]	; (8000dd4 <MX_GPIO_Init+0x21c>)
 8000cc6:	f000 fe47 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cd0:	4841      	ldr	r0, [pc, #260]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000cd2:	f000 fe41 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2102      	movs	r1, #2
 8000cda:	4840      	ldr	r0, [pc, #256]	; (8000ddc <MX_GPIO_Init+0x224>)
 8000cdc:	f000 fe3c 	bl	8001958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	483a      	ldr	r0, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x228>)
 8000cf6:	f000 fc7f 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4830      	ldr	r0, [pc, #192]	; (8000dd4 <MX_GPIO_Init+0x21c>)
 8000d14:	f000 fc70 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d18:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4829      	ldr	r0, [pc, #164]	; (8000dd8 <MX_GPIO_Init+0x220>)
 8000d32:	f000 fc61 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4826      	ldr	r0, [pc, #152]	; (8000de4 <MX_GPIO_Init+0x22c>)
 8000d4c:	f000 fc54 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4820      	ldr	r0, [pc, #128]	; (8000de8 <MX_GPIO_Init+0x230>)
 8000d66:	f000 fc47 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d70:	2302      	movs	r3, #2
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d7c:	230a      	movs	r3, #10
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <MX_GPIO_Init+0x230>)
 8000d88:	f000 fc36 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d8c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	4810      	ldr	r0, [pc, #64]	; (8000de8 <MX_GPIO_Init+0x230>)
 8000da6:	f000 fc27 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000daa:	2302      	movs	r3, #2
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4806      	ldr	r0, [pc, #24]	; (8000ddc <MX_GPIO_Init+0x224>)
 8000dc2:	f000 fc19 	bl	80015f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58021400 	.word	0x58021400
 8000dd8:	58020400 	.word	0x58020400
 8000ddc:	58021000 	.word	0x58021000
 8000de0:	58020800 	.word	0x58020800
 8000de4:	58021800 	.word	0x58021800
 8000de8:	58020000 	.word	0x58020000

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_MspInit+0x30>)
 8000e00:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x30>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x30>)
 8000e10:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	58024400 	.word	0x58024400

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0bc      	sub	sp, #240	; 0xf0
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	22c0      	movs	r2, #192	; 0xc0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f004 fe7f 	bl	8005b50 <memset>
  if(huart->Instance==UART4)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_UART_MspInit+0x160>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d146      	bne.n	8000eea <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e5c:	f04f 0202 	mov.w	r2, #2
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e6e:	f107 0318 	add.w	r3, r7, #24
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fda2 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e7e:	f7ff ffb5 	bl	8000dec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e82:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000e84:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e88:	4a41      	ldr	r2, [pc, #260]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e8e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000e94:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea6:	4a3a      	ldr	r2, [pc, #232]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec4:	2312      	movs	r3, #18
 8000ec6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	482c      	ldr	r0, [pc, #176]	; (8000f94 <HAL_UART_MspInit+0x168>)
 8000ee4:	f000 fb88 	bl	80015f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ee8:	e04b      	b.n	8000f82 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2a      	ldr	r2, [pc, #168]	; (8000f98 <HAL_UART_MspInit+0x16c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d146      	bne.n	8000f82 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ef4:	f04f 0202 	mov.w	r2, #2
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fd56 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000f16:	f7ff ff69 	bl	8000dec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000f1c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f20:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f26:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000f2c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000f3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000f40:	f043 0308 	orr.w	r3, r3, #8
 8000f44:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_UART_MspInit+0x164>)
 8000f4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f70:	2307      	movs	r3, #7
 8000f72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f76:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <HAL_UART_MspInit+0x170>)
 8000f7e:	f000 fb3b 	bl	80015f8 <HAL_GPIO_Init>
}
 8000f82:	bf00      	nop
 8000f84:	37f0      	adds	r7, #240	; 0xf0
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40004c00 	.word	0x40004c00
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58020000 	.word	0x58020000
 8000f98:	40004800 	.word	0x40004800
 8000f9c:	58020c00 	.word	0x58020c00

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 f9dc 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return 1;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_kill>:

int _kill(int pid, int sig)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800100e:	f004 fd75 	bl	8005afc <__errno>
 8001012:	4603      	mov	r3, r0
 8001014:	2216      	movs	r2, #22
 8001016:	601a      	str	r2, [r3, #0]
  return -1;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <_exit>:

void _exit (int status)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800102c:	f04f 31ff 	mov.w	r1, #4294967295
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ffe7 	bl	8001004 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001036:	e7fe      	b.n	8001036 <_exit+0x12>

08001038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e00a      	b.n	8001060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104a:	f3af 8000 	nop.w
 800104e:	4601      	mov	r1, r0
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf0      	blt.n	800104a <_read+0x12>
  }

  return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e009      	b.n	8001098 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fb09 	bl	80006a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf1      	blt.n	8001084 <_write+0x12>
  }
  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_close>:

int _close(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d2:	605a      	str	r2, [r3, #4]
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_isatty>:

int _isatty(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f004 fcda 	bl	8005afc <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	24100000 	.word	0x24100000
 8001174:	00000400 	.word	0x00000400
 8001178:	24000324 	.word	0x24000324
 800117c:	24000340 	.word	0x24000340

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001184:	4b32      	ldr	r3, [pc, #200]	; (8001250 <SystemInit+0xd0>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a31      	ldr	r2, [pc, #196]	; (8001250 <SystemInit+0xd0>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <SystemInit+0xd4>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	2b02      	cmp	r3, #2
 800119e:	d807      	bhi.n	80011b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a0:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <SystemInit+0xd4>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	4a2a      	ldr	r2, [pc, #168]	; (8001254 <SystemInit+0xd4>)
 80011aa:	f043 0303 	orr.w	r3, r3, #3
 80011ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <SystemInit+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <SystemInit+0xd8>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <SystemInit+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c2:	4b25      	ldr	r3, [pc, #148]	; (8001258 <SystemInit+0xd8>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4924      	ldr	r1, [pc, #144]	; (8001258 <SystemInit+0xd8>)
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <SystemInit+0xdc>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <SystemInit+0xd4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 030c 	and.w	r3, r3, #12
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <SystemInit+0xd4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 030f 	bic.w	r3, r3, #15
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <SystemInit+0xd4>)
 80011e4:	f043 0303 	orr.w	r3, r3, #3
 80011e8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <SystemInit+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <SystemInit+0xd8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <SystemInit+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011fc:	4b16      	ldr	r3, [pc, #88]	; (8001258 <SystemInit+0xd8>)
 80011fe:	4a18      	ldr	r2, [pc, #96]	; (8001260 <SystemInit+0xe0>)
 8001200:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <SystemInit+0xd8>)
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <SystemInit+0xe4>)
 8001206:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <SystemInit+0xd8>)
 800120a:	4a17      	ldr	r2, [pc, #92]	; (8001268 <SystemInit+0xe8>)
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <SystemInit+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <SystemInit+0xd8>)
 8001216:	4a14      	ldr	r2, [pc, #80]	; (8001268 <SystemInit+0xe8>)
 8001218:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <SystemInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <SystemInit+0xd8>)
 8001222:	4a11      	ldr	r2, [pc, #68]	; (8001268 <SystemInit+0xe8>)
 8001224:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <SystemInit+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <SystemInit+0xd8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a09      	ldr	r2, [pc, #36]	; (8001258 <SystemInit+0xd8>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <SystemInit+0xd8>)
 800123a:	2200      	movs	r2, #0
 800123c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <SystemInit+0xec>)
 8001240:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001244:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	e000ed00 	.word	0xe000ed00
 8001254:	52002000 	.word	0x52002000
 8001258:	58024400 	.word	0x58024400
 800125c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001260:	02020200 	.word	0x02020200
 8001264:	01ff0000 	.word	0x01ff0000
 8001268:	01010280 	.word	0x01010280
 800126c:	52004000 	.word	0x52004000

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001274:	f7ff ff84 	bl	8001180 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800129e:	f004 fc33 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff fa11 	bl	80006c8 <main>
  bx  lr
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012a8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012ac:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012b0:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80012b4:	08009788 	.word	0x08009788
  ldr r2, =_sbss
 80012b8:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80012bc:	2400033c 	.word	0x2400033c

080012c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f000 f962 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012d0:	f001 f99e 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_Init+0x68>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	0a1b      	lsrs	r3, r3, #8
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	4913      	ldr	r1, [pc, #76]	; (8001330 <HAL_Init+0x6c>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_Init+0x68>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_Init+0x6c>)
 80012f8:	5cd3      	ldrb	r3, [r2, r3]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_Init+0x70>)
 8001306:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_Init+0x74>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f814 	bl	800133c <HAL_InitTick>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e002      	b.n	8001324 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800131e:	f7ff fd6b 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58024400 	.word	0x58024400
 8001330:	0800918c 	.word	0x0800918c
 8001334:	24000004 	.word	0x24000004
 8001338:	24000000 	.word	0x24000000

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001344:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_InitTick+0x60>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e021      	b.n	8001394 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_InitTick+0x64>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_InitTick+0x60>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f939 	bl	80015de <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f911 	bl	80015aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x68>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	2400000c 	.word	0x2400000c
 80013a0:	24000000 	.word	0x24000000
 80013a4:	24000008 	.word	0x24000008

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	2400000c 	.word	0x2400000c
 80013cc:	24000328 	.word	0x24000328

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	24000328 	.word	0x24000328

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2400000c 	.word	0x2400000c

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <__NVIC_SetPriorityGrouping+0x40>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	4313      	orrs	r3, r2
 800145c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <__NVIC_SetPriorityGrouping+0x40>)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	60d3      	str	r3, [r2, #12]
}
 8001464:	bf00      	nop
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00
 8001474:	05fa0000 	.word	0x05fa0000

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff47 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff5e 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ffb2 	bl	8001550 <SysTick_Config>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001606:	4b89      	ldr	r3, [pc, #548]	; (800182c <HAL_GPIO_Init+0x234>)
 8001608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800160a:	e194      	b.n	8001936 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa01 f303 	lsl.w	r3, r1, r3
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8186 	beq.w	8001930 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d005      	beq.n	800163c <HAL_GPIO_Init+0x44>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	f003 0201 	and.w	r2, r3, #1
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d017      	beq.n	80016da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d123      	bne.n	800172e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	69b9      	ldr	r1, [r7, #24]
 800172a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0203 	and.w	r2, r3, #3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80e0 	beq.w	8001930 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001770:	4b2f      	ldr	r3, [pc, #188]	; (8001830 <HAL_GPIO_Init+0x238>)
 8001772:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001776:	4a2e      	ldr	r2, [pc, #184]	; (8001830 <HAL_GPIO_Init+0x238>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_GPIO_Init+0x238>)
 8001782:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178e:	4a29      	ldr	r2, [pc, #164]	; (8001834 <HAL_GPIO_Init+0x23c>)
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	089b      	lsrs	r3, r3, #2
 8001794:	3302      	adds	r3, #2
 8001796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_GPIO_Init+0x240>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d052      	beq.n	8001860 <HAL_GPIO_Init+0x268>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1f      	ldr	r2, [pc, #124]	; (800183c <HAL_GPIO_Init+0x244>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d031      	beq.n	8001826 <HAL_GPIO_Init+0x22e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_GPIO_Init+0x248>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02b      	beq.n	8001822 <HAL_GPIO_Init+0x22a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_GPIO_Init+0x24c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d025      	beq.n	800181e <HAL_GPIO_Init+0x226>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <HAL_GPIO_Init+0x250>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01f      	beq.n	800181a <HAL_GPIO_Init+0x222>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <HAL_GPIO_Init+0x254>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x21e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <HAL_GPIO_Init+0x258>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x21a>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_GPIO_Init+0x25c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x216>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <HAL_GPIO_Init+0x260>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x212>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a17      	ldr	r2, [pc, #92]	; (800185c <HAL_GPIO_Init+0x264>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x20e>
 8001802:	2309      	movs	r3, #9
 8001804:	e02d      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 8001806:	230a      	movs	r3, #10
 8001808:	e02b      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 800180a:	2308      	movs	r3, #8
 800180c:	e029      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 800180e:	2307      	movs	r3, #7
 8001810:	e027      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 8001812:	2306      	movs	r3, #6
 8001814:	e025      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 8001816:	2305      	movs	r3, #5
 8001818:	e023      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 800181a:	2304      	movs	r3, #4
 800181c:	e021      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 800181e:	2303      	movs	r3, #3
 8001820:	e01f      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 8001822:	2302      	movs	r3, #2
 8001824:	e01d      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 8001826:	2301      	movs	r3, #1
 8001828:	e01b      	b.n	8001862 <HAL_GPIO_Init+0x26a>
 800182a:	bf00      	nop
 800182c:	58000080 	.word	0x58000080
 8001830:	58024400 	.word	0x58024400
 8001834:	58000400 	.word	0x58000400
 8001838:	58020000 	.word	0x58020000
 800183c:	58020400 	.word	0x58020400
 8001840:	58020800 	.word	0x58020800
 8001844:	58020c00 	.word	0x58020c00
 8001848:	58021000 	.word	0x58021000
 800184c:	58021400 	.word	0x58021400
 8001850:	58021800 	.word	0x58021800
 8001854:	58021c00 	.word	0x58021c00
 8001858:	58022000 	.word	0x58022000
 800185c:	58022400 	.word	0x58022400
 8001860:	2300      	movs	r3, #0
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001872:	4938      	ldr	r1, [pc, #224]	; (8001954 <HAL_GPIO_Init+0x35c>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018aa:	69bb      	ldr	r3, [r7, #24]
 80018ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	3301      	adds	r3, #1
 8001934:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa22 f303 	lsr.w	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	f47f ae63 	bne.w	800160c <HAL_GPIO_Init+0x14>
  }
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3724      	adds	r7, #36	; 0x24
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	58000400 	.word	0x58000400

08001958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	807b      	strh	r3, [r7, #2]
 8001964:	4613      	mov	r3, r2
 8001966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800196e:	887a      	ldrh	r2, [r7, #2]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001974:	e003      	b.n	800197e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001976:	887b      	ldrh	r3, [r7, #2]
 8001978:	041a      	lsls	r2, r3, #16
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	619a      	str	r2, [r3, #24]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001994:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_PWREx_ConfigSupply+0xb0>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	2b06      	cmp	r3, #6
 800199e:	d00a      	beq.n	80019b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_PWREx_ConfigSupply+0xb0>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d001      	beq.n	80019b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e040      	b.n	8001a34 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019b2:	2300      	movs	r3, #0
 80019b4:	e03e      	b.n	8001a34 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <HAL_PWREx_ConfigSupply+0xb0>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80019be:	491f      	ldr	r1, [pc, #124]	; (8001a3c <HAL_PWREx_ConfigSupply+0xb0>)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019c6:	f7ff fd03 	bl	80013d0 <HAL_GetTick>
 80019ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019cc:	e009      	b.n	80019e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019ce:	f7ff fcff 	bl	80013d0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019dc:	d901      	bls.n	80019e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e028      	b.n	8001a34 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <HAL_PWREx_ConfigSupply+0xb0>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ee:	d1ee      	bne.n	80019ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b1e      	cmp	r3, #30
 80019f4:	d008      	beq.n	8001a08 <HAL_PWREx_ConfigSupply+0x7c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b2e      	cmp	r3, #46	; 0x2e
 80019fa:	d005      	beq.n	8001a08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b1d      	cmp	r3, #29
 8001a00:	d002      	beq.n	8001a08 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b2d      	cmp	r3, #45	; 0x2d
 8001a06:	d114      	bne.n	8001a32 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a08:	f7ff fce2 	bl	80013d0 <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a0e:	e009      	b.n	8001a24 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a10:	f7ff fcde 	bl	80013d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a1e:	d901      	bls.n	8001a24 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e007      	b.n	8001a34 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d1ee      	bne.n	8001a10 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	58024800 	.word	0x58024800

08001a40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	f000 bc1f 	b.w	8002292 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80b3 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b95      	ldr	r3, [pc, #596]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a74:	2b10      	cmp	r3, #16
 8001a76:	d007      	beq.n	8001a88 <HAL_RCC_OscConfig+0x48>
 8001a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7a:	2b18      	cmp	r3, #24
 8001a7c:	d112      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x64>
 8001a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d10d      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8098 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x186>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8093 	bne.w	8001bc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e3f6      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d106      	bne.n	8001abc <HAL_RCC_OscConfig+0x7c>
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a81      	ldr	r2, [pc, #516]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	e058      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d112      	bne.n	8001aea <HAL_RCC_OscConfig+0xaa>
 8001ac4:	4b7c      	ldr	r3, [pc, #496]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a7b      	ldr	r2, [pc, #492]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b79      	ldr	r3, [pc, #484]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a78      	ldr	r2, [pc, #480]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ad6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a75      	ldr	r2, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	e041      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af2:	d112      	bne.n	8001b1a <HAL_RCC_OscConfig+0xda>
 8001af4:	4b70      	ldr	r3, [pc, #448]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6f      	ldr	r2, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6c      	ldr	r2, [pc, #432]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e029      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001b22:	d112      	bne.n	8001b4a <HAL_RCC_OscConfig+0x10a>
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a63      	ldr	r2, [pc, #396]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e011      	b.n	8001b6e <HAL_RCC_OscConfig+0x12e>
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b55      	ldr	r3, [pc, #340]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a54      	ldr	r2, [pc, #336]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d013      	beq.n	8001b9e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fc2b 	bl	80013d0 <HAL_GetTick>
 8001b7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fc27 	bl	80013d0 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	; 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e380      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x13e>
 8001b9c:	e014      	b.n	8001bc8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fc17 	bl	80013d0 <HAL_GetTick>
 8001ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fc13 	bl	80013d0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	; 0x64
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e36c      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x166>
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 808c 	beq.w	8001cee <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bde:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001be0:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d007      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1bc>
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b18      	cmp	r3, #24
 8001bf0:	d137      	bne.n	8001c62 <HAL_RCC_OscConfig+0x222>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d132      	bne.n	8001c62 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1d4>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e33e      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 0219 	bic.w	r2, r3, #25
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4925      	ldr	r1, [pc, #148]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff fbd3 	bl	80013d0 <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fbcf 	bl	80013d0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e328      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	4917      	ldr	r1, [pc, #92]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c60:	e045      	b.n	8001cee <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d028      	beq.n	8001cbc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f023 0219 	bic.w	r2, r3, #25
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	4910      	ldr	r1, [pc, #64]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fba8 	bl	80013d0 <HAL_GetTick>
 8001c80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff fba4 	bl	80013d0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e2fd      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	061b      	lsls	r3, r3, #24
 8001cb0:	4901      	ldr	r1, [pc, #4]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
 8001cb6:	e01a      	b.n	8001cee <HAL_RCC_OscConfig+0x2ae>
 8001cb8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b97      	ldr	r3, [pc, #604]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a96      	ldr	r2, [pc, #600]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fb82 	bl	80013d0 <HAL_GetTick>
 8001ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fb7e 	bl	80013d0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e2d7      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce2:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d06a      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d02:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d04:	4b85      	ldr	r3, [pc, #532]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d007      	beq.n	8001d20 <HAL_RCC_OscConfig+0x2e0>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b18      	cmp	r3, #24
 8001d14:	d11b      	bne.n	8001d4e <HAL_RCC_OscConfig+0x30e>
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d116      	bne.n	8001d4e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d20:	4b7e      	ldr	r3, [pc, #504]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2f8>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e2ac      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d38:	4b78      	ldr	r3, [pc, #480]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	4975      	ldr	r1, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d4c:	e040      	b.n	8001dd0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d023      	beq.n	8001d9e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d56:	4b71      	ldr	r3, [pc, #452]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a70      	ldr	r2, [pc, #448]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d62:	f7ff fb35 	bl	80013d0 <HAL_GetTick>
 8001d66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fb31 	bl	80013d0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e28a      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d7c:	4b67      	ldr	r3, [pc, #412]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	4961      	ldr	r1, [pc, #388]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60cb      	str	r3, [r1, #12]
 8001d9c:	e018      	b.n	8001dd0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5e      	ldr	r2, [pc, #376]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff fb11 	bl	80013d0 <HAL_GetTick>
 8001dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001db2:	f7ff fb0d 	bl	80013d0 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e266      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dc4:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d036      	beq.n	8001e4a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d019      	beq.n	8001e18 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de4:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de8:	4a4c      	ldr	r2, [pc, #304]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff faee 	bl	80013d0 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df8:	f7ff faea 	bl	80013d0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e243      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x3b8>
 8001e16:	e018      	b.n	8001e4a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e18:	4b40      	ldr	r3, [pc, #256]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1c:	4a3f      	ldr	r2, [pc, #252]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e1e:	f023 0301 	bic.w	r3, r3, #1
 8001e22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff fad4 	bl	80013d0 <HAL_GetTick>
 8001e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fad0 	bl	80013d0 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e229      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e3e:	4b37      	ldr	r3, [pc, #220]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d036      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2e      	ldr	r2, [pc, #184]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e6a:	f7ff fab1 	bl	80013d0 <HAL_GetTick>
 8001e6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e72:	f7ff faad 	bl	80013d0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e206      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x432>
 8001e90:	e018      	b.n	8001ec4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fa97 	bl	80013d0 <HAL_GetTick>
 8001ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea6:	f7ff fa93 	bl	80013d0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e1ec      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80af 	beq.w	8002030 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCC_OscConfig+0x4e0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <HAL_RCC_OscConfig+0x4e0>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ede:	f7ff fa77 	bl	80013d0 <HAL_GetTick>
 8001ee2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fa73 	bl	80013d0 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e1cc      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_OscConfig+0x4e0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d10b      	bne.n	8001f24 <HAL_RCC_OscConfig+0x4e4>
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a02      	ldr	r2, [pc, #8]	; (8001f1c <HAL_RCC_OscConfig+0x4dc>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	e05b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x592>
 8001f1a:	bf00      	nop
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	58024800 	.word	0x58024800
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <HAL_RCC_OscConfig+0x512>
 8001f2c:	4b9d      	ldr	r3, [pc, #628]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f30:	4a9c      	ldr	r2, [pc, #624]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	; 0x70
 8001f38:	4b9a      	ldr	r3, [pc, #616]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	4a99      	ldr	r2, [pc, #612]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f42:	6713      	str	r3, [r2, #112]	; 0x70
 8001f44:	4b97      	ldr	r3, [pc, #604]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	4a96      	ldr	r2, [pc, #600]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f4a:	f023 0304 	bic.w	r3, r3, #4
 8001f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f50:	e03f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x592>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d112      	bne.n	8001f80 <HAL_RCC_OscConfig+0x540>
 8001f5a:	4b92      	ldr	r3, [pc, #584]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	4a91      	ldr	r2, [pc, #580]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6713      	str	r3, [r2, #112]	; 0x70
 8001f66:	4b8f      	ldr	r3, [pc, #572]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a8e      	ldr	r2, [pc, #568]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	4b8c      	ldr	r3, [pc, #560]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a8b      	ldr	r2, [pc, #556]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7e:	e028      	b.n	8001fd2 <HAL_RCC_OscConfig+0x592>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b85      	cmp	r3, #133	; 0x85
 8001f86:	d112      	bne.n	8001fae <HAL_RCC_OscConfig+0x56e>
 8001f88:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a85      	ldr	r2, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	4b83      	ldr	r3, [pc, #524]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a82      	ldr	r2, [pc, #520]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa0:	4b80      	ldr	r3, [pc, #512]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	4a7f      	ldr	r2, [pc, #508]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	6713      	str	r3, [r2, #112]	; 0x70
 8001fac:	e011      	b.n	8001fd2 <HAL_RCC_OscConfig+0x592>
 8001fae:	4b7d      	ldr	r3, [pc, #500]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb2:	4a7c      	ldr	r2, [pc, #496]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fba:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbe:	4a79      	ldr	r2, [pc, #484]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fc0:	f023 0304 	bic.w	r3, r3, #4
 8001fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc6:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	4a76      	ldr	r2, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d015      	beq.n	8002006 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fda:	f7ff f9f9 	bl	80013d0 <HAL_GetTick>
 8001fde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7ff f9f5 	bl	80013d0 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e14c      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0ee      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x5a2>
 8002004:	e014      	b.n	8002030 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002006:	f7ff f9e3 	bl	80013d0 <HAL_GetTick>
 800200a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7ff f9df 	bl	80013d0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e136      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002024:	4b5f      	ldr	r3, [pc, #380]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ee      	bne.n	800200e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 812b 	beq.w	8002290 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800203a:	4b5a      	ldr	r3, [pc, #360]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002042:	2b18      	cmp	r3, #24
 8002044:	f000 80bb 	beq.w	80021be <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b02      	cmp	r3, #2
 800204e:	f040 8095 	bne.w	800217c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a53      	ldr	r2, [pc, #332]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff f9b7 	bl	80013d0 <HAL_GetTick>
 8002062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002066:	f7ff f9b3 	bl	80013d0 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e10c      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002078:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002088:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_OscConfig+0x768>)
 800208a:	4013      	ands	r3, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	430a      	orrs	r2, r1
 8002098:	4942      	ldr	r1, [pc, #264]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800209a:	4313      	orrs	r3, r2
 800209c:	628b      	str	r3, [r1, #40]	; 0x28
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	3b01      	subs	r3, #1
 80020ae:	025b      	lsls	r3, r3, #9
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	3b01      	subs	r3, #1
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	3b01      	subs	r3, #1
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020ce:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020d4:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	4a32      	ldr	r2, [pc, #200]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020e0:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 80020e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_OscConfig+0x76c>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020ec:	00d2      	lsls	r2, r2, #3
 80020ee:	492d      	ldr	r1, [pc, #180]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f023 020c 	bic.w	r2, r3, #12
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	4928      	ldr	r1, [pc, #160]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002102:	4313      	orrs	r3, r2
 8002104:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002106:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f023 0202 	bic.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4924      	ldr	r1, [pc, #144]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002114:	4313      	orrs	r3, r2
 8002116:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002122:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800212a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002130:	4b1c      	ldr	r3, [pc, #112]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002136:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	4a18      	ldr	r2, [pc, #96]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800214e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff f93c 	bl	80013d0 <HAL_GetTick>
 8002158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800215c:	f7ff f938 	bl	80013d0 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e091      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d0f0      	beq.n	800215c <HAL_RCC_OscConfig+0x71c>
 800217a:	e089      	b.n	8002290 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x764>)
 8002182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f922 	bl	80013d0 <HAL_GetTick>
 800218c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800218e:	e00f      	b.n	80021b0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff f91e 	bl	80013d0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d908      	bls.n	80021b0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e077      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
 80021a2:	bf00      	nop
 80021a4:	58024400 	.word	0x58024400
 80021a8:	fffffc0c 	.word	0xfffffc0c
 80021ac:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e9      	bne.n	8002190 <HAL_RCC_OscConfig+0x750>
 80021bc:	e068      	b.n	8002290 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 80021c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021c4:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d031      	beq.n	8002236 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d12a      	bne.n	8002236 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d122      	bne.n	8002236 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d11a      	bne.n	8002236 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	0a5b      	lsrs	r3, r3, #9
 8002204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800220c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d111      	bne.n	8002236 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d108      	bne.n	8002236 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	0e1b      	lsrs	r3, r3, #24
 8002228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e02b      	b.n	8002292 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	08db      	lsrs	r3, r3, #3
 8002240:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002244:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d01f      	beq.n	8002290 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 8002256:	f023 0301 	bic.w	r3, r3, #1
 800225a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800225c:	f7ff f8b8 	bl	80013d0 <HAL_GetTick>
 8002260:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002262:	bf00      	nop
 8002264:	f7ff f8b4 	bl	80013d0 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	4293      	cmp	r3, r2
 800226e:	d0f9      	beq.n	8002264 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x860>)
 8002276:	4013      	ands	r3, r2
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800227c:	00d2      	lsls	r2, r2, #3
 800227e:	4907      	ldr	r1, [pc, #28]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 8002280:	4313      	orrs	r3, r2
 8002282:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 8002286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <HAL_RCC_OscConfig+0x85c>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3730      	adds	r7, #48	; 0x30
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	58024400 	.word	0x58024400
 80022a0:	ffff0007 	.word	0xffff0007

080022a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e19c      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b8a      	ldr	r3, [pc, #552]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b87      	ldr	r3, [pc, #540]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 020f 	bic.w	r2, r3, #15
 80022ce:	4985      	ldr	r1, [pc, #532]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b83      	ldr	r3, [pc, #524]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e184      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d010      	beq.n	8002316 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002300:	429a      	cmp	r2, r3
 8002302:	d908      	bls.n	8002316 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002304:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4975      	ldr	r1, [pc, #468]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002312:	4313      	orrs	r3, r2
 8002314:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695a      	ldr	r2, [r3, #20]
 8002326:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800232e:	429a      	cmp	r2, r3
 8002330:	d908      	bls.n	8002344 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002332:	4b6d      	ldr	r3, [pc, #436]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	496a      	ldr	r1, [pc, #424]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002340:	4313      	orrs	r3, r2
 8002342:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699a      	ldr	r2, [r3, #24]
 8002354:	4b64      	ldr	r3, [pc, #400]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800235c:	429a      	cmp	r2, r3
 800235e:	d908      	bls.n	8002372 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	495e      	ldr	r1, [pc, #376]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 800236e:	4313      	orrs	r3, r2
 8002370:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0320 	and.w	r3, r3, #32
 800237a:	2b00      	cmp	r3, #0
 800237c:	d010      	beq.n	80023a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002384:	6a1b      	ldr	r3, [r3, #32]
 8002386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238a:	429a      	cmp	r2, r3
 800238c:	d908      	bls.n	80023a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800238e:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	4953      	ldr	r1, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 800239c:	4313      	orrs	r3, r2
 800239e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d010      	beq.n	80023ce <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	4b4d      	ldr	r3, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 030f 	and.w	r3, r3, #15
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d908      	bls.n	80023ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023bc:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f023 020f 	bic.w	r2, r3, #15
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4947      	ldr	r1, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d055      	beq.n	8002486 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4940      	ldr	r1, [pc, #256]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d121      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0f6      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d107      	bne.n	800241c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800240c:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d115      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0ea      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d107      	bne.n	8002434 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002424:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0de      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0d6      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f023 0207 	bic.w	r2, r3, #7
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4925      	ldr	r1, [pc, #148]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002452:	4313      	orrs	r3, r2
 8002454:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002456:	f7fe ffbb 	bl	80013d0 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245c:	e00a      	b.n	8002474 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245e:	f7fe ffb7 	bl	80013d0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0be      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	429a      	cmp	r2, r3
 8002484:	d1eb      	bne.n	800245e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	429a      	cmp	r2, r3
 80024a0:	d208      	bcs.n	80024b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a2:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f023 020f 	bic.w	r2, r3, #15
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x244>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 030f 	and.w	r3, r3, #15
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d214      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c2:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 020f 	bic.w	r2, r3, #15
 80024ca:	4906      	ldr	r1, [pc, #24]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_RCC_ClockConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e086      	b.n	80025f2 <HAL_RCC_ClockConfig+0x34e>
 80024e4:	52002000 	.word	0x52002000
 80024e8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d010      	beq.n	800251a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	4b3f      	ldr	r3, [pc, #252]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002504:	429a      	cmp	r2, r3
 8002506:	d208      	bcs.n	800251a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002508:	4b3c      	ldr	r3, [pc, #240]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	4939      	ldr	r1, [pc, #228]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 8002516:	4313      	orrs	r3, r2
 8002518:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	4b34      	ldr	r3, [pc, #208]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002532:	429a      	cmp	r2, r3
 8002534:	d208      	bcs.n	8002548 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	492e      	ldr	r1, [pc, #184]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 8002544:	4313      	orrs	r3, r2
 8002546:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 800255a:	69db      	ldr	r3, [r3, #28]
 800255c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002560:	429a      	cmp	r2, r3
 8002562:	d208      	bcs.n	8002576 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4922      	ldr	r1, [pc, #136]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 8002572:	4313      	orrs	r3, r2
 8002574:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d010      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800258e:	429a      	cmp	r2, r3
 8002590:	d208      	bcs.n	80025a4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002592:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	4917      	ldr	r1, [pc, #92]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80025a4:	f000 f834 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	4912      	ldr	r1, [pc, #72]	; (8002600 <HAL_RCC_ClockConfig+0x35c>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_RCC_ClockConfig+0x358>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	4a0d      	ldr	r2, [pc, #52]	; (8002600 <HAL_RCC_ClockConfig+0x35c>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <HAL_RCC_ClockConfig+0x360>)
 80025da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x364>)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x368>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fea8 	bl	800133c <HAL_InitTick>
 80025ec:	4603      	mov	r3, r0
 80025ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	58024400 	.word	0x58024400
 8002600:	0800918c 	.word	0x0800918c
 8002604:	24000004 	.word	0x24000004
 8002608:	24000000 	.word	0x24000000
 800260c:	24000008 	.word	0x24000008

08002610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002616:	4bb3      	ldr	r3, [pc, #716]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800261e:	2b18      	cmp	r3, #24
 8002620:	f200 8155 	bhi.w	80028ce <HAL_RCC_GetSysClockFreq+0x2be>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	08002691 	.word	0x08002691
 8002630:	080028cf 	.word	0x080028cf
 8002634:	080028cf 	.word	0x080028cf
 8002638:	080028cf 	.word	0x080028cf
 800263c:	080028cf 	.word	0x080028cf
 8002640:	080028cf 	.word	0x080028cf
 8002644:	080028cf 	.word	0x080028cf
 8002648:	080028cf 	.word	0x080028cf
 800264c:	080026b7 	.word	0x080026b7
 8002650:	080028cf 	.word	0x080028cf
 8002654:	080028cf 	.word	0x080028cf
 8002658:	080028cf 	.word	0x080028cf
 800265c:	080028cf 	.word	0x080028cf
 8002660:	080028cf 	.word	0x080028cf
 8002664:	080028cf 	.word	0x080028cf
 8002668:	080028cf 	.word	0x080028cf
 800266c:	080026bd 	.word	0x080026bd
 8002670:	080028cf 	.word	0x080028cf
 8002674:	080028cf 	.word	0x080028cf
 8002678:	080028cf 	.word	0x080028cf
 800267c:	080028cf 	.word	0x080028cf
 8002680:	080028cf 	.word	0x080028cf
 8002684:	080028cf 	.word	0x080028cf
 8002688:	080028cf 	.word	0x080028cf
 800268c:	080026c3 	.word	0x080026c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002690:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d009      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800269c:	4b91      	ldr	r3, [pc, #580]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	4a90      	ldr	r2, [pc, #576]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026ae:	e111      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026b0:	4b8d      	ldr	r3, [pc, #564]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b2:	61bb      	str	r3, [r7, #24]
      break;
 80026b4:	e10e      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026b6:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026b8:	61bb      	str	r3, [r7, #24]
      break;
 80026ba:	e10b      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026bc:	4b8c      	ldr	r3, [pc, #560]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026be:	61bb      	str	r3, [r7, #24]
      break;
 80026c0:	e108      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026c2:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	f003 0303 	and.w	r3, r3, #3
 80026ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026cc:	4b85      	ldr	r3, [pc, #532]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026d8:	4b82      	ldr	r3, [pc, #520]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026e2:	4b80      	ldr	r3, [pc, #512]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	08db      	lsrs	r3, r3, #3
 80026e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	fb02 f303 	mul.w	r3, r2, r3
 80026f2:	ee07 3a90 	vmov	s15, r3
 80026f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80e1 	beq.w	80028c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b02      	cmp	r3, #2
 800270a:	f000 8083 	beq.w	8002814 <HAL_RCC_GetSysClockFreq+0x204>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b02      	cmp	r3, #2
 8002712:	f200 80a1 	bhi.w	8002858 <HAL_RCC_GetSysClockFreq+0x248>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x114>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d056      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002722:	e099      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002724:	4b6f      	ldr	r3, [pc, #444]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d02d      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002730:	4b6c      	ldr	r3, [pc, #432]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	4a6b      	ldr	r2, [pc, #428]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
 8002740:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275a:	4b62      	ldr	r3, [pc, #392]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276a:	ed97 6a02 	vldr	s12, [r7, #8]
 800276e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800277e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800278a:	e087      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	ee07 3a90 	vmov	s15, r3
 8002792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002796:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800279a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279e:	4b51      	ldr	r3, [pc, #324]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ce:	e065      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	ee07 3a90 	vmov	s15, r3
 80027d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80028fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80027de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e2:	4b40      	ldr	r3, [pc, #256]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002812:	e043      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	ee07 3a90 	vmov	s15, r3
 800281a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282e:	ee07 3a90 	vmov	s15, r3
 8002832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002836:	ed97 6a02 	vldr	s12, [r7, #8]
 800283a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800283e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800284e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002856:	e021      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	ee07 3a90 	vmov	s15, r3
 800285e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002862:	eddf 6a26 	vldr	s13, [pc, #152]	; 80028fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287a:	ed97 6a02 	vldr	s12, [r7, #8]
 800287e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800288e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800289a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	0a5b      	lsrs	r3, r3, #9
 80028a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a6:	3301      	adds	r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	ee07 3a90 	vmov	s15, r3
 80028b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80028b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c0:	ee17 3a90 	vmov	r3, s15
 80028c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028c6:	e005      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
      break;
 80028cc:	e002      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028d0:	61bb      	str	r3, [r7, #24]
      break;
 80028d2:	bf00      	nop
  }

  return sysclockfreq;
 80028d4:	69bb      	ldr	r3, [r7, #24]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	58024400 	.word	0x58024400
 80028e8:	03d09000 	.word	0x03d09000
 80028ec:	003d0900 	.word	0x003d0900
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	46000000 	.word	0x46000000
 80028f8:	4c742400 	.word	0x4c742400
 80028fc:	4a742400 	.word	0x4a742400
 8002900:	4af42400 	.word	0x4af42400

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800290a:	f7ff fe81 	bl	8002610 <HAL_RCC_GetSysClockFreq>
 800290e:	4602      	mov	r2, r0
 8002910:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_GetHCLKFreq+0x50>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	490f      	ldr	r1, [pc, #60]	; (8002958 <HAL_RCC_GetHCLKFreq+0x54>)
 800291c:	5ccb      	ldrb	r3, [r1, r3]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002928:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_RCC_GetHCLKFreq+0x50>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	4a09      	ldr	r2, [pc, #36]	; (8002958 <HAL_RCC_GetHCLKFreq+0x54>)
 8002932:	5cd3      	ldrb	r3, [r2, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a07      	ldr	r2, [pc, #28]	; (800295c <HAL_RCC_GetHCLKFreq+0x58>)
 8002940:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <HAL_RCC_GetHCLKFreq+0x58>)
 800294a:	681b      	ldr	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	58024400 	.word	0x58024400
 8002958:	0800918c 	.word	0x0800918c
 800295c:	24000004 	.word	0x24000004
 8002960:	24000000 	.word	0x24000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002968:	f7ff ffcc 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4904      	ldr	r1, [pc, #16]	; (800298c <HAL_RCC_GetPCLK1Freq+0x28>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002984:	4618      	mov	r0, r3
 8002986:	bd80      	pop	{r7, pc}
 8002988:	58024400 	.word	0x58024400
 800298c:	0800918c 	.word	0x0800918c

08002990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002994:	f7ff ffb6 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4904      	ldr	r1, [pc, #16]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	58024400 	.word	0x58024400
 80029b8:	0800918c 	.word	0x0800918c

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b0c8      	sub	sp, #288	; 0x120
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029c8:	2300      	movs	r3, #0
 80029ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80029e0:	2500      	movs	r5, #0
 80029e2:	ea54 0305 	orrs.w	r3, r4, r5
 80029e6:	d049      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f2:	d02f      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f8:	d828      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029fe:	d01a      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a04:	d822      	bhi.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0e:	d007      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a10:	e01c      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a12:	4ba7      	ldr	r3, [pc, #668]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	4aa6      	ldr	r2, [pc, #664]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a1e:	e01a      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a24:	3308      	adds	r3, #8
 8002a26:	2102      	movs	r1, #2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 fc43 	bl	80042b4 <RCCEx_PLL2_Config>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a34:	e00f      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a3a:	3328      	adds	r3, #40	; 0x28
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 fcea 	bl	8004418 <RCCEx_PLL3_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a4a:	e004      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a52:	e000      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a5e:	4b94      	ldr	r3, [pc, #592]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a62:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a6c:	4a90      	ldr	r2, [pc, #576]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a6e:	430b      	orrs	r3, r1
 8002a70:	6513      	str	r3, [r2, #80]	; 0x50
 8002a72:	e003      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002a88:	f04f 0900 	mov.w	r9, #0
 8002a8c:	ea58 0309 	orrs.w	r3, r8, r9
 8002a90:	d047      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d82a      	bhi.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ab9 	.word	0x08002ab9
 8002aa8:	08002ac7 	.word	0x08002ac7
 8002aac:	08002add 	.word	0x08002add
 8002ab0:	08002afb 	.word	0x08002afb
 8002ab4:	08002afb 	.word	0x08002afb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ab8:	4b7d      	ldr	r3, [pc, #500]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	4a7c      	ldr	r2, [pc, #496]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac4:	e01a      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002aca:	3308      	adds	r3, #8
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 fbf0 	bl	80042b4 <RCCEx_PLL2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ada:	e00f      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ae0:	3328      	adds	r3, #40	; 0x28
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 fc97 	bl	8004418 <RCCEx_PLL3_Config>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af0:	e004      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002af8:	e000      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002afc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b04:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	f023 0107 	bic.w	r1, r3, #7
 8002b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b12:	4a67      	ldr	r2, [pc, #412]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b14:	430b      	orrs	r3, r1
 8002b16:	6513      	str	r3, [r2, #80]	; 0x50
 8002b18:	e003      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b1e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002b2e:	f04f 0b00 	mov.w	fp, #0
 8002b32:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b36:	d054      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b42:	d036      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002b44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b48:	d82f      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d032      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b54:	d829      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b56:	2bc0      	cmp	r3, #192	; 0xc0
 8002b58:	d02f      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b5c:	d825      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b5e:	2b80      	cmp	r3, #128	; 0x80
 8002b60:	d018      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d821      	bhi.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d007      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002b6e:	e01c      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b70:	4b4f      	ldr	r3, [pc, #316]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b7c:	e01e      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b82:	3308      	adds	r3, #8
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 fb94 	bl	80042b4 <RCCEx_PLL2_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b92:	e013      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b98:	3328      	adds	r3, #40	; 0x28
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f001 fc3b 	bl	8004418 <RCCEx_PLL3_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002ba8:	e008      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bb0:	e004      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002bb2:	bf00      	nop
 8002bb4:	e002      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002bb6:	bf00      	nop
 8002bb8:	e000      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002bba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	4a37      	ldr	r2, [pc, #220]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6513      	str	r3, [r2, #80]	; 0x50
 8002bd8:	e003      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bde:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002bee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bf8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	d05c      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c0c:	d03b      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c0e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c12:	d834      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c18:	d037      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1e:	d82e      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c20:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c24:	d033      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002c26:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c2a:	d828      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c30:	d01a      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c36:	d822      	bhi.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d007      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002c42:	e01c      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c44:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c50:	e01e      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c56:	3308      	adds	r3, #8
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f001 fb2a 	bl	80042b4 <RCCEx_PLL2_Config>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c66:	e013      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c6c:	3328      	adds	r3, #40	; 0x28
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f001 fbd1 	bl	8004418 <RCCEx_PLL3_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c7c:	e008      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c84:	e004      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c86:	bf00      	nop
 8002c88:	e002      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c8a:	bf00      	nop
 8002c8c:	e000      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10d      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	4a02      	ldr	r2, [pc, #8]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6513      	str	r3, [r2, #80]	; 0x50
 8002cac:	e006      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002cd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	d03a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	2b30      	cmp	r3, #48	; 0x30
 8002ce4:	d01f      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002ce6:	2b30      	cmp	r3, #48	; 0x30
 8002ce8:	d819      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d00c      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d815      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d019      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002cf6:	2b10      	cmp	r3, #16
 8002cf8:	d111      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfa:	4bae      	ldr	r3, [pc, #696]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	4aad      	ldr	r2, [pc, #692]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002d06:	e011      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	2102      	movs	r1, #2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 facf 	bl	80042b4 <RCCEx_PLL2_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002d1c:	e006      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d24:	e002      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d34:	4b9f      	ldr	r3, [pc, #636]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d38:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	4a9c      	ldr	r2, [pc, #624]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d44:	430b      	orrs	r3, r1
 8002d46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d48:	e003      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d4e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	d051      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d7c:	d035      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d82:	d82e      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d88:	d031      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002d8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d8e:	d828      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d94:	d01a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	d822      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da4:	d007      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002da6:	e01c      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002da8:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	4a81      	ldr	r2, [pc, #516]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002db4:	e01c      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dba:	3308      	adds	r3, #8
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 fa78 	bl	80042b4 <RCCEx_PLL2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dca:	e011      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dd0:	3328      	adds	r3, #40	; 0x28
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f001 fb1f 	bl	8004418 <RCCEx_PLL3_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002de0:	e006      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002de8:	e002      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002dea:	bf00      	nop
 8002dec:	e000      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002df8:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dfc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e06:	4a6b      	ldr	r2, [pc, #428]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8002e0c:	e003      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e12:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002e30:	460b      	mov	r3, r1
 8002e32:	4313      	orrs	r3, r2
 8002e34:	d053      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e40:	d033      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e46:	d82c      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e4c:	d02f      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002e4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e52:	d826      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e58:	d02b      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002e5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e5e:	d820      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e64:	d012      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002e66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e6a:	d81a      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d022      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 fa18 	bl	80042b4 <RCCEx_PLL2_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e90:	3328      	adds	r3, #40	; 0x28
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fabf 	bl	8004418 <RCCEx_PLL3_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ec0:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ecc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ece:	4a39      	ldr	r2, [pc, #228]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002eda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002eea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ef4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4313      	orrs	r3, r2
 8002efc:	d060      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f06:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f0a:	d039      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002f0c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f10:	d832      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f16:	d035      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1c:	d82c      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d031      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d826      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f2e:	d02d      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002f30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f34:	d820      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f3a:	d012      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f40:	d81a      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d024      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f4a:	d115      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f50:	3308      	adds	r3, #8
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f001 f9ad 	bl	80042b4 <RCCEx_PLL2_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f60:	e017      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f66:	3328      	adds	r3, #40	; 0x28
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fa54 	bl	8004418 <RCCEx_PLL3_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f76:	e00c      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f7e:	e008      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f80:	bf00      	nop
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10e      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002faa:	4a02      	ldr	r2, [pc, #8]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002fb2:	bf00      	nop
 8002fb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002fd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	d037      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fea:	d00e      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff0:	d816      	bhi.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002ff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ffa:	d111      	bne.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffc:	4bc4      	ldr	r3, [pc, #784]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	4ac3      	ldr	r2, [pc, #780]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003008:	e00f      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800300a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800300e:	3308      	adds	r3, #8
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f001 f94e 	bl	80042b4 <RCCEx_PLL2_Config>
 8003018:	4603      	mov	r3, r0
 800301a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800301e:	e004      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003032:	4bb7      	ldr	r3, [pc, #732]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003036:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800303a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800303e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003040:	4ab3      	ldr	r2, [pc, #716]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003042:	430b      	orrs	r3, r1
 8003044:	6513      	str	r3, [r2, #80]	; 0x50
 8003046:	e003      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003048:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800304c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800305c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003060:	2300      	movs	r3, #0
 8003062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003066:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800306a:	460b      	mov	r3, r1
 800306c:	4313      	orrs	r3, r2
 800306e:	d039      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003070:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003076:	2b03      	cmp	r3, #3
 8003078:	d81c      	bhi.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030bd 	.word	0x080030bd
 8003084:	08003091 	.word	0x08003091
 8003088:	0800309f 	.word	0x0800309f
 800308c:	080030bd 	.word	0x080030bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003090:	4b9f      	ldr	r3, [pc, #636]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	4a9e      	ldr	r2, [pc, #632]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800309c:	e00f      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800309e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a2:	3308      	adds	r3, #8
 80030a4:	2102      	movs	r1, #2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f001 f904 	bl	80042b4 <RCCEx_PLL2_Config>
 80030ac:	4603      	mov	r3, r0
 80030ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030b2:	e004      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80030bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030c6:	4b92      	ldr	r3, [pc, #584]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	f023 0103 	bic.w	r1, r3, #3
 80030ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d4:	4a8e      	ldr	r2, [pc, #568]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030d6:	430b      	orrs	r3, r1
 80030d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030da:	e003      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80030f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f4:	2300      	movs	r3, #0
 80030f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80030fe:	460b      	mov	r3, r1
 8003100:	4313      	orrs	r3, r2
 8003102:	f000 8099 	beq.w	8003238 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003106:	4b83      	ldr	r3, [pc, #524]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a82      	ldr	r2, [pc, #520]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800310c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003110:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003112:	f7fe f95d 	bl	80013d0 <HAL_GetTick>
 8003116:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800311a:	e00b      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311c:	f7fe f958 	bl	80013d0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b64      	cmp	r3, #100	; 0x64
 800312a:	d903      	bls.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003132:	e005      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003134:	4b77      	ldr	r3, [pc, #476]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0ed      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003140:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003144:	2b00      	cmp	r3, #0
 8003146:	d173      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003148:	4b71      	ldr	r3, [pc, #452]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800314a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800314c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003150:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003154:	4053      	eors	r3, r2
 8003156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315a:	2b00      	cmp	r3, #0
 800315c:	d015      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315e:	4b6c      	ldr	r3, [pc, #432]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003166:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800316a:	4b69      	ldr	r3, [pc, #420]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316e:	4a68      	ldr	r2, [pc, #416]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003174:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003176:	4b66      	ldr	r3, [pc, #408]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317a:	4a65      	ldr	r2, [pc, #404]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800317c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003180:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003182:	4a63      	ldr	r2, [pc, #396]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800318a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800318e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003196:	d118      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7fe f91a 	bl	80013d0 <HAL_GetTick>
 800319c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a0:	e00d      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe f915 	bl	80013d0 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031ac:	1ad2      	subs	r2, r2, r3
 80031ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d903      	bls.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80031bc:	e005      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031be:	4b54      	ldr	r3, [pc, #336]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0eb      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80031ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d129      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e2:	d10e      	bne.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80031e4:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80031ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031f4:	091a      	lsrs	r2, r3, #4
 80031f6:	4b48      	ldr	r3, [pc, #288]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	4a45      	ldr	r2, [pc, #276]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6113      	str	r3, [r2, #16]
 8003200:	e005      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003202:	4b43      	ldr	r3, [pc, #268]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	4a42      	ldr	r2, [pc, #264]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003208:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800320c:	6113      	str	r3, [r2, #16]
 800320e:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003210:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003216:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	4a3c      	ldr	r2, [pc, #240]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003220:	430b      	orrs	r3, r1
 8003222:	6713      	str	r3, [r2, #112]	; 0x70
 8003224:	e008      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003226:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800322a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800322e:	e003      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003234:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003238:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f002 0301 	and.w	r3, r2, #1
 8003244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800324e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003252:	460b      	mov	r3, r1
 8003254:	4313      	orrs	r3, r2
 8003256:	f000 8090 	beq.w	800337a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800325a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003262:	2b28      	cmp	r3, #40	; 0x28
 8003264:	d870      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	08003351 	.word	0x08003351
 8003270:	08003349 	.word	0x08003349
 8003274:	08003349 	.word	0x08003349
 8003278:	08003349 	.word	0x08003349
 800327c:	08003349 	.word	0x08003349
 8003280:	08003349 	.word	0x08003349
 8003284:	08003349 	.word	0x08003349
 8003288:	08003349 	.word	0x08003349
 800328c:	0800331d 	.word	0x0800331d
 8003290:	08003349 	.word	0x08003349
 8003294:	08003349 	.word	0x08003349
 8003298:	08003349 	.word	0x08003349
 800329c:	08003349 	.word	0x08003349
 80032a0:	08003349 	.word	0x08003349
 80032a4:	08003349 	.word	0x08003349
 80032a8:	08003349 	.word	0x08003349
 80032ac:	08003333 	.word	0x08003333
 80032b0:	08003349 	.word	0x08003349
 80032b4:	08003349 	.word	0x08003349
 80032b8:	08003349 	.word	0x08003349
 80032bc:	08003349 	.word	0x08003349
 80032c0:	08003349 	.word	0x08003349
 80032c4:	08003349 	.word	0x08003349
 80032c8:	08003349 	.word	0x08003349
 80032cc:	08003351 	.word	0x08003351
 80032d0:	08003349 	.word	0x08003349
 80032d4:	08003349 	.word	0x08003349
 80032d8:	08003349 	.word	0x08003349
 80032dc:	08003349 	.word	0x08003349
 80032e0:	08003349 	.word	0x08003349
 80032e4:	08003349 	.word	0x08003349
 80032e8:	08003349 	.word	0x08003349
 80032ec:	08003351 	.word	0x08003351
 80032f0:	08003349 	.word	0x08003349
 80032f4:	08003349 	.word	0x08003349
 80032f8:	08003349 	.word	0x08003349
 80032fc:	08003349 	.word	0x08003349
 8003300:	08003349 	.word	0x08003349
 8003304:	08003349 	.word	0x08003349
 8003308:	08003349 	.word	0x08003349
 800330c:	08003351 	.word	0x08003351
 8003310:	58024400 	.word	0x58024400
 8003314:	58024800 	.word	0x58024800
 8003318:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800331c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003320:	3308      	adds	r3, #8
 8003322:	2101      	movs	r1, #1
 8003324:	4618      	mov	r0, r3
 8003326:	f000 ffc5 	bl	80042b4 <RCCEx_PLL2_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003330:	e00f      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003336:	3328      	adds	r3, #40	; 0x28
 8003338:	2101      	movs	r1, #1
 800333a:	4618      	mov	r0, r3
 800333c:	f001 f86c 	bl	8004418 <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003346:	e004      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003352:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800335a:	4bc0      	ldr	r3, [pc, #768]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003362:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336a:	4abc      	ldr	r2, [pc, #752]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800336c:	430b      	orrs	r3, r1
 800336e:	6553      	str	r3, [r2, #84]	; 0x54
 8003370:	e003      	b.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003372:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003376:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f002 0302 	and.w	r3, r2, #2
 8003386:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800338a:	2300      	movs	r3, #0
 800338c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003390:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003394:	460b      	mov	r3, r1
 8003396:	4313      	orrs	r3, r2
 8003398:	d043      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800339a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d824      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033f9 	.word	0x080033f9
 80033b0:	080033c5 	.word	0x080033c5
 80033b4:	080033db 	.word	0x080033db
 80033b8:	080033f9 	.word	0x080033f9
 80033bc:	080033f9 	.word	0x080033f9
 80033c0:	080033f9 	.word	0x080033f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033c8:	3308      	adds	r3, #8
 80033ca:	2101      	movs	r1, #1
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 ff71 	bl	80042b4 <RCCEx_PLL2_Config>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033d8:	e00f      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033de:	3328      	adds	r3, #40	; 0x28
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f818 	bl	8004418 <RCCEx_PLL3_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033ee:	e004      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80033f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003402:	4b96      	ldr	r3, [pc, #600]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f023 0107 	bic.w	r1, r3, #7
 800340a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800340e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003412:	4a92      	ldr	r2, [pc, #584]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003414:	430b      	orrs	r3, r1
 8003416:	6553      	str	r3, [r2, #84]	; 0x54
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800341e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f002 0304 	and.w	r3, r2, #4
 800342e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003438:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800343c:	460b      	mov	r3, r1
 800343e:	4313      	orrs	r3, r2
 8003440:	d043      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344a:	2b05      	cmp	r3, #5
 800344c:	d824      	bhi.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	080034a1 	.word	0x080034a1
 8003458:	0800346d 	.word	0x0800346d
 800345c:	08003483 	.word	0x08003483
 8003460:	080034a1 	.word	0x080034a1
 8003464:	080034a1 	.word	0x080034a1
 8003468:	080034a1 	.word	0x080034a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800346c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003470:	3308      	adds	r3, #8
 8003472:	2101      	movs	r1, #1
 8003474:	4618      	mov	r0, r3
 8003476:	f000 ff1d 	bl	80042b4 <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003480:	e00f      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003486:	3328      	adds	r3, #40	; 0x28
 8003488:	2101      	movs	r1, #1
 800348a:	4618      	mov	r0, r3
 800348c:	f000 ffc4 	bl	8004418 <RCCEx_PLL3_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003496:	e004      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800349e:	e000      	b.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80034a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10b      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034aa:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	f023 0107 	bic.w	r1, r3, #7
 80034b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034ba:	4a68      	ldr	r2, [pc, #416]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80034bc:	430b      	orrs	r3, r1
 80034be:	6593      	str	r3, [r2, #88]	; 0x58
 80034c0:	e003      	b.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034c6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d2:	f002 0320 	and.w	r3, r2, #32
 80034d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034da:	2300      	movs	r3, #0
 80034dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d055      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80034ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034f6:	d033      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80034f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034fc:	d82c      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80034fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003502:	d02f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d826      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800350a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800350e:	d02b      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003510:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003514:	d820      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003516:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351a:	d012      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800351c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003520:	d81a      	bhi.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003522:	2b00      	cmp	r3, #0
 8003524:	d022      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8003526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800352a:	d115      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800352c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003530:	3308      	adds	r3, #8
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f000 febd 	bl	80042b4 <RCCEx_PLL2_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003540:	e015      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003546:	3328      	adds	r3, #40	; 0x28
 8003548:	2102      	movs	r1, #2
 800354a:	4618      	mov	r0, r3
 800354c:	f000 ff64 	bl	8004418 <RCCEx_PLL3_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003556:	e00a      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800355e:	e006      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003560:	bf00      	nop
 8003562:	e004      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003564:	bf00      	nop
 8003566:	e002      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003568:	bf00      	nop
 800356a:	e000      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800356c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003576:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800357e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003586:	4a35      	ldr	r2, [pc, #212]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003588:	430b      	orrs	r3, r1
 800358a:	6553      	str	r3, [r2, #84]	; 0x54
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003592:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80035a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035a6:	2300      	movs	r3, #0
 80035a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80035ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4313      	orrs	r3, r2
 80035b4:	d058      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035c2:	d033      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80035c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035c8:	d82c      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ce:	d02f      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d4:	d826      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035da:	d02b      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80035dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e0:	d820      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e6:	d012      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80035e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ec:	d81a      	bhi.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d022      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f6:	d115      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	3308      	adds	r3, #8
 80035fe:	2100      	movs	r1, #0
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fe57 	bl	80042b4 <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800360c:	e015      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800360e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003612:	3328      	adds	r3, #40	; 0x28
 8003614:	2102      	movs	r1, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fefe 	bl	8004418 <RCCEx_PLL3_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003622:	e00a      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800362a:	e006      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800362c:	bf00      	nop
 800362e:	e004      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003630:	bf00      	nop
 8003632:	e002      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003634:	bf00      	nop
 8003636:	e000      	b.n	800363a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003638:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10e      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003646:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800364a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800364e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003652:	4a02      	ldr	r2, [pc, #8]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6593      	str	r3, [r2, #88]	; 0x58
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003664:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003668:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800367e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d055      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003690:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003694:	d033      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003696:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800369a:	d82c      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a0:	d02f      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80036a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a6:	d826      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80036a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036ac:	d02b      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80036ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036b2:	d820      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80036b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b8:	d012      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80036ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036be:	d81a      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d022      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80036c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036c8:	d115      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036ce:	3308      	adds	r3, #8
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fdee 	bl	80042b4 <RCCEx_PLL2_Config>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036de:	e015      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e4:	3328      	adds	r3, #40	; 0x28
 80036e6:	2102      	movs	r1, #2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fe95 	bl	8004418 <RCCEx_PLL3_Config>
 80036ee:	4603      	mov	r3, r0
 80036f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036f4:	e00a      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036fc:	e006      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80036fe:	bf00      	nop
 8003700:	e004      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003702:	bf00      	nop
 8003704:	e002      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003706:	bf00      	nop
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800370a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003714:	4ba1      	ldr	r3, [pc, #644]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800371c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003720:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003724:	4a9d      	ldr	r2, [pc, #628]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003726:	430b      	orrs	r3, r1
 8003728:	6593      	str	r3, [r2, #88]	; 0x58
 800372a:	e003      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003730:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003734:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f002 0308 	and.w	r3, r2, #8
 8003740:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800374a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d01e      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003766:	3328      	adds	r3, #40	; 0x28
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fe54 	bl	8004418 <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800377c:	4b87      	ldr	r3, [pc, #540]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800377e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003780:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800378c:	4a83      	ldr	r2, [pc, #524]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800378e:	430b      	orrs	r3, r1
 8003790:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003792:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f002 0310 	and.w	r3, r2, #16
 800379e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037a2:	2300      	movs	r3, #0
 80037a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80037ac:	460b      	mov	r3, r1
 80037ae:	4313      	orrs	r3, r2
 80037b0:	d01e      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037be:	d10c      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c4:	3328      	adds	r3, #40	; 0x28
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 fe25 	bl	8004418 <RCCEx_PLL3_Config>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037da:	4b70      	ldr	r3, [pc, #448]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037ea:	4a6c      	ldr	r2, [pc, #432]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80037fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003800:	2300      	movs	r3, #0
 8003802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003806:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800380a:	460b      	mov	r3, r1
 800380c:	4313      	orrs	r3, r2
 800380e:	d03e      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003814:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800381c:	d022      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800381e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003822:	d81b      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d00b      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800382e:	e015      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003834:	3308      	adds	r3, #8
 8003836:	2100      	movs	r1, #0
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fd3b 	bl	80042b4 <RCCEx_PLL2_Config>
 800383e:	4603      	mov	r3, r0
 8003840:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003844:	e00f      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003846:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384a:	3328      	adds	r3, #40	; 0x28
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fde2 	bl	8004418 <RCCEx_PLL3_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800385a:	e004      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003866:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800386e:	4b4b      	ldr	r3, [pc, #300]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800387e:	4a47      	ldr	r2, [pc, #284]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003880:	430b      	orrs	r3, r1
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800388a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800388e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800389a:	67bb      	str	r3, [r7, #120]	; 0x78
 800389c:	2300      	movs	r3, #0
 800389e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80038a4:	460b      	mov	r3, r1
 80038a6:	4313      	orrs	r3, r2
 80038a8:	d03b      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038b6:	d01f      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80038b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038bc:	d818      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d003      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80038c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c8:	d007      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80038ca:	e011      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	4a32      	ldr	r2, [pc, #200]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80038d8:	e00f      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038de:	3328      	adds	r3, #40	; 0x28
 80038e0:	2101      	movs	r1, #1
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fd98 	bl	8004418 <RCCEx_PLL3_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80038ee:	e004      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038f6:	e000      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80038f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003902:	4b26      	ldr	r3, [pc, #152]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800390a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	4a22      	ldr	r2, [pc, #136]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003914:	430b      	orrs	r3, r1
 8003916:	6553      	str	r3, [r2, #84]	; 0x54
 8003918:	e003      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800391e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003922:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800392e:	673b      	str	r3, [r7, #112]	; 0x70
 8003930:	2300      	movs	r3, #0
 8003932:	677b      	str	r3, [r7, #116]	; 0x74
 8003934:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003938:	460b      	mov	r3, r1
 800393a:	4313      	orrs	r3, r2
 800393c:	d034      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800393e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	d007      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	4a11      	ldr	r2, [pc, #68]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800395c:	e00e      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800395e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003962:	3308      	adds	r3, #8
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fca4 	bl	80042b4 <RCCEx_PLL2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800397a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10d      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003984:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003992:	4a02      	ldr	r2, [pc, #8]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003994:	430b      	orrs	r3, r1
 8003996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003998:	e006      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800399a:	bf00      	nop
 800399c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80039b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b6:	2300      	movs	r3, #0
 80039b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d00c      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c8:	3328      	adds	r3, #40	; 0x28
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fd23 	bl	8004418 <RCCEx_PLL3_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80039de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80039ea:	663b      	str	r3, [r7, #96]	; 0x60
 80039ec:	2300      	movs	r3, #0
 80039ee:	667b      	str	r3, [r7, #100]	; 0x64
 80039f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80039f4:	460b      	mov	r3, r1
 80039f6:	4313      	orrs	r3, r2
 80039f8:	d038      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80039fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a06:	d018      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0c:	d811      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a12:	d014      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a18:	d80b      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d011      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d106      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a24:	4bc3      	ldr	r3, [pc, #780]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	4ac2      	ldr	r2, [pc, #776]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a30:	e008      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a38:	e004      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e002      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e000      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a4c:	4bb9      	ldr	r3, [pc, #740]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	4ab5      	ldr	r2, [pc, #724]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	6553      	str	r3, [r2, #84]	; 0x54
 8003a62:	e003      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a78:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003a82:	460b      	mov	r3, r1
 8003a84:	4313      	orrs	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a88:	4baa      	ldr	r3, [pc, #680]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a96:	4aa7      	ldr	r2, [pc, #668]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8003aaa:	2300      	movs	r3, #0
 8003aac:	657b      	str	r3, [r7, #84]	; 0x54
 8003aae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	d009      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab8:	4b9e      	ldr	r3, [pc, #632]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac6:	4a9b      	ldr	r2, [pc, #620]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ada:	2300      	movs	r3, #0
 8003adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ade:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d009      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003ae8:	4b92      	ldr	r3, [pc, #584]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aec:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af6:	4a8f      	ldr	r2, [pc, #572]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003af8:	430b      	orrs	r3, r1
 8003afa:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003afc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003b08:	643b      	str	r3, [r7, #64]	; 0x40
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003b12:	460b      	mov	r3, r1
 8003b14:	4313      	orrs	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b18:	4b86      	ldr	r3, [pc, #536]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4a85      	ldr	r2, [pc, #532]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b22:	6113      	str	r3, [r2, #16]
 8003b24:	4b83      	ldr	r3, [pc, #524]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b26:	6919      	ldr	r1, [r3, #16]
 8003b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b30:	4a80      	ldr	r2, [pc, #512]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b44:	2300      	movs	r3, #0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b52:	4b78      	ldr	r3, [pc, #480]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b60:	4a74      	ldr	r2, [pc, #464]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b62:	430b      	orrs	r3, r1
 8003b64:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b72:	633b      	str	r3, [r7, #48]	; 0x30
 8003b74:	2300      	movs	r3, #0
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
 8003b78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b82:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b92:	4a68      	ldr	r2, [pc, #416]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003baa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	d011      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bb8:	3308      	adds	r3, #8
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fb79 	bl	80042b4 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be0:	2100      	movs	r1, #0
 8003be2:	6239      	str	r1, [r7, #32]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	d011      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fb59 	bl	80042b4 <RCCEx_PLL2_Config>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	2100      	movs	r1, #0
 8003c22:	61b9      	str	r1, [r7, #24]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	61fb      	str	r3, [r7, #28]
 8003c2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4313      	orrs	r3, r2
 8003c32:	d011      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c38:	3308      	adds	r3, #8
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fb39 	bl	80042b4 <RCCEx_PLL2_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c54:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	2100      	movs	r1, #0
 8003c62:	6139      	str	r1, [r7, #16]
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d011      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c78:	3328      	adds	r3, #40	; 0x28
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fbcb 	bl	8004418 <RCCEx_PLL3_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003c88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c94:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	d011      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb8:	3328      	adds	r3, #40	; 0x28
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fbab 	bl	8004418 <RCCEx_PLL3_Config>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003cc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003cd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	6039      	str	r1, [r7, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d011      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf8:	3328      	adds	r3, #40	; 0x28
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fb8b 	bl	8004418 <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003d08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d14:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003d18:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e000      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d32:	bf00      	nop
 8003d34:	58024400 	.word	0x58024400

08003d38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003d3c:	f7fe fde2 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	091b      	lsrs	r3, r3, #4
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4904      	ldr	r1, [pc, #16]	; (8003d60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	0800918c 	.word	0x0800918c

08003d64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b089      	sub	sp, #36	; 0x24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d6c:	4ba1      	ldr	r3, [pc, #644]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003d76:	4b9f      	ldr	r3, [pc, #636]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	0b1b      	lsrs	r3, r3, #12
 8003d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d82:	4b9c      	ldr	r3, [pc, #624]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003d8e:	4b99      	ldr	r3, [pc, #612]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 8111 	beq.w	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	f000 8083 	beq.w	8003ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	f200 80a1 	bhi.w	8003f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d056      	beq.n	8003e7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003dce:	e099      	b.n	8003f04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd0:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0320 	and.w	r3, r3, #32
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02d      	beq.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ddc:	4b85      	ldr	r3, [pc, #532]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	08db      	lsrs	r3, r3, #3
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	4a84      	ldr	r2, [pc, #528]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	ee07 3a90 	vmov	s15, r3
 8003df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e06:	4b7b      	ldr	r3, [pc, #492]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e36:	e087      	b.n	8003f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7a:	e065      	b.n	8003f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	ee07 3a90 	vmov	s15, r3
 8003e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8e:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ebe:	e043      	b.n	8003f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed2:	4b48      	ldr	r3, [pc, #288]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eda:	ee07 3a90 	vmov	s15, r3
 8003ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f02:	e021      	b.n	8003f48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f16:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	0a5b      	lsrs	r3, r3, #9
 8003f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f6e:	ee17 2a90 	vmov	r2, s15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003f76:	4b1f      	ldr	r3, [pc, #124]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	0c1b      	lsrs	r3, r3, #16
 8003f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f80:	ee07 3a90 	vmov	s15, r3
 8003f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f90:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9c:	ee17 2a90 	vmov	r2, s15
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	0e1b      	lsrs	r3, r3, #24
 8003faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fca:	ee17 2a90 	vmov	r2, s15
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
}
 8003fe6:	bf00      	nop
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	03d09000 	.word	0x03d09000
 8003ffc:	46000000 	.word	0x46000000
 8004000:	4c742400 	.word	0x4c742400
 8004004:	4a742400 	.word	0x4a742400
 8004008:	4af42400 	.word	0x4af42400

0800400c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004014:	4ba1      	ldr	r3, [pc, #644]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800401e:	4b9f      	ldr	r3, [pc, #636]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	0d1b      	lsrs	r3, r3, #20
 8004024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004028:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800402a:	4b9c      	ldr	r3, [pc, #624]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800402c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004036:	4b99      	ldr	r3, [pc, #612]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	08db      	lsrs	r3, r3, #3
 800403c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	ee07 3a90 	vmov	s15, r3
 800404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 8111 	beq.w	800427c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	2b02      	cmp	r3, #2
 800405e:	f000 8083 	beq.w	8004168 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b02      	cmp	r3, #2
 8004066:	f200 80a1 	bhi.w	80041ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d003      	beq.n	8004078 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d056      	beq.n	8004124 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004076:	e099      	b.n	80041ac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004078:	4b88      	ldr	r3, [pc, #544]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d02d      	beq.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004084:	4b85      	ldr	r3, [pc, #532]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	08db      	lsrs	r3, r3, #3
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	4a84      	ldr	r2, [pc, #528]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
 8004094:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ae:	4b7b      	ldr	r3, [pc, #492]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040be:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040da:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040de:	e087      	b.n	80041f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	ee07 3a90 	vmov	s15, r3
 80040e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80040ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f2:	4b6a      	ldr	r3, [pc, #424]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004102:	ed97 6a03 	vldr	s12, [r7, #12]
 8004106:	eddf 5a67 	vldr	s11, [pc, #412]	; 80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800410a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800410e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004122:	e065      	b.n	80041f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800412e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004136:	4b59      	ldr	r3, [pc, #356]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004146:	ed97 6a03 	vldr	s12, [r7, #12]
 800414a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800414e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800415e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004166:	e043      	b.n	80041f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417a:	4b48      	ldr	r3, [pc, #288]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004182:	ee07 3a90 	vmov	s15, r3
 8004186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418a:	ed97 6a03 	vldr	s12, [r7, #12]
 800418e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041aa:	e021      	b.n	80041f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041be:	4b37      	ldr	r3, [pc, #220]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80041d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80041f0:	4b2a      	ldr	r3, [pc, #168]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	0a5b      	lsrs	r3, r3, #9
 80041f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800420a:	edd7 6a07 	vldr	s13, [r7, #28]
 800420e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004216:	ee17 2a90 	vmov	r2, s15
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800421e:	4b1f      	ldr	r3, [pc, #124]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	0c1b      	lsrs	r3, r3, #16
 8004224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004228:	ee07 3a90 	vmov	s15, r3
 800422c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004230:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004234:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004238:	edd7 6a07 	vldr	s13, [r7, #28]
 800423c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004240:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004244:	ee17 2a90 	vmov	r2, s15
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800424c:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	0e1b      	lsrs	r3, r3, #24
 8004252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004262:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004266:	edd7 6a07 	vldr	s13, [r7, #28]
 800426a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800426e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004272:	ee17 2a90 	vmov	r2, s15
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800427a:	e008      	b.n	800428e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
}
 800428e:	bf00      	nop
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	58024400 	.word	0x58024400
 80042a0:	03d09000 	.word	0x03d09000
 80042a4:	46000000 	.word	0x46000000
 80042a8:	4c742400 	.word	0x4c742400
 80042ac:	4a742400 	.word	0x4a742400
 80042b0:	4af42400 	.word	0x4af42400

080042b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042c2:	4b53      	ldr	r3, [pc, #332]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d101      	bne.n	80042d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e099      	b.n	8004406 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042d2:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a4e      	ldr	r2, [pc, #312]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80042d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042de:	f7fd f877 	bl	80013d0 <HAL_GetTick>
 80042e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042e4:	e008      	b.n	80042f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042e6:	f7fd f873 	bl	80013d0 <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d901      	bls.n	80042f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e086      	b.n	8004406 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042f8:	4b45      	ldr	r3, [pc, #276]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f0      	bne.n	80042e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004304:	4b42      	ldr	r3, [pc, #264]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	031b      	lsls	r3, r3, #12
 8004312:	493f      	ldr	r1, [pc, #252]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	628b      	str	r3, [r1, #40]	; 0x28
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	3b01      	subs	r3, #1
 800431e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	3b01      	subs	r3, #1
 8004328:	025b      	lsls	r3, r3, #9
 800432a:	b29b      	uxth	r3, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	3b01      	subs	r3, #1
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	3b01      	subs	r3, #1
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004348:	4931      	ldr	r1, [pc, #196]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 800434a:	4313      	orrs	r3, r2
 800434c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800434e:	4b30      	ldr	r3, [pc, #192]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	492d      	ldr	r1, [pc, #180]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004360:	4b2b      	ldr	r3, [pc, #172]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	f023 0220 	bic.w	r2, r3, #32
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	4928      	ldr	r1, [pc, #160]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 800436e:	4313      	orrs	r3, r2
 8004370:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	4a26      	ldr	r2, [pc, #152]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <RCCEx_PLL2_Config+0x160>)
 8004384:	4013      	ands	r3, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	69d2      	ldr	r2, [r2, #28]
 800438a:	00d2      	lsls	r2, r2, #3
 800438c:	4920      	ldr	r1, [pc, #128]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 800438e:	4313      	orrs	r3, r2
 8004390:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004392:	4b1f      	ldr	r3, [pc, #124]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	4a1e      	ldr	r2, [pc, #120]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 8004398:	f043 0310 	orr.w	r3, r3, #16
 800439c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	4a19      	ldr	r2, [pc, #100]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043b0:	e00f      	b.n	80043d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d106      	bne.n	80043c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4a14      	ldr	r2, [pc, #80]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043c4:	e005      	b.n	80043d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ca:	4a11      	ldr	r2, [pc, #68]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043de:	f7fc fff7 	bl	80013d0 <HAL_GetTick>
 80043e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043e4:	e008      	b.n	80043f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043e6:	f7fc fff3 	bl	80013d0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e006      	b.n	8004406 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <RCCEx_PLL2_Config+0x15c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	58024400 	.word	0x58024400
 8004414:	ffff0007 	.word	0xffff0007

08004418 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004426:	4b53      	ldr	r3, [pc, #332]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b03      	cmp	r3, #3
 8004430:	d101      	bne.n	8004436 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e099      	b.n	800456a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004436:	4b4f      	ldr	r3, [pc, #316]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a4e      	ldr	r2, [pc, #312]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800443c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004442:	f7fc ffc5 	bl	80013d0 <HAL_GetTick>
 8004446:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004448:	e008      	b.n	800445c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800444a:	f7fc ffc1 	bl	80013d0 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e086      	b.n	800456a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800445c:	4b45      	ldr	r3, [pc, #276]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004468:	4b42      	ldr	r3, [pc, #264]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	051b      	lsls	r3, r3, #20
 8004476:	493f      	ldr	r1, [pc, #252]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	628b      	str	r3, [r1, #40]	; 0x28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	3b01      	subs	r3, #1
 8004482:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	3b01      	subs	r3, #1
 800448c:	025b      	lsls	r3, r3, #9
 800448e:	b29b      	uxth	r3, r3
 8004490:	431a      	orrs	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	3b01      	subs	r3, #1
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	061b      	lsls	r3, r3, #24
 80044a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044ac:	4931      	ldr	r1, [pc, #196]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044b2:	4b30      	ldr	r3, [pc, #192]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	492d      	ldr	r1, [pc, #180]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	4928      	ldr	r1, [pc, #160]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044d6:	4b27      	ldr	r3, [pc, #156]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	4a26      	ldr	r2, [pc, #152]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044e2:	4b24      	ldr	r3, [pc, #144]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <RCCEx_PLL3_Config+0x160>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	69d2      	ldr	r2, [r2, #28]
 80044ee:	00d2      	lsls	r2, r2, #3
 80044f0:	4920      	ldr	r1, [pc, #128]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044f6:	4b1f      	ldr	r3, [pc, #124]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	4a1e      	ldr	r2, [pc, #120]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004508:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800450a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450c:	4a19      	ldr	r2, [pc, #100]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800450e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004512:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004514:	e00f      	b.n	8004536 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d106      	bne.n	800452a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800451c:	4b15      	ldr	r3, [pc, #84]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	4a14      	ldr	r2, [pc, #80]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 8004522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004528:	e005      	b.n	8004536 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800452a:	4b12      	ldr	r3, [pc, #72]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	4a11      	ldr	r2, [pc, #68]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 8004530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004534:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004536:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a0e      	ldr	r2, [pc, #56]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800453c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004542:	f7fc ff45 	bl	80013d0 <HAL_GetTick>
 8004546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004548:	e008      	b.n	800455c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800454a:	f7fc ff41 	bl	80013d0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e006      	b.n	800456a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <RCCEx_PLL3_Config+0x15c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	58024400 	.word	0x58024400
 8004578:	ffff0007 	.word	0xffff0007

0800457c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e042      	b.n	8004614 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7fc fc43 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2224      	movs	r2, #36	; 0x24
 80045aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f912 	bl	80047e8 <UART_SetConfig>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e022      	b.n	8004614 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 ff72 	bl	80054c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fff9 	bl	8005604 <UART_CheckIdleState>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e04a      	b.n	80046c4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fc fbf3 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2224      	movs	r2, #36	; 0x24
 800464a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8c2 	bl	80047e8 <UART_SetConfig>
 8004664:	4603      	mov	r3, r0
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e02a      	b.n	80046c4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 ff22 	bl	80054c0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800468a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800469a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f042 0208 	orr.w	r2, r2, #8
 80046aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 ffa1 	bl	8005604 <UART_CheckIdleState>
 80046c2:	4603      	mov	r3, r0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d17b      	bne.n	80047de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_UART_Transmit+0x26>
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e074      	b.n	80047e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2221      	movs	r2, #33	; 0x21
 8004702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004706:	f7fc fe63 	bl	80013d0 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	88fa      	ldrh	r2, [r7, #6]
 8004710:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	88fa      	ldrh	r2, [r7, #6]
 8004718:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004724:	d108      	bne.n	8004738 <HAL_UART_Transmit+0x6c>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e003      	b.n	8004740 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004740:	e030      	b.n	80047a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2180      	movs	r1, #128	; 0x80
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f001 f803 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e03d      	b.n	80047e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004778:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	3302      	adds	r3, #2
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e007      	b.n	8004792 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	3301      	adds	r3, #1
 8004790:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1c8      	bne.n	8004742 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	2200      	movs	r2, #0
 80047b8:	2140      	movs	r1, #64	; 0x40
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 ffcc 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d005      	beq.n	80047d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e006      	b.n	80047e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3720      	adds	r7, #32
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b092      	sub	sp, #72	; 0x48
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	431a      	orrs	r2, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	431a      	orrs	r2, r3
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	69db      	ldr	r3, [r3, #28]
 800480c:	4313      	orrs	r3, r2
 800480e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4bbe      	ldr	r3, [pc, #760]	; (8004b10 <UART_SetConfig+0x328>)
 8004818:	4013      	ands	r3, r2
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004820:	430b      	orrs	r3, r1
 8004822:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4ab3      	ldr	r2, [pc, #716]	; (8004b14 <UART_SetConfig+0x32c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004850:	4313      	orrs	r3, r2
 8004852:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689a      	ldr	r2, [r3, #8]
 800485a:	4baf      	ldr	r3, [pc, #700]	; (8004b18 <UART_SetConfig+0x330>)
 800485c:	4013      	ands	r3, r2
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004864:	430b      	orrs	r3, r1
 8004866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	f023 010f 	bic.w	r1, r3, #15
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4aa6      	ldr	r2, [pc, #664]	; (8004b1c <UART_SetConfig+0x334>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d177      	bne.n	8004978 <UART_SetConfig+0x190>
 8004888:	4ba5      	ldr	r3, [pc, #660]	; (8004b20 <UART_SetConfig+0x338>)
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004890:	2b28      	cmp	r3, #40	; 0x28
 8004892:	d86d      	bhi.n	8004970 <UART_SetConfig+0x188>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0xb4>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	08004941 	.word	0x08004941
 80048a0:	08004971 	.word	0x08004971
 80048a4:	08004971 	.word	0x08004971
 80048a8:	08004971 	.word	0x08004971
 80048ac:	08004971 	.word	0x08004971
 80048b0:	08004971 	.word	0x08004971
 80048b4:	08004971 	.word	0x08004971
 80048b8:	08004971 	.word	0x08004971
 80048bc:	08004949 	.word	0x08004949
 80048c0:	08004971 	.word	0x08004971
 80048c4:	08004971 	.word	0x08004971
 80048c8:	08004971 	.word	0x08004971
 80048cc:	08004971 	.word	0x08004971
 80048d0:	08004971 	.word	0x08004971
 80048d4:	08004971 	.word	0x08004971
 80048d8:	08004971 	.word	0x08004971
 80048dc:	08004951 	.word	0x08004951
 80048e0:	08004971 	.word	0x08004971
 80048e4:	08004971 	.word	0x08004971
 80048e8:	08004971 	.word	0x08004971
 80048ec:	08004971 	.word	0x08004971
 80048f0:	08004971 	.word	0x08004971
 80048f4:	08004971 	.word	0x08004971
 80048f8:	08004971 	.word	0x08004971
 80048fc:	08004959 	.word	0x08004959
 8004900:	08004971 	.word	0x08004971
 8004904:	08004971 	.word	0x08004971
 8004908:	08004971 	.word	0x08004971
 800490c:	08004971 	.word	0x08004971
 8004910:	08004971 	.word	0x08004971
 8004914:	08004971 	.word	0x08004971
 8004918:	08004971 	.word	0x08004971
 800491c:	08004961 	.word	0x08004961
 8004920:	08004971 	.word	0x08004971
 8004924:	08004971 	.word	0x08004971
 8004928:	08004971 	.word	0x08004971
 800492c:	08004971 	.word	0x08004971
 8004930:	08004971 	.word	0x08004971
 8004934:	08004971 	.word	0x08004971
 8004938:	08004971 	.word	0x08004971
 800493c:	08004969 	.word	0x08004969
 8004940:	2301      	movs	r3, #1
 8004942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004946:	e326      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004948:	2304      	movs	r3, #4
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494e:	e322      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004950:	2308      	movs	r3, #8
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004956:	e31e      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004958:	2310      	movs	r3, #16
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495e:	e31a      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004960:	2320      	movs	r3, #32
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004966:	e316      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004968:	2340      	movs	r3, #64	; 0x40
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496e:	e312      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004976:	e30e      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a69      	ldr	r2, [pc, #420]	; (8004b24 <UART_SetConfig+0x33c>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d130      	bne.n	80049e4 <UART_SetConfig+0x1fc>
 8004982:	4b67      	ldr	r3, [pc, #412]	; (8004b20 <UART_SetConfig+0x338>)
 8004984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b05      	cmp	r3, #5
 800498c:	d826      	bhi.n	80049dc <UART_SetConfig+0x1f4>
 800498e:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <UART_SetConfig+0x1ac>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049ad 	.word	0x080049ad
 8004998:	080049b5 	.word	0x080049b5
 800499c:	080049bd 	.word	0x080049bd
 80049a0:	080049c5 	.word	0x080049c5
 80049a4:	080049cd 	.word	0x080049cd
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	2300      	movs	r3, #0
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b2:	e2f0      	b.n	8004f96 <UART_SetConfig+0x7ae>
 80049b4:	2304      	movs	r3, #4
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ba:	e2ec      	b.n	8004f96 <UART_SetConfig+0x7ae>
 80049bc:	2308      	movs	r3, #8
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c2:	e2e8      	b.n	8004f96 <UART_SetConfig+0x7ae>
 80049c4:	2310      	movs	r3, #16
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ca:	e2e4      	b.n	8004f96 <UART_SetConfig+0x7ae>
 80049cc:	2320      	movs	r3, #32
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d2:	e2e0      	b.n	8004f96 <UART_SetConfig+0x7ae>
 80049d4:	2340      	movs	r3, #64	; 0x40
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049da:	e2dc      	b.n	8004f96 <UART_SetConfig+0x7ae>
 80049dc:	2380      	movs	r3, #128	; 0x80
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e2:	e2d8      	b.n	8004f96 <UART_SetConfig+0x7ae>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a4f      	ldr	r2, [pc, #316]	; (8004b28 <UART_SetConfig+0x340>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d130      	bne.n	8004a50 <UART_SetConfig+0x268>
 80049ee:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <UART_SetConfig+0x338>)
 80049f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d826      	bhi.n	8004a48 <UART_SetConfig+0x260>
 80049fa:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <UART_SetConfig+0x218>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a19 	.word	0x08004a19
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	08004a29 	.word	0x08004a29
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e2ba      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e2b6      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e2b2      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a36:	e2ae      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a38:	2320      	movs	r3, #32
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3e:	e2aa      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a40:	2340      	movs	r3, #64	; 0x40
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a46:	e2a6      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a48:	2380      	movs	r3, #128	; 0x80
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4e:	e2a2      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a35      	ldr	r2, [pc, #212]	; (8004b2c <UART_SetConfig+0x344>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d130      	bne.n	8004abc <UART_SetConfig+0x2d4>
 8004a5a:	4b31      	ldr	r3, [pc, #196]	; (8004b20 <UART_SetConfig+0x338>)
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d826      	bhi.n	8004ab4 <UART_SetConfig+0x2cc>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <UART_SetConfig+0x284>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a85 	.word	0x08004a85
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	08004a95 	.word	0x08004a95
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e284      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e280      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a94:	2308      	movs	r3, #8
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e27c      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e278      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e274      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004aac:	2340      	movs	r3, #64	; 0x40
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab2:	e270      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aba:	e26c      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1b      	ldr	r2, [pc, #108]	; (8004b30 <UART_SetConfig+0x348>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d142      	bne.n	8004b4c <UART_SetConfig+0x364>
 8004ac6:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <UART_SetConfig+0x338>)
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d838      	bhi.n	8004b44 <UART_SetConfig+0x35c>
 8004ad2:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0x2f0>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004af1 	.word	0x08004af1
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004b01 	.word	0x08004b01
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b35 	.word	0x08004b35
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004af6:	e24e      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004af8:	2304      	movs	r3, #4
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afe:	e24a      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004b00:	2308      	movs	r3, #8
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b06:	e246      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0e:	e242      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004b10:	cfff69f3 	.word	0xcfff69f3
 8004b14:	58000c00 	.word	0x58000c00
 8004b18:	11fff4ff 	.word	0x11fff4ff
 8004b1c:	40011000 	.word	0x40011000
 8004b20:	58024400 	.word	0x58024400
 8004b24:	40004400 	.word	0x40004400
 8004b28:	40004800 	.word	0x40004800
 8004b2c:	40004c00 	.word	0x40004c00
 8004b30:	40005000 	.word	0x40005000
 8004b34:	2320      	movs	r3, #32
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3a:	e22c      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004b3c:	2340      	movs	r3, #64	; 0x40
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b42:	e228      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4a:	e224      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4ab1      	ldr	r2, [pc, #708]	; (8004e18 <UART_SetConfig+0x630>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d176      	bne.n	8004c44 <UART_SetConfig+0x45c>
 8004b56:	4bb1      	ldr	r3, [pc, #708]	; (8004e1c <UART_SetConfig+0x634>)
 8004b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5e:	2b28      	cmp	r3, #40	; 0x28
 8004b60:	d86c      	bhi.n	8004c3c <UART_SetConfig+0x454>
 8004b62:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <UART_SetConfig+0x380>)
 8004b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b68:	08004c0d 	.word	0x08004c0d
 8004b6c:	08004c3d 	.word	0x08004c3d
 8004b70:	08004c3d 	.word	0x08004c3d
 8004b74:	08004c3d 	.word	0x08004c3d
 8004b78:	08004c3d 	.word	0x08004c3d
 8004b7c:	08004c3d 	.word	0x08004c3d
 8004b80:	08004c3d 	.word	0x08004c3d
 8004b84:	08004c3d 	.word	0x08004c3d
 8004b88:	08004c15 	.word	0x08004c15
 8004b8c:	08004c3d 	.word	0x08004c3d
 8004b90:	08004c3d 	.word	0x08004c3d
 8004b94:	08004c3d 	.word	0x08004c3d
 8004b98:	08004c3d 	.word	0x08004c3d
 8004b9c:	08004c3d 	.word	0x08004c3d
 8004ba0:	08004c3d 	.word	0x08004c3d
 8004ba4:	08004c3d 	.word	0x08004c3d
 8004ba8:	08004c1d 	.word	0x08004c1d
 8004bac:	08004c3d 	.word	0x08004c3d
 8004bb0:	08004c3d 	.word	0x08004c3d
 8004bb4:	08004c3d 	.word	0x08004c3d
 8004bb8:	08004c3d 	.word	0x08004c3d
 8004bbc:	08004c3d 	.word	0x08004c3d
 8004bc0:	08004c3d 	.word	0x08004c3d
 8004bc4:	08004c3d 	.word	0x08004c3d
 8004bc8:	08004c25 	.word	0x08004c25
 8004bcc:	08004c3d 	.word	0x08004c3d
 8004bd0:	08004c3d 	.word	0x08004c3d
 8004bd4:	08004c3d 	.word	0x08004c3d
 8004bd8:	08004c3d 	.word	0x08004c3d
 8004bdc:	08004c3d 	.word	0x08004c3d
 8004be0:	08004c3d 	.word	0x08004c3d
 8004be4:	08004c3d 	.word	0x08004c3d
 8004be8:	08004c2d 	.word	0x08004c2d
 8004bec:	08004c3d 	.word	0x08004c3d
 8004bf0:	08004c3d 	.word	0x08004c3d
 8004bf4:	08004c3d 	.word	0x08004c3d
 8004bf8:	08004c3d 	.word	0x08004c3d
 8004bfc:	08004c3d 	.word	0x08004c3d
 8004c00:	08004c3d 	.word	0x08004c3d
 8004c04:	08004c3d 	.word	0x08004c3d
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c12:	e1c0      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1a:	e1bc      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c22:	e1b8      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2a:	e1b4      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c2c:	2320      	movs	r3, #32
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c32:	e1b0      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c34:	2340      	movs	r3, #64	; 0x40
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c3a:	e1ac      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c42:	e1a8      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a75      	ldr	r2, [pc, #468]	; (8004e20 <UART_SetConfig+0x638>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d130      	bne.n	8004cb0 <UART_SetConfig+0x4c8>
 8004c4e:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <UART_SetConfig+0x634>)
 8004c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d826      	bhi.n	8004ca8 <UART_SetConfig+0x4c0>
 8004c5a:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x478>)
 8004c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c60:	08004c79 	.word	0x08004c79
 8004c64:	08004c81 	.word	0x08004c81
 8004c68:	08004c89 	.word	0x08004c89
 8004c6c:	08004c91 	.word	0x08004c91
 8004c70:	08004c99 	.word	0x08004c99
 8004c74:	08004ca1 	.word	0x08004ca1
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c7e:	e18a      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c80:	2304      	movs	r3, #4
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c86:	e186      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c88:	2308      	movs	r3, #8
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8e:	e182      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c96:	e17e      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004c98:	2320      	movs	r3, #32
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9e:	e17a      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004ca0:	2340      	movs	r3, #64	; 0x40
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca6:	e176      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cae:	e172      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a5b      	ldr	r2, [pc, #364]	; (8004e24 <UART_SetConfig+0x63c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d130      	bne.n	8004d1c <UART_SetConfig+0x534>
 8004cba:	4b58      	ldr	r3, [pc, #352]	; (8004e1c <UART_SetConfig+0x634>)
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d826      	bhi.n	8004d14 <UART_SetConfig+0x52c>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <UART_SetConfig+0x4e4>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004ce5 	.word	0x08004ce5
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	08004cf5 	.word	0x08004cf5
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cea:	e154      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf2:	e150      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfa:	e14c      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d02:	e148      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004d04:	2320      	movs	r3, #32
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0a:	e144      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004d0c:	2340      	movs	r3, #64	; 0x40
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d12:	e140      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004d14:	2380      	movs	r3, #128	; 0x80
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1a:	e13c      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a41      	ldr	r2, [pc, #260]	; (8004e28 <UART_SetConfig+0x640>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	f040 8082 	bne.w	8004e2c <UART_SetConfig+0x644>
 8004d28:	4b3c      	ldr	r3, [pc, #240]	; (8004e1c <UART_SetConfig+0x634>)
 8004d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d30:	2b28      	cmp	r3, #40	; 0x28
 8004d32:	d86d      	bhi.n	8004e10 <UART_SetConfig+0x628>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0x554>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004de1 	.word	0x08004de1
 8004d40:	08004e11 	.word	0x08004e11
 8004d44:	08004e11 	.word	0x08004e11
 8004d48:	08004e11 	.word	0x08004e11
 8004d4c:	08004e11 	.word	0x08004e11
 8004d50:	08004e11 	.word	0x08004e11
 8004d54:	08004e11 	.word	0x08004e11
 8004d58:	08004e11 	.word	0x08004e11
 8004d5c:	08004de9 	.word	0x08004de9
 8004d60:	08004e11 	.word	0x08004e11
 8004d64:	08004e11 	.word	0x08004e11
 8004d68:	08004e11 	.word	0x08004e11
 8004d6c:	08004e11 	.word	0x08004e11
 8004d70:	08004e11 	.word	0x08004e11
 8004d74:	08004e11 	.word	0x08004e11
 8004d78:	08004e11 	.word	0x08004e11
 8004d7c:	08004df1 	.word	0x08004df1
 8004d80:	08004e11 	.word	0x08004e11
 8004d84:	08004e11 	.word	0x08004e11
 8004d88:	08004e11 	.word	0x08004e11
 8004d8c:	08004e11 	.word	0x08004e11
 8004d90:	08004e11 	.word	0x08004e11
 8004d94:	08004e11 	.word	0x08004e11
 8004d98:	08004e11 	.word	0x08004e11
 8004d9c:	08004df9 	.word	0x08004df9
 8004da0:	08004e11 	.word	0x08004e11
 8004da4:	08004e11 	.word	0x08004e11
 8004da8:	08004e11 	.word	0x08004e11
 8004dac:	08004e11 	.word	0x08004e11
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	08004e11 	.word	0x08004e11
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e01 	.word	0x08004e01
 8004dc0:	08004e11 	.word	0x08004e11
 8004dc4:	08004e11 	.word	0x08004e11
 8004dc8:	08004e11 	.word	0x08004e11
 8004dcc:	08004e11 	.word	0x08004e11
 8004dd0:	08004e11 	.word	0x08004e11
 8004dd4:	08004e11 	.word	0x08004e11
 8004dd8:	08004e11 	.word	0x08004e11
 8004ddc:	08004e09 	.word	0x08004e09
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004de6:	e0d6      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004de8:	2304      	movs	r3, #4
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dee:	e0d2      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004df0:	2308      	movs	r3, #8
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df6:	e0ce      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004df8:	2310      	movs	r3, #16
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfe:	e0ca      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004e00:	2320      	movs	r3, #32
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e06:	e0c6      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004e08:	2340      	movs	r3, #64	; 0x40
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0e:	e0c2      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004e10:	2380      	movs	r3, #128	; 0x80
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e16:	e0be      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004e18:	40011400 	.word	0x40011400
 8004e1c:	58024400 	.word	0x58024400
 8004e20:	40007800 	.word	0x40007800
 8004e24:	40007c00 	.word	0x40007c00
 8004e28:	40011800 	.word	0x40011800
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4aad      	ldr	r2, [pc, #692]	; (80050e8 <UART_SetConfig+0x900>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d176      	bne.n	8004f24 <UART_SetConfig+0x73c>
 8004e36:	4bad      	ldr	r3, [pc, #692]	; (80050ec <UART_SetConfig+0x904>)
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3e:	2b28      	cmp	r3, #40	; 0x28
 8004e40:	d86c      	bhi.n	8004f1c <UART_SetConfig+0x734>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <UART_SetConfig+0x660>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004eed 	.word	0x08004eed
 8004e4c:	08004f1d 	.word	0x08004f1d
 8004e50:	08004f1d 	.word	0x08004f1d
 8004e54:	08004f1d 	.word	0x08004f1d
 8004e58:	08004f1d 	.word	0x08004f1d
 8004e5c:	08004f1d 	.word	0x08004f1d
 8004e60:	08004f1d 	.word	0x08004f1d
 8004e64:	08004f1d 	.word	0x08004f1d
 8004e68:	08004ef5 	.word	0x08004ef5
 8004e6c:	08004f1d 	.word	0x08004f1d
 8004e70:	08004f1d 	.word	0x08004f1d
 8004e74:	08004f1d 	.word	0x08004f1d
 8004e78:	08004f1d 	.word	0x08004f1d
 8004e7c:	08004f1d 	.word	0x08004f1d
 8004e80:	08004f1d 	.word	0x08004f1d
 8004e84:	08004f1d 	.word	0x08004f1d
 8004e88:	08004efd 	.word	0x08004efd
 8004e8c:	08004f1d 	.word	0x08004f1d
 8004e90:	08004f1d 	.word	0x08004f1d
 8004e94:	08004f1d 	.word	0x08004f1d
 8004e98:	08004f1d 	.word	0x08004f1d
 8004e9c:	08004f1d 	.word	0x08004f1d
 8004ea0:	08004f1d 	.word	0x08004f1d
 8004ea4:	08004f1d 	.word	0x08004f1d
 8004ea8:	08004f05 	.word	0x08004f05
 8004eac:	08004f1d 	.word	0x08004f1d
 8004eb0:	08004f1d 	.word	0x08004f1d
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004f1d 	.word	0x08004f1d
 8004ebc:	08004f1d 	.word	0x08004f1d
 8004ec0:	08004f1d 	.word	0x08004f1d
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f0d 	.word	0x08004f0d
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004f1d 	.word	0x08004f1d
 8004ed4:	08004f1d 	.word	0x08004f1d
 8004ed8:	08004f1d 	.word	0x08004f1d
 8004edc:	08004f1d 	.word	0x08004f1d
 8004ee0:	08004f1d 	.word	0x08004f1d
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e050      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e04c      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f02:	e048      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0a:	e044      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f12:	e040      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f14:	2340      	movs	r3, #64	; 0x40
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1a:	e03c      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f22:	e038      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a71      	ldr	r2, [pc, #452]	; (80050f0 <UART_SetConfig+0x908>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d130      	bne.n	8004f90 <UART_SetConfig+0x7a8>
 8004f2e:	4b6f      	ldr	r3, [pc, #444]	; (80050ec <UART_SetConfig+0x904>)
 8004f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d826      	bhi.n	8004f88 <UART_SetConfig+0x7a0>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x758>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f59 	.word	0x08004f59
 8004f44:	08004f61 	.word	0x08004f61
 8004f48:	08004f69 	.word	0x08004f69
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f79 	.word	0x08004f79
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e01a      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e016      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6e:	e012      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f76:	e00e      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f78:	2320      	movs	r3, #32
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7e:	e00a      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f86:	e006      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f88:	2380      	movs	r3, #128	; 0x80
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8e:	e002      	b.n	8004f96 <UART_SetConfig+0x7ae>
 8004f90:	2380      	movs	r3, #128	; 0x80
 8004f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a55      	ldr	r2, [pc, #340]	; (80050f0 <UART_SetConfig+0x908>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	f040 80f8 	bne.w	8005192 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	dc46      	bgt.n	8005038 <UART_SetConfig+0x850>
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	db75      	blt.n	800509a <UART_SetConfig+0x8b2>
 8004fae:	3b02      	subs	r3, #2
 8004fb0:	2b1e      	cmp	r3, #30
 8004fb2:	d872      	bhi.n	800509a <UART_SetConfig+0x8b2>
 8004fb4:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <UART_SetConfig+0x7d4>)
 8004fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fba:	bf00      	nop
 8004fbc:	0800503f 	.word	0x0800503f
 8004fc0:	0800509b 	.word	0x0800509b
 8004fc4:	08005047 	.word	0x08005047
 8004fc8:	0800509b 	.word	0x0800509b
 8004fcc:	0800509b 	.word	0x0800509b
 8004fd0:	0800509b 	.word	0x0800509b
 8004fd4:	08005057 	.word	0x08005057
 8004fd8:	0800509b 	.word	0x0800509b
 8004fdc:	0800509b 	.word	0x0800509b
 8004fe0:	0800509b 	.word	0x0800509b
 8004fe4:	0800509b 	.word	0x0800509b
 8004fe8:	0800509b 	.word	0x0800509b
 8004fec:	0800509b 	.word	0x0800509b
 8004ff0:	0800509b 	.word	0x0800509b
 8004ff4:	08005067 	.word	0x08005067
 8004ff8:	0800509b 	.word	0x0800509b
 8004ffc:	0800509b 	.word	0x0800509b
 8005000:	0800509b 	.word	0x0800509b
 8005004:	0800509b 	.word	0x0800509b
 8005008:	0800509b 	.word	0x0800509b
 800500c:	0800509b 	.word	0x0800509b
 8005010:	0800509b 	.word	0x0800509b
 8005014:	0800509b 	.word	0x0800509b
 8005018:	0800509b 	.word	0x0800509b
 800501c:	0800509b 	.word	0x0800509b
 8005020:	0800509b 	.word	0x0800509b
 8005024:	0800509b 	.word	0x0800509b
 8005028:	0800509b 	.word	0x0800509b
 800502c:	0800509b 	.word	0x0800509b
 8005030:	0800509b 	.word	0x0800509b
 8005034:	0800508d 	.word	0x0800508d
 8005038:	2b40      	cmp	r3, #64	; 0x40
 800503a:	d02a      	beq.n	8005092 <UART_SetConfig+0x8aa>
 800503c:	e02d      	b.n	800509a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800503e:	f7fe fe7b 	bl	8003d38 <HAL_RCCEx_GetD3PCLK1Freq>
 8005042:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005044:	e02f      	b.n	80050a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fe8a 	bl	8003d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005054:	e027      	b.n	80050a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005056:	f107 0318 	add.w	r3, r7, #24
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe ffd6 	bl	800400c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005064:	e01f      	b.n	80050a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <UART_SetConfig+0x904>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005072:	4b1e      	ldr	r3, [pc, #120]	; (80050ec <UART_SetConfig+0x904>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	08db      	lsrs	r3, r3, #3
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <UART_SetConfig+0x90c>)
 800507e:	fa22 f303 	lsr.w	r3, r2, r3
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005084:	e00f      	b.n	80050a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005086:	4b1b      	ldr	r3, [pc, #108]	; (80050f4 <UART_SetConfig+0x90c>)
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800508a:	e00c      	b.n	80050a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <UART_SetConfig+0x910>)
 800508e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005090:	e009      	b.n	80050a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005098:	e005      	b.n	80050a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80050a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 81ee 	beq.w	800548a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <UART_SetConfig+0x914>)
 80050b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80050c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d305      	bcc.n	80050de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	429a      	cmp	r2, r3
 80050dc:	d910      	bls.n	8005100 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050e4:	e1d1      	b.n	800548a <UART_SetConfig+0xca2>
 80050e6:	bf00      	nop
 80050e8:	40011c00 	.word	0x40011c00
 80050ec:	58024400 	.word	0x58024400
 80050f0:	58000c00 	.word	0x58000c00
 80050f4:	03d09000 	.word	0x03d09000
 80050f8:	003d0900 	.word	0x003d0900
 80050fc:	0800919c 	.word	0x0800919c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005102:	2200      	movs	r2, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	60fa      	str	r2, [r7, #12]
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	4ac0      	ldr	r2, [pc, #768]	; (8005410 <UART_SetConfig+0xc28>)
 800510e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005112:	b29b      	uxth	r3, r3
 8005114:	2200      	movs	r2, #0
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800511e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005122:	f7fb f93d 	bl	80003a0 <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	020b      	lsls	r3, r1, #8
 8005138:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800513c:	0202      	lsls	r2, r0, #8
 800513e:	6979      	ldr	r1, [r7, #20]
 8005140:	6849      	ldr	r1, [r1, #4]
 8005142:	0849      	lsrs	r1, r1, #1
 8005144:	2000      	movs	r0, #0
 8005146:	460c      	mov	r4, r1
 8005148:	4605      	mov	r5, r0
 800514a:	eb12 0804 	adds.w	r8, r2, r4
 800514e:	eb43 0905 	adc.w	r9, r3, r5
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	469a      	mov	sl, r3
 800515a:	4693      	mov	fp, r2
 800515c:	4652      	mov	r2, sl
 800515e:	465b      	mov	r3, fp
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb f91c 	bl	80003a0 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4613      	mov	r3, r2
 800516e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005176:	d308      	bcc.n	800518a <UART_SetConfig+0x9a2>
 8005178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517e:	d204      	bcs.n	800518a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005186:	60da      	str	r2, [r3, #12]
 8005188:	e17f      	b.n	800548a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005190:	e17b      	b.n	800548a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519a:	f040 80bd 	bne.w	8005318 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800519e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	dc48      	bgt.n	8005238 <UART_SetConfig+0xa50>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	db7b      	blt.n	80052a2 <UART_SetConfig+0xaba>
 80051aa:	2b20      	cmp	r3, #32
 80051ac:	d879      	bhi.n	80052a2 <UART_SetConfig+0xaba>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <UART_SetConfig+0x9cc>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	0800523f 	.word	0x0800523f
 80051b8:	08005247 	.word	0x08005247
 80051bc:	080052a3 	.word	0x080052a3
 80051c0:	080052a3 	.word	0x080052a3
 80051c4:	0800524f 	.word	0x0800524f
 80051c8:	080052a3 	.word	0x080052a3
 80051cc:	080052a3 	.word	0x080052a3
 80051d0:	080052a3 	.word	0x080052a3
 80051d4:	0800525f 	.word	0x0800525f
 80051d8:	080052a3 	.word	0x080052a3
 80051dc:	080052a3 	.word	0x080052a3
 80051e0:	080052a3 	.word	0x080052a3
 80051e4:	080052a3 	.word	0x080052a3
 80051e8:	080052a3 	.word	0x080052a3
 80051ec:	080052a3 	.word	0x080052a3
 80051f0:	080052a3 	.word	0x080052a3
 80051f4:	0800526f 	.word	0x0800526f
 80051f8:	080052a3 	.word	0x080052a3
 80051fc:	080052a3 	.word	0x080052a3
 8005200:	080052a3 	.word	0x080052a3
 8005204:	080052a3 	.word	0x080052a3
 8005208:	080052a3 	.word	0x080052a3
 800520c:	080052a3 	.word	0x080052a3
 8005210:	080052a3 	.word	0x080052a3
 8005214:	080052a3 	.word	0x080052a3
 8005218:	080052a3 	.word	0x080052a3
 800521c:	080052a3 	.word	0x080052a3
 8005220:	080052a3 	.word	0x080052a3
 8005224:	080052a3 	.word	0x080052a3
 8005228:	080052a3 	.word	0x080052a3
 800522c:	080052a3 	.word	0x080052a3
 8005230:	080052a3 	.word	0x080052a3
 8005234:	08005295 	.word	0x08005295
 8005238:	2b40      	cmp	r3, #64	; 0x40
 800523a:	d02e      	beq.n	800529a <UART_SetConfig+0xab2>
 800523c:	e031      	b.n	80052a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523e:	f7fd fb91 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8005242:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005244:	e033      	b.n	80052ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005246:	f7fd fba3 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 800524a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800524c:	e02f      	b.n	80052ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800524e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fd86 	bl	8003d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800525c:	e027      	b.n	80052ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800525e:	f107 0318 	add.w	r3, r7, #24
 8005262:	4618      	mov	r0, r3
 8005264:	f7fe fed2 	bl	800400c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800526c:	e01f      	b.n	80052ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800526e:	4b69      	ldr	r3, [pc, #420]	; (8005414 <UART_SetConfig+0xc2c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0320 	and.w	r3, r3, #32
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800527a:	4b66      	ldr	r3, [pc, #408]	; (8005414 <UART_SetConfig+0xc2c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	08db      	lsrs	r3, r3, #3
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	4a64      	ldr	r2, [pc, #400]	; (8005418 <UART_SetConfig+0xc30>)
 8005286:	fa22 f303 	lsr.w	r3, r2, r3
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800528c:	e00f      	b.n	80052ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800528e:	4b62      	ldr	r3, [pc, #392]	; (8005418 <UART_SetConfig+0xc30>)
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005292:	e00c      	b.n	80052ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005294:	4b61      	ldr	r3, [pc, #388]	; (800541c <UART_SetConfig+0xc34>)
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005298:	e009      	b.n	80052ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800529e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052a0:	e005      	b.n	80052ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80052ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80ea 	beq.w	800548a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	4a55      	ldr	r2, [pc, #340]	; (8005410 <UART_SetConfig+0xc28>)
 80052bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052c0:	461a      	mov	r2, r3
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80052c8:	005a      	lsls	r2, r3, #1
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	441a      	add	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052de:	2b0f      	cmp	r3, #15
 80052e0:	d916      	bls.n	8005310 <UART_SetConfig+0xb28>
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e8:	d212      	bcs.n	8005310 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	f023 030f 	bic.w	r3, r3, #15
 80052f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	085b      	lsrs	r3, r3, #1
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	b29a      	uxth	r2, r3
 8005300:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005302:	4313      	orrs	r3, r2
 8005304:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e0bc      	b.n	800548a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005316:	e0b8      	b.n	800548a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005318:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800531c:	2b20      	cmp	r3, #32
 800531e:	dc4b      	bgt.n	80053b8 <UART_SetConfig+0xbd0>
 8005320:	2b00      	cmp	r3, #0
 8005322:	f2c0 8087 	blt.w	8005434 <UART_SetConfig+0xc4c>
 8005326:	2b20      	cmp	r3, #32
 8005328:	f200 8084 	bhi.w	8005434 <UART_SetConfig+0xc4c>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <UART_SetConfig+0xb4c>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	080053bf 	.word	0x080053bf
 8005338:	080053c7 	.word	0x080053c7
 800533c:	08005435 	.word	0x08005435
 8005340:	08005435 	.word	0x08005435
 8005344:	080053cf 	.word	0x080053cf
 8005348:	08005435 	.word	0x08005435
 800534c:	08005435 	.word	0x08005435
 8005350:	08005435 	.word	0x08005435
 8005354:	080053df 	.word	0x080053df
 8005358:	08005435 	.word	0x08005435
 800535c:	08005435 	.word	0x08005435
 8005360:	08005435 	.word	0x08005435
 8005364:	08005435 	.word	0x08005435
 8005368:	08005435 	.word	0x08005435
 800536c:	08005435 	.word	0x08005435
 8005370:	08005435 	.word	0x08005435
 8005374:	080053ef 	.word	0x080053ef
 8005378:	08005435 	.word	0x08005435
 800537c:	08005435 	.word	0x08005435
 8005380:	08005435 	.word	0x08005435
 8005384:	08005435 	.word	0x08005435
 8005388:	08005435 	.word	0x08005435
 800538c:	08005435 	.word	0x08005435
 8005390:	08005435 	.word	0x08005435
 8005394:	08005435 	.word	0x08005435
 8005398:	08005435 	.word	0x08005435
 800539c:	08005435 	.word	0x08005435
 80053a0:	08005435 	.word	0x08005435
 80053a4:	08005435 	.word	0x08005435
 80053a8:	08005435 	.word	0x08005435
 80053ac:	08005435 	.word	0x08005435
 80053b0:	08005435 	.word	0x08005435
 80053b4:	08005427 	.word	0x08005427
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d037      	beq.n	800542c <UART_SetConfig+0xc44>
 80053bc:	e03a      	b.n	8005434 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053be:	f7fd fad1 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 80053c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053c4:	e03c      	b.n	8005440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053c6:	f7fd fae3 	bl	8002990 <HAL_RCC_GetPCLK2Freq>
 80053ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053cc:	e038      	b.n	8005440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fcc6 	bl	8003d64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053dc:	e030      	b.n	8005440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053de:	f107 0318 	add.w	r3, r7, #24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fe fe12 	bl	800400c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ec:	e028      	b.n	8005440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ee:	4b09      	ldr	r3, [pc, #36]	; (8005414 <UART_SetConfig+0xc2c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0320 	and.w	r3, r3, #32
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d012      	beq.n	8005420 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <UART_SetConfig+0xc2c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	08db      	lsrs	r3, r3, #3
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	4a04      	ldr	r2, [pc, #16]	; (8005418 <UART_SetConfig+0xc30>)
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800540c:	e018      	b.n	8005440 <UART_SetConfig+0xc58>
 800540e:	bf00      	nop
 8005410:	0800919c 	.word	0x0800919c
 8005414:	58024400 	.word	0x58024400
 8005418:	03d09000 	.word	0x03d09000
 800541c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005420:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <UART_SetConfig+0xccc>)
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005424:	e00c      	b.n	8005440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005426:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <UART_SetConfig+0xcd0>)
 8005428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800542a:	e009      	b.n	8005440 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800542c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005430:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005432:	e005      	b.n	8005440 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800543e:	bf00      	nop
    }

    if (pclk != 0U)
 8005440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d021      	beq.n	800548a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <UART_SetConfig+0xcd4>)
 800544c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005450:	461a      	mov	r2, r3
 8005452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005454:	fbb3 f2f2 	udiv	r2, r3, r2
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	441a      	add	r2, r3
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	fbb2 f3f3 	udiv	r3, r2, r3
 8005468:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b0f      	cmp	r3, #15
 800546e:	d909      	bls.n	8005484 <UART_SetConfig+0xc9c>
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005476:	d205      	bcs.n	8005484 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	b29a      	uxth	r2, r3
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	60da      	str	r2, [r3, #12]
 8005482:	e002      	b.n	800548a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2201      	movs	r2, #1
 800548e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2201      	movs	r2, #1
 8005496:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2200      	movs	r2, #0
 800549e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2200      	movs	r2, #0
 80054a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3748      	adds	r7, #72	; 0x48
 80054ae:	46bd      	mov	sp, r7
 80054b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054b4:	03d09000 	.word	0x03d09000
 80054b8:	003d0900 	.word	0x003d0900
 80054bc:	0800919c 	.word	0x0800919c

080054c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	f003 0310 	and.w	r3, r3, #16
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b00      	cmp	r3, #0
 800559e:	d01a      	beq.n	80055d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055be:	d10a      	bne.n	80055d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b098      	sub	sp, #96	; 0x60
 8005608:	af02      	add	r7, sp, #8
 800560a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005614:	f7fb fedc 	bl	80013d0 <HAL_GetTick>
 8005618:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b08      	cmp	r3, #8
 8005626:	d12f      	bne.n	8005688 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f88e 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d022      	beq.n	8005688 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005656:	653b      	str	r3, [r7, #80]	; 0x50
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
 8005662:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e6      	bne.n	8005642 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2220      	movs	r2, #32
 8005678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e063      	b.n	8005750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0304 	and.w	r3, r3, #4
 8005692:	2b04      	cmp	r3, #4
 8005694:	d149      	bne.n	800572a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005696:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569e:	2200      	movs	r2, #0
 80056a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f857 	bl	8005758 <UART_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d03c      	beq.n	800572a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	623b      	str	r3, [r7, #32]
   return(result);
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30
 80056d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056d6:	e841 2300 	strex	r3, r2, [r1]
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1e6      	bne.n	80056b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	e853 3f00 	ldrex	r3, [r3]
 80056f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f023 0301 	bic.w	r3, r3, #1
 80056f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3308      	adds	r3, #8
 8005700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005702:	61fa      	str	r2, [r7, #28]
 8005704:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	69b9      	ldr	r1, [r7, #24]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	617b      	str	r3, [r7, #20]
   return(result);
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e5      	bne.n	80056e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e012      	b.n	8005750 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3758      	adds	r7, #88	; 0x58
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	4613      	mov	r3, r2
 8005766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005768:	e049      	b.n	80057fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d045      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fb fe2d 	bl	80013d0 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <UART_WaitOnFlagUntilTimeout+0x30>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e048      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b00      	cmp	r3, #0
 8005798:	d031      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d110      	bne.n	80057ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2208      	movs	r2, #8
 80057ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f839 	bl	8005828 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2208      	movs	r2, #8
 80057ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e029      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d8:	d111      	bne.n	80057fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f81f 	bl	8005828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e00f      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	429a      	cmp	r2, r3
 800581a:	d0a6      	beq.n	800576a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b095      	sub	sp, #84	; 0x54
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800584e:	643b      	str	r3, [r7, #64]	; 0x40
 8005850:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005856:	e841 2300 	strex	r3, r2, [r1]
 800585a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1e6      	bne.n	8005830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	61fb      	str	r3, [r7, #28]
   return(result);
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <UART_EndRxTransfer+0xc8>)
 8005876:	4013      	ands	r3, r2
 8005878:	64bb      	str	r3, [r7, #72]	; 0x48
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d118      	bne.n	80058d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	f023 0310 	bic.w	r3, r3, #16
 80058b2:	647b      	str	r3, [r7, #68]	; 0x44
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6979      	ldr	r1, [r7, #20]
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	613b      	str	r3, [r7, #16]
   return(result);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80058e4:	bf00      	nop
 80058e6:	3754      	adds	r7, #84	; 0x54
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	effffffe 	.word	0xeffffffe

080058f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005902:	2b01      	cmp	r3, #1
 8005904:	d101      	bne.n	800590a <HAL_UARTEx_DisableFifoMode+0x16>
 8005906:	2302      	movs	r3, #2
 8005908:	e027      	b.n	800595a <HAL_UARTEx_DisableFifoMode+0x66>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2224      	movs	r2, #36	; 0x24
 8005916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f022 0201 	bic.w	r2, r2, #1
 8005930:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005938:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800597a:	2302      	movs	r3, #2
 800597c:	e02d      	b.n	80059da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2224      	movs	r2, #36	; 0x24
 800598a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0201 	bic.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f850 	bl	8005a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e02d      	b.n	8005a56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2224      	movs	r2, #36	; 0x24
 8005a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0201 	bic.w	r2, r2, #1
 8005a20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f812 	bl	8005a60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
	...

08005a60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d108      	bne.n	8005a82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a80:	e031      	b.n	8005ae6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a82:	2310      	movs	r3, #16
 8005a84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a86:	2310      	movs	r3, #16
 8005a88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	0e5b      	lsrs	r3, r3, #25
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	0f5b      	lsrs	r3, r3, #29
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	7b3a      	ldrb	r2, [r7, #12]
 8005aae:	4911      	ldr	r1, [pc, #68]	; (8005af4 <UARTEx_SetNbDataToProcess+0x94>)
 8005ab0:	5c8a      	ldrb	r2, [r1, r2]
 8005ab2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ab6:	7b3a      	ldrb	r2, [r7, #12]
 8005ab8:	490f      	ldr	r1, [pc, #60]	; (8005af8 <UARTEx_SetNbDataToProcess+0x98>)
 8005aba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005abc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	7b7a      	ldrb	r2, [r7, #13]
 8005acc:	4909      	ldr	r1, [pc, #36]	; (8005af4 <UARTEx_SetNbDataToProcess+0x94>)
 8005ace:	5c8a      	ldrb	r2, [r1, r2]
 8005ad0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ad4:	7b7a      	ldrb	r2, [r7, #13]
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <UARTEx_SetNbDataToProcess+0x98>)
 8005ad8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ada:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	080091b4 	.word	0x080091b4
 8005af8:	080091bc 	.word	0x080091bc

08005afc <__errno>:
 8005afc:	4b01      	ldr	r3, [pc, #4]	; (8005b04 <__errno+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	24000010 	.word	0x24000010

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	; (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	; (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	; (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	; (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f003 fb12 	bl	8009144 <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	08009780 	.word	0x08009780
 8005b44:	08009780 	.word	0x08009780
 8005b48:	08009780 	.word	0x08009780
 8005b4c:	08009784 	.word	0x08009784

08005b50 <memset>:
 8005b50:	4402      	add	r2, r0
 8005b52:	4603      	mov	r3, r0
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d100      	bne.n	8005b5a <memset+0xa>
 8005b58:	4770      	bx	lr
 8005b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b5e:	e7f9      	b.n	8005b54 <memset+0x4>

08005b60 <__cvt>:
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	ed2d 8b02 	vpush	{d8}
 8005b66:	eeb0 8b40 	vmov.f64	d8, d0
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	4617      	mov	r7, r2
 8005b6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005b70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005b72:	ee18 2a90 	vmov	r2, s17
 8005b76:	f025 0520 	bic.w	r5, r5, #32
 8005b7a:	2a00      	cmp	r2, #0
 8005b7c:	bfb6      	itet	lt
 8005b7e:	222d      	movlt	r2, #45	; 0x2d
 8005b80:	2200      	movge	r2, #0
 8005b82:	eeb1 8b40 	vneglt.f64	d8, d0
 8005b86:	2d46      	cmp	r5, #70	; 0x46
 8005b88:	460c      	mov	r4, r1
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	d004      	beq.n	8005b98 <__cvt+0x38>
 8005b8e:	2d45      	cmp	r5, #69	; 0x45
 8005b90:	d100      	bne.n	8005b94 <__cvt+0x34>
 8005b92:	3401      	adds	r4, #1
 8005b94:	2102      	movs	r1, #2
 8005b96:	e000      	b.n	8005b9a <__cvt+0x3a>
 8005b98:	2103      	movs	r1, #3
 8005b9a:	ab03      	add	r3, sp, #12
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	ab02      	add	r3, sp, #8
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4633      	mov	r3, r6
 8005ba6:	eeb0 0b48 	vmov.f64	d0, d8
 8005baa:	f000 fdf5 	bl	8006798 <_dtoa_r>
 8005bae:	2d47      	cmp	r5, #71	; 0x47
 8005bb0:	d101      	bne.n	8005bb6 <__cvt+0x56>
 8005bb2:	07fb      	lsls	r3, r7, #31
 8005bb4:	d51a      	bpl.n	8005bec <__cvt+0x8c>
 8005bb6:	2d46      	cmp	r5, #70	; 0x46
 8005bb8:	eb00 0204 	add.w	r2, r0, r4
 8005bbc:	d10c      	bne.n	8005bd8 <__cvt+0x78>
 8005bbe:	7803      	ldrb	r3, [r0, #0]
 8005bc0:	2b30      	cmp	r3, #48	; 0x30
 8005bc2:	d107      	bne.n	8005bd4 <__cvt+0x74>
 8005bc4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bcc:	bf1c      	itt	ne
 8005bce:	f1c4 0401 	rsbne	r4, r4, #1
 8005bd2:	6034      	strne	r4, [r6, #0]
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	441a      	add	r2, r3
 8005bd8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be0:	bf08      	it	eq
 8005be2:	9203      	streq	r2, [sp, #12]
 8005be4:	2130      	movs	r1, #48	; 0x30
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d307      	bcc.n	8005bfc <__cvt+0x9c>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bf0:	1a1b      	subs	r3, r3, r0
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	b005      	add	sp, #20
 8005bf6:	ecbd 8b02 	vpop	{d8}
 8005bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bfc:	1c5c      	adds	r4, r3, #1
 8005bfe:	9403      	str	r4, [sp, #12]
 8005c00:	7019      	strb	r1, [r3, #0]
 8005c02:	e7f0      	b.n	8005be6 <__cvt+0x86>

08005c04 <__exponent>:
 8005c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c06:	4603      	mov	r3, r0
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	bfb8      	it	lt
 8005c0c:	4249      	neglt	r1, r1
 8005c0e:	f803 2b02 	strb.w	r2, [r3], #2
 8005c12:	bfb4      	ite	lt
 8005c14:	222d      	movlt	r2, #45	; 0x2d
 8005c16:	222b      	movge	r2, #43	; 0x2b
 8005c18:	2909      	cmp	r1, #9
 8005c1a:	7042      	strb	r2, [r0, #1]
 8005c1c:	dd2a      	ble.n	8005c74 <__exponent+0x70>
 8005c1e:	f10d 0407 	add.w	r4, sp, #7
 8005c22:	46a4      	mov	ip, r4
 8005c24:	270a      	movs	r7, #10
 8005c26:	46a6      	mov	lr, r4
 8005c28:	460a      	mov	r2, r1
 8005c2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c2e:	fb07 1516 	mls	r5, r7, r6, r1
 8005c32:	3530      	adds	r5, #48	; 0x30
 8005c34:	2a63      	cmp	r2, #99	; 0x63
 8005c36:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c3e:	4631      	mov	r1, r6
 8005c40:	dcf1      	bgt.n	8005c26 <__exponent+0x22>
 8005c42:	3130      	adds	r1, #48	; 0x30
 8005c44:	f1ae 0502 	sub.w	r5, lr, #2
 8005c48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c4c:	1c44      	adds	r4, r0, #1
 8005c4e:	4629      	mov	r1, r5
 8005c50:	4561      	cmp	r1, ip
 8005c52:	d30a      	bcc.n	8005c6a <__exponent+0x66>
 8005c54:	f10d 0209 	add.w	r2, sp, #9
 8005c58:	eba2 020e 	sub.w	r2, r2, lr
 8005c5c:	4565      	cmp	r5, ip
 8005c5e:	bf88      	it	hi
 8005c60:	2200      	movhi	r2, #0
 8005c62:	4413      	add	r3, r2
 8005c64:	1a18      	subs	r0, r3, r0
 8005c66:	b003      	add	sp, #12
 8005c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c72:	e7ed      	b.n	8005c50 <__exponent+0x4c>
 8005c74:	2330      	movs	r3, #48	; 0x30
 8005c76:	3130      	adds	r1, #48	; 0x30
 8005c78:	7083      	strb	r3, [r0, #2]
 8005c7a:	70c1      	strb	r1, [r0, #3]
 8005c7c:	1d03      	adds	r3, r0, #4
 8005c7e:	e7f1      	b.n	8005c64 <__exponent+0x60>

08005c80 <_printf_float>:
 8005c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c84:	b08b      	sub	sp, #44	; 0x2c
 8005c86:	460c      	mov	r4, r1
 8005c88:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005c8c:	4616      	mov	r6, r2
 8005c8e:	461f      	mov	r7, r3
 8005c90:	4605      	mov	r5, r0
 8005c92:	f001 fca7 	bl	80075e4 <_localeconv_r>
 8005c96:	f8d0 b000 	ldr.w	fp, [r0]
 8005c9a:	4658      	mov	r0, fp
 8005c9c:	f7fa fb28 	bl	80002f0 <strlen>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	9308      	str	r3, [sp, #32]
 8005ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	3307      	adds	r3, #7
 8005cb0:	f023 0307 	bic.w	r3, r3, #7
 8005cb4:	f103 0108 	add.w	r1, r3, #8
 8005cb8:	f8c8 1000 	str.w	r1, [r8]
 8005cbc:	4682      	mov	sl, r0
 8005cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cc2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005cc6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005f28 <_printf_float+0x2a8>
 8005cca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005cce:	eeb0 6bc0 	vabs.f64	d6, d0
 8005cd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8005cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cda:	dd24      	ble.n	8005d26 <_printf_float+0xa6>
 8005cdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	d502      	bpl.n	8005cec <_printf_float+0x6c>
 8005ce6:	232d      	movs	r3, #45	; 0x2d
 8005ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cec:	4b90      	ldr	r3, [pc, #576]	; (8005f30 <_printf_float+0x2b0>)
 8005cee:	4891      	ldr	r0, [pc, #580]	; (8005f34 <_printf_float+0x2b4>)
 8005cf0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cf4:	bf94      	ite	ls
 8005cf6:	4698      	movls	r8, r3
 8005cf8:	4680      	movhi	r8, r0
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	f022 0204 	bic.w	r2, r2, #4
 8005d02:	2300      	movs	r3, #0
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	9700      	str	r7, [sp, #0]
 8005d0a:	4633      	mov	r3, r6
 8005d0c:	aa09      	add	r2, sp, #36	; 0x24
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 f9d3 	bl	80060bc <_printf_common>
 8005d16:	3001      	adds	r0, #1
 8005d18:	f040 808a 	bne.w	8005e30 <_printf_float+0x1b0>
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	b00b      	add	sp, #44	; 0x2c
 8005d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d26:	eeb4 0b40 	vcmp.f64	d0, d0
 8005d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d2e:	d709      	bvc.n	8005d44 <_printf_float+0xc4>
 8005d30:	ee10 3a90 	vmov	r3, s1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	bfbc      	itt	lt
 8005d38:	232d      	movlt	r3, #45	; 0x2d
 8005d3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d3e:	487e      	ldr	r0, [pc, #504]	; (8005f38 <_printf_float+0x2b8>)
 8005d40:	4b7e      	ldr	r3, [pc, #504]	; (8005f3c <_printf_float+0x2bc>)
 8005d42:	e7d5      	b.n	8005cf0 <_printf_float+0x70>
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d4a:	9104      	str	r1, [sp, #16]
 8005d4c:	1c59      	adds	r1, r3, #1
 8005d4e:	d13c      	bne.n	8005dca <_printf_float+0x14a>
 8005d50:	2306      	movs	r3, #6
 8005d52:	6063      	str	r3, [r4, #4]
 8005d54:	2300      	movs	r3, #0
 8005d56:	9303      	str	r3, [sp, #12]
 8005d58:	ab08      	add	r3, sp, #32
 8005d5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005d5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d62:	ab07      	add	r3, sp, #28
 8005d64:	6861      	ldr	r1, [r4, #4]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	6022      	str	r2, [r4, #0]
 8005d6a:	f10d 031b 	add.w	r3, sp, #27
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f7ff fef6 	bl	8005b60 <__cvt>
 8005d74:	9b04      	ldr	r3, [sp, #16]
 8005d76:	9907      	ldr	r1, [sp, #28]
 8005d78:	2b47      	cmp	r3, #71	; 0x47
 8005d7a:	4680      	mov	r8, r0
 8005d7c:	d108      	bne.n	8005d90 <_printf_float+0x110>
 8005d7e:	1cc8      	adds	r0, r1, #3
 8005d80:	db02      	blt.n	8005d88 <_printf_float+0x108>
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	4299      	cmp	r1, r3
 8005d86:	dd41      	ble.n	8005e0c <_printf_float+0x18c>
 8005d88:	f1a9 0902 	sub.w	r9, r9, #2
 8005d8c:	fa5f f989 	uxtb.w	r9, r9
 8005d90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d94:	d820      	bhi.n	8005dd8 <_printf_float+0x158>
 8005d96:	3901      	subs	r1, #1
 8005d98:	464a      	mov	r2, r9
 8005d9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d9e:	9107      	str	r1, [sp, #28]
 8005da0:	f7ff ff30 	bl	8005c04 <__exponent>
 8005da4:	9a08      	ldr	r2, [sp, #32]
 8005da6:	9004      	str	r0, [sp, #16]
 8005da8:	1813      	adds	r3, r2, r0
 8005daa:	2a01      	cmp	r2, #1
 8005dac:	6123      	str	r3, [r4, #16]
 8005dae:	dc02      	bgt.n	8005db6 <_printf_float+0x136>
 8005db0:	6822      	ldr	r2, [r4, #0]
 8005db2:	07d2      	lsls	r2, r2, #31
 8005db4:	d501      	bpl.n	8005dba <_printf_float+0x13a>
 8005db6:	3301      	adds	r3, #1
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0a2      	beq.n	8005d08 <_printf_float+0x88>
 8005dc2:	232d      	movs	r3, #45	; 0x2d
 8005dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc8:	e79e      	b.n	8005d08 <_printf_float+0x88>
 8005dca:	9904      	ldr	r1, [sp, #16]
 8005dcc:	2947      	cmp	r1, #71	; 0x47
 8005dce:	d1c1      	bne.n	8005d54 <_printf_float+0xd4>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1bf      	bne.n	8005d54 <_printf_float+0xd4>
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e7bc      	b.n	8005d52 <_printf_float+0xd2>
 8005dd8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005ddc:	d118      	bne.n	8005e10 <_printf_float+0x190>
 8005dde:	2900      	cmp	r1, #0
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	dd0b      	ble.n	8005dfc <_printf_float+0x17c>
 8005de4:	6121      	str	r1, [r4, #16]
 8005de6:	b913      	cbnz	r3, 8005dee <_printf_float+0x16e>
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	07d0      	lsls	r0, r2, #31
 8005dec:	d502      	bpl.n	8005df4 <_printf_float+0x174>
 8005dee:	3301      	adds	r3, #1
 8005df0:	440b      	add	r3, r1
 8005df2:	6123      	str	r3, [r4, #16]
 8005df4:	2300      	movs	r3, #0
 8005df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005df8:	9304      	str	r3, [sp, #16]
 8005dfa:	e7de      	b.n	8005dba <_printf_float+0x13a>
 8005dfc:	b913      	cbnz	r3, 8005e04 <_printf_float+0x184>
 8005dfe:	6822      	ldr	r2, [r4, #0]
 8005e00:	07d2      	lsls	r2, r2, #31
 8005e02:	d501      	bpl.n	8005e08 <_printf_float+0x188>
 8005e04:	3302      	adds	r3, #2
 8005e06:	e7f4      	b.n	8005df2 <_printf_float+0x172>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e7f2      	b.n	8005df2 <_printf_float+0x172>
 8005e0c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e10:	9b08      	ldr	r3, [sp, #32]
 8005e12:	4299      	cmp	r1, r3
 8005e14:	db05      	blt.n	8005e22 <_printf_float+0x1a2>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	6121      	str	r1, [r4, #16]
 8005e1a:	07d8      	lsls	r0, r3, #31
 8005e1c:	d5ea      	bpl.n	8005df4 <_printf_float+0x174>
 8005e1e:	1c4b      	adds	r3, r1, #1
 8005e20:	e7e7      	b.n	8005df2 <_printf_float+0x172>
 8005e22:	2900      	cmp	r1, #0
 8005e24:	bfd4      	ite	le
 8005e26:	f1c1 0202 	rsble	r2, r1, #2
 8005e2a:	2201      	movgt	r2, #1
 8005e2c:	4413      	add	r3, r2
 8005e2e:	e7e0      	b.n	8005df2 <_printf_float+0x172>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	055a      	lsls	r2, r3, #21
 8005e34:	d407      	bmi.n	8005e46 <_printf_float+0x1c6>
 8005e36:	6923      	ldr	r3, [r4, #16]
 8005e38:	4642      	mov	r2, r8
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	47b8      	blx	r7
 8005e40:	3001      	adds	r0, #1
 8005e42:	d12a      	bne.n	8005e9a <_printf_float+0x21a>
 8005e44:	e76a      	b.n	8005d1c <_printf_float+0x9c>
 8005e46:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e4a:	f240 80e2 	bls.w	8006012 <_printf_float+0x392>
 8005e4e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005e52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5a:	d133      	bne.n	8005ec4 <_printf_float+0x244>
 8005e5c:	4a38      	ldr	r2, [pc, #224]	; (8005f40 <_printf_float+0x2c0>)
 8005e5e:	2301      	movs	r3, #1
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	3001      	adds	r0, #1
 8005e68:	f43f af58 	beq.w	8005d1c <_printf_float+0x9c>
 8005e6c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	db02      	blt.n	8005e7a <_printf_float+0x1fa>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07d8      	lsls	r0, r3, #31
 8005e78:	d50f      	bpl.n	8005e9a <_printf_float+0x21a>
 8005e7a:	4653      	mov	r3, sl
 8005e7c:	465a      	mov	r2, fp
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f af49 	beq.w	8005d1c <_printf_float+0x9c>
 8005e8a:	f04f 0800 	mov.w	r8, #0
 8005e8e:	f104 091a 	add.w	r9, r4, #26
 8005e92:	9b08      	ldr	r3, [sp, #32]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	4543      	cmp	r3, r8
 8005e98:	dc09      	bgt.n	8005eae <_printf_float+0x22e>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	079b      	lsls	r3, r3, #30
 8005e9e:	f100 8108 	bmi.w	80060b2 <_printf_float+0x432>
 8005ea2:	68e0      	ldr	r0, [r4, #12]
 8005ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ea6:	4298      	cmp	r0, r3
 8005ea8:	bfb8      	it	lt
 8005eaa:	4618      	movlt	r0, r3
 8005eac:	e738      	b.n	8005d20 <_printf_float+0xa0>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	464a      	mov	r2, r9
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	47b8      	blx	r7
 8005eb8:	3001      	adds	r0, #1
 8005eba:	f43f af2f 	beq.w	8005d1c <_printf_float+0x9c>
 8005ebe:	f108 0801 	add.w	r8, r8, #1
 8005ec2:	e7e6      	b.n	8005e92 <_printf_float+0x212>
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	dc3c      	bgt.n	8005f44 <_printf_float+0x2c4>
 8005eca:	4a1d      	ldr	r2, [pc, #116]	; (8005f40 <_printf_float+0x2c0>)
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f43f af21 	beq.w	8005d1c <_printf_float+0x9c>
 8005eda:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d102      	bne.n	8005ee8 <_printf_float+0x268>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	07d9      	lsls	r1, r3, #31
 8005ee6:	d5d8      	bpl.n	8005e9a <_printf_float+0x21a>
 8005ee8:	4653      	mov	r3, sl
 8005eea:	465a      	mov	r2, fp
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f af12 	beq.w	8005d1c <_printf_float+0x9c>
 8005ef8:	f04f 0900 	mov.w	r9, #0
 8005efc:	f104 0a1a 	add.w	sl, r4, #26
 8005f00:	9b07      	ldr	r3, [sp, #28]
 8005f02:	425b      	negs	r3, r3
 8005f04:	454b      	cmp	r3, r9
 8005f06:	dc01      	bgt.n	8005f0c <_printf_float+0x28c>
 8005f08:	9b08      	ldr	r3, [sp, #32]
 8005f0a:	e795      	b.n	8005e38 <_printf_float+0x1b8>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	4652      	mov	r2, sl
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	f43f af00 	beq.w	8005d1c <_printf_float+0x9c>
 8005f1c:	f109 0901 	add.w	r9, r9, #1
 8005f20:	e7ee      	b.n	8005f00 <_printf_float+0x280>
 8005f22:	bf00      	nop
 8005f24:	f3af 8000 	nop.w
 8005f28:	ffffffff 	.word	0xffffffff
 8005f2c:	7fefffff 	.word	0x7fefffff
 8005f30:	080091c8 	.word	0x080091c8
 8005f34:	080091cc 	.word	0x080091cc
 8005f38:	080091d4 	.word	0x080091d4
 8005f3c:	080091d0 	.word	0x080091d0
 8005f40:	080091d8 	.word	0x080091d8
 8005f44:	9a08      	ldr	r2, [sp, #32]
 8005f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	bfa8      	it	ge
 8005f4c:	461a      	movge	r2, r3
 8005f4e:	2a00      	cmp	r2, #0
 8005f50:	4691      	mov	r9, r2
 8005f52:	dc38      	bgt.n	8005fc6 <_printf_float+0x346>
 8005f54:	2300      	movs	r3, #0
 8005f56:	9305      	str	r3, [sp, #20]
 8005f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f5c:	f104 021a 	add.w	r2, r4, #26
 8005f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f62:	9905      	ldr	r1, [sp, #20]
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	eba3 0309 	sub.w	r3, r3, r9
 8005f6a:	428b      	cmp	r3, r1
 8005f6c:	dc33      	bgt.n	8005fd6 <_printf_float+0x356>
 8005f6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	db3c      	blt.n	8005ff0 <_printf_float+0x370>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	07da      	lsls	r2, r3, #31
 8005f7a:	d439      	bmi.n	8005ff0 <_printf_float+0x370>
 8005f7c:	9b08      	ldr	r3, [sp, #32]
 8005f7e:	9a04      	ldr	r2, [sp, #16]
 8005f80:	9907      	ldr	r1, [sp, #28]
 8005f82:	1a9a      	subs	r2, r3, r2
 8005f84:	eba3 0901 	sub.w	r9, r3, r1
 8005f88:	4591      	cmp	r9, r2
 8005f8a:	bfa8      	it	ge
 8005f8c:	4691      	movge	r9, r2
 8005f8e:	f1b9 0f00 	cmp.w	r9, #0
 8005f92:	dc35      	bgt.n	8006000 <_printf_float+0x380>
 8005f94:	f04f 0800 	mov.w	r8, #0
 8005f98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f9c:	f104 0a1a 	add.w	sl, r4, #26
 8005fa0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	eba3 0309 	sub.w	r3, r3, r9
 8005faa:	4543      	cmp	r3, r8
 8005fac:	f77f af75 	ble.w	8005e9a <_printf_float+0x21a>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4652      	mov	r2, sl
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f43f aeae 	beq.w	8005d1c <_printf_float+0x9c>
 8005fc0:	f108 0801 	add.w	r8, r8, #1
 8005fc4:	e7ec      	b.n	8005fa0 <_printf_float+0x320>
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	4631      	mov	r1, r6
 8005fca:	4642      	mov	r2, r8
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d1bf      	bne.n	8005f54 <_printf_float+0x2d4>
 8005fd4:	e6a2      	b.n	8005d1c <_printf_float+0x9c>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4628      	mov	r0, r5
 8005fdc:	9204      	str	r2, [sp, #16]
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f43f ae9b 	beq.w	8005d1c <_printf_float+0x9c>
 8005fe6:	9b05      	ldr	r3, [sp, #20]
 8005fe8:	9a04      	ldr	r2, [sp, #16]
 8005fea:	3301      	adds	r3, #1
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	e7b7      	b.n	8005f60 <_printf_float+0x2e0>
 8005ff0:	4653      	mov	r3, sl
 8005ff2:	465a      	mov	r2, fp
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	47b8      	blx	r7
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d1be      	bne.n	8005f7c <_printf_float+0x2fc>
 8005ffe:	e68d      	b.n	8005d1c <_printf_float+0x9c>
 8006000:	9a04      	ldr	r2, [sp, #16]
 8006002:	464b      	mov	r3, r9
 8006004:	4442      	add	r2, r8
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	d1c1      	bne.n	8005f94 <_printf_float+0x314>
 8006010:	e684      	b.n	8005d1c <_printf_float+0x9c>
 8006012:	9a08      	ldr	r2, [sp, #32]
 8006014:	2a01      	cmp	r2, #1
 8006016:	dc01      	bgt.n	800601c <_printf_float+0x39c>
 8006018:	07db      	lsls	r3, r3, #31
 800601a:	d537      	bpl.n	800608c <_printf_float+0x40c>
 800601c:	2301      	movs	r3, #1
 800601e:	4642      	mov	r2, r8
 8006020:	4631      	mov	r1, r6
 8006022:	4628      	mov	r0, r5
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f ae78 	beq.w	8005d1c <_printf_float+0x9c>
 800602c:	4653      	mov	r3, sl
 800602e:	465a      	mov	r2, fp
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f ae70 	beq.w	8005d1c <_printf_float+0x9c>
 800603c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006040:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006048:	d01b      	beq.n	8006082 <_printf_float+0x402>
 800604a:	9b08      	ldr	r3, [sp, #32]
 800604c:	f108 0201 	add.w	r2, r8, #1
 8006050:	3b01      	subs	r3, #1
 8006052:	4631      	mov	r1, r6
 8006054:	4628      	mov	r0, r5
 8006056:	47b8      	blx	r7
 8006058:	3001      	adds	r0, #1
 800605a:	d10e      	bne.n	800607a <_printf_float+0x3fa>
 800605c:	e65e      	b.n	8005d1c <_printf_float+0x9c>
 800605e:	2301      	movs	r3, #1
 8006060:	464a      	mov	r2, r9
 8006062:	4631      	mov	r1, r6
 8006064:	4628      	mov	r0, r5
 8006066:	47b8      	blx	r7
 8006068:	3001      	adds	r0, #1
 800606a:	f43f ae57 	beq.w	8005d1c <_printf_float+0x9c>
 800606e:	f108 0801 	add.w	r8, r8, #1
 8006072:	9b08      	ldr	r3, [sp, #32]
 8006074:	3b01      	subs	r3, #1
 8006076:	4543      	cmp	r3, r8
 8006078:	dcf1      	bgt.n	800605e <_printf_float+0x3de>
 800607a:	9b04      	ldr	r3, [sp, #16]
 800607c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006080:	e6db      	b.n	8005e3a <_printf_float+0x1ba>
 8006082:	f04f 0800 	mov.w	r8, #0
 8006086:	f104 091a 	add.w	r9, r4, #26
 800608a:	e7f2      	b.n	8006072 <_printf_float+0x3f2>
 800608c:	2301      	movs	r3, #1
 800608e:	4642      	mov	r2, r8
 8006090:	e7df      	b.n	8006052 <_printf_float+0x3d2>
 8006092:	2301      	movs	r3, #1
 8006094:	464a      	mov	r2, r9
 8006096:	4631      	mov	r1, r6
 8006098:	4628      	mov	r0, r5
 800609a:	47b8      	blx	r7
 800609c:	3001      	adds	r0, #1
 800609e:	f43f ae3d 	beq.w	8005d1c <_printf_float+0x9c>
 80060a2:	f108 0801 	add.w	r8, r8, #1
 80060a6:	68e3      	ldr	r3, [r4, #12]
 80060a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060aa:	1a5b      	subs	r3, r3, r1
 80060ac:	4543      	cmp	r3, r8
 80060ae:	dcf0      	bgt.n	8006092 <_printf_float+0x412>
 80060b0:	e6f7      	b.n	8005ea2 <_printf_float+0x222>
 80060b2:	f04f 0800 	mov.w	r8, #0
 80060b6:	f104 0919 	add.w	r9, r4, #25
 80060ba:	e7f4      	b.n	80060a6 <_printf_float+0x426>

080060bc <_printf_common>:
 80060bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c0:	4616      	mov	r6, r2
 80060c2:	4699      	mov	r9, r3
 80060c4:	688a      	ldr	r2, [r1, #8]
 80060c6:	690b      	ldr	r3, [r1, #16]
 80060c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060cc:	4293      	cmp	r3, r2
 80060ce:	bfb8      	it	lt
 80060d0:	4613      	movlt	r3, r2
 80060d2:	6033      	str	r3, [r6, #0]
 80060d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060d8:	4607      	mov	r7, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	b10a      	cbz	r2, 80060e2 <_printf_common+0x26>
 80060de:	3301      	adds	r3, #1
 80060e0:	6033      	str	r3, [r6, #0]
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	0699      	lsls	r1, r3, #26
 80060e6:	bf42      	ittt	mi
 80060e8:	6833      	ldrmi	r3, [r6, #0]
 80060ea:	3302      	addmi	r3, #2
 80060ec:	6033      	strmi	r3, [r6, #0]
 80060ee:	6825      	ldr	r5, [r4, #0]
 80060f0:	f015 0506 	ands.w	r5, r5, #6
 80060f4:	d106      	bne.n	8006104 <_printf_common+0x48>
 80060f6:	f104 0a19 	add.w	sl, r4, #25
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	6832      	ldr	r2, [r6, #0]
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	42ab      	cmp	r3, r5
 8006102:	dc26      	bgt.n	8006152 <_printf_common+0x96>
 8006104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006108:	1e13      	subs	r3, r2, #0
 800610a:	6822      	ldr	r2, [r4, #0]
 800610c:	bf18      	it	ne
 800610e:	2301      	movne	r3, #1
 8006110:	0692      	lsls	r2, r2, #26
 8006112:	d42b      	bmi.n	800616c <_printf_common+0xb0>
 8006114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006118:	4649      	mov	r1, r9
 800611a:	4638      	mov	r0, r7
 800611c:	47c0      	blx	r8
 800611e:	3001      	adds	r0, #1
 8006120:	d01e      	beq.n	8006160 <_printf_common+0xa4>
 8006122:	6823      	ldr	r3, [r4, #0]
 8006124:	68e5      	ldr	r5, [r4, #12]
 8006126:	6832      	ldr	r2, [r6, #0]
 8006128:	f003 0306 	and.w	r3, r3, #6
 800612c:	2b04      	cmp	r3, #4
 800612e:	bf08      	it	eq
 8006130:	1aad      	subeq	r5, r5, r2
 8006132:	68a3      	ldr	r3, [r4, #8]
 8006134:	6922      	ldr	r2, [r4, #16]
 8006136:	bf0c      	ite	eq
 8006138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800613c:	2500      	movne	r5, #0
 800613e:	4293      	cmp	r3, r2
 8006140:	bfc4      	itt	gt
 8006142:	1a9b      	subgt	r3, r3, r2
 8006144:	18ed      	addgt	r5, r5, r3
 8006146:	2600      	movs	r6, #0
 8006148:	341a      	adds	r4, #26
 800614a:	42b5      	cmp	r5, r6
 800614c:	d11a      	bne.n	8006184 <_printf_common+0xc8>
 800614e:	2000      	movs	r0, #0
 8006150:	e008      	b.n	8006164 <_printf_common+0xa8>
 8006152:	2301      	movs	r3, #1
 8006154:	4652      	mov	r2, sl
 8006156:	4649      	mov	r1, r9
 8006158:	4638      	mov	r0, r7
 800615a:	47c0      	blx	r8
 800615c:	3001      	adds	r0, #1
 800615e:	d103      	bne.n	8006168 <_printf_common+0xac>
 8006160:	f04f 30ff 	mov.w	r0, #4294967295
 8006164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006168:	3501      	adds	r5, #1
 800616a:	e7c6      	b.n	80060fa <_printf_common+0x3e>
 800616c:	18e1      	adds	r1, r4, r3
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	2030      	movs	r0, #48	; 0x30
 8006172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006176:	4422      	add	r2, r4
 8006178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800617c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006180:	3302      	adds	r3, #2
 8006182:	e7c7      	b.n	8006114 <_printf_common+0x58>
 8006184:	2301      	movs	r3, #1
 8006186:	4622      	mov	r2, r4
 8006188:	4649      	mov	r1, r9
 800618a:	4638      	mov	r0, r7
 800618c:	47c0      	blx	r8
 800618e:	3001      	adds	r0, #1
 8006190:	d0e6      	beq.n	8006160 <_printf_common+0xa4>
 8006192:	3601      	adds	r6, #1
 8006194:	e7d9      	b.n	800614a <_printf_common+0x8e>
	...

08006198 <_printf_i>:
 8006198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	7e0f      	ldrb	r7, [r1, #24]
 800619e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061a0:	2f78      	cmp	r7, #120	; 0x78
 80061a2:	4691      	mov	r9, r2
 80061a4:	4680      	mov	r8, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	469a      	mov	sl, r3
 80061aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ae:	d807      	bhi.n	80061c0 <_printf_i+0x28>
 80061b0:	2f62      	cmp	r7, #98	; 0x62
 80061b2:	d80a      	bhi.n	80061ca <_printf_i+0x32>
 80061b4:	2f00      	cmp	r7, #0
 80061b6:	f000 80d8 	beq.w	800636a <_printf_i+0x1d2>
 80061ba:	2f58      	cmp	r7, #88	; 0x58
 80061bc:	f000 80a3 	beq.w	8006306 <_printf_i+0x16e>
 80061c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061c8:	e03a      	b.n	8006240 <_printf_i+0xa8>
 80061ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ce:	2b15      	cmp	r3, #21
 80061d0:	d8f6      	bhi.n	80061c0 <_printf_i+0x28>
 80061d2:	a101      	add	r1, pc, #4	; (adr r1, 80061d8 <_printf_i+0x40>)
 80061d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d8:	08006231 	.word	0x08006231
 80061dc:	08006245 	.word	0x08006245
 80061e0:	080061c1 	.word	0x080061c1
 80061e4:	080061c1 	.word	0x080061c1
 80061e8:	080061c1 	.word	0x080061c1
 80061ec:	080061c1 	.word	0x080061c1
 80061f0:	08006245 	.word	0x08006245
 80061f4:	080061c1 	.word	0x080061c1
 80061f8:	080061c1 	.word	0x080061c1
 80061fc:	080061c1 	.word	0x080061c1
 8006200:	080061c1 	.word	0x080061c1
 8006204:	08006351 	.word	0x08006351
 8006208:	08006275 	.word	0x08006275
 800620c:	08006333 	.word	0x08006333
 8006210:	080061c1 	.word	0x080061c1
 8006214:	080061c1 	.word	0x080061c1
 8006218:	08006373 	.word	0x08006373
 800621c:	080061c1 	.word	0x080061c1
 8006220:	08006275 	.word	0x08006275
 8006224:	080061c1 	.word	0x080061c1
 8006228:	080061c1 	.word	0x080061c1
 800622c:	0800633b 	.word	0x0800633b
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	1d1a      	adds	r2, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	602a      	str	r2, [r5, #0]
 8006238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800623c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006240:	2301      	movs	r3, #1
 8006242:	e0a3      	b.n	800638c <_printf_i+0x1f4>
 8006244:	6820      	ldr	r0, [r4, #0]
 8006246:	6829      	ldr	r1, [r5, #0]
 8006248:	0606      	lsls	r6, r0, #24
 800624a:	f101 0304 	add.w	r3, r1, #4
 800624e:	d50a      	bpl.n	8006266 <_printf_i+0xce>
 8006250:	680e      	ldr	r6, [r1, #0]
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	2e00      	cmp	r6, #0
 8006256:	da03      	bge.n	8006260 <_printf_i+0xc8>
 8006258:	232d      	movs	r3, #45	; 0x2d
 800625a:	4276      	negs	r6, r6
 800625c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006260:	485e      	ldr	r0, [pc, #376]	; (80063dc <_printf_i+0x244>)
 8006262:	230a      	movs	r3, #10
 8006264:	e019      	b.n	800629a <_printf_i+0x102>
 8006266:	680e      	ldr	r6, [r1, #0]
 8006268:	602b      	str	r3, [r5, #0]
 800626a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800626e:	bf18      	it	ne
 8006270:	b236      	sxthne	r6, r6
 8006272:	e7ef      	b.n	8006254 <_printf_i+0xbc>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	6820      	ldr	r0, [r4, #0]
 8006278:	1d19      	adds	r1, r3, #4
 800627a:	6029      	str	r1, [r5, #0]
 800627c:	0601      	lsls	r1, r0, #24
 800627e:	d501      	bpl.n	8006284 <_printf_i+0xec>
 8006280:	681e      	ldr	r6, [r3, #0]
 8006282:	e002      	b.n	800628a <_printf_i+0xf2>
 8006284:	0646      	lsls	r6, r0, #25
 8006286:	d5fb      	bpl.n	8006280 <_printf_i+0xe8>
 8006288:	881e      	ldrh	r6, [r3, #0]
 800628a:	4854      	ldr	r0, [pc, #336]	; (80063dc <_printf_i+0x244>)
 800628c:	2f6f      	cmp	r7, #111	; 0x6f
 800628e:	bf0c      	ite	eq
 8006290:	2308      	moveq	r3, #8
 8006292:	230a      	movne	r3, #10
 8006294:	2100      	movs	r1, #0
 8006296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800629a:	6865      	ldr	r5, [r4, #4]
 800629c:	60a5      	str	r5, [r4, #8]
 800629e:	2d00      	cmp	r5, #0
 80062a0:	bfa2      	ittt	ge
 80062a2:	6821      	ldrge	r1, [r4, #0]
 80062a4:	f021 0104 	bicge.w	r1, r1, #4
 80062a8:	6021      	strge	r1, [r4, #0]
 80062aa:	b90e      	cbnz	r6, 80062b0 <_printf_i+0x118>
 80062ac:	2d00      	cmp	r5, #0
 80062ae:	d04d      	beq.n	800634c <_printf_i+0x1b4>
 80062b0:	4615      	mov	r5, r2
 80062b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80062b6:	fb03 6711 	mls	r7, r3, r1, r6
 80062ba:	5dc7      	ldrb	r7, [r0, r7]
 80062bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062c0:	4637      	mov	r7, r6
 80062c2:	42bb      	cmp	r3, r7
 80062c4:	460e      	mov	r6, r1
 80062c6:	d9f4      	bls.n	80062b2 <_printf_i+0x11a>
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10b      	bne.n	80062e4 <_printf_i+0x14c>
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	07de      	lsls	r6, r3, #31
 80062d0:	d508      	bpl.n	80062e4 <_printf_i+0x14c>
 80062d2:	6923      	ldr	r3, [r4, #16]
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	4299      	cmp	r1, r3
 80062d8:	bfde      	ittt	le
 80062da:	2330      	movle	r3, #48	; 0x30
 80062dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062e4:	1b52      	subs	r2, r2, r5
 80062e6:	6122      	str	r2, [r4, #16]
 80062e8:	f8cd a000 	str.w	sl, [sp]
 80062ec:	464b      	mov	r3, r9
 80062ee:	aa03      	add	r2, sp, #12
 80062f0:	4621      	mov	r1, r4
 80062f2:	4640      	mov	r0, r8
 80062f4:	f7ff fee2 	bl	80060bc <_printf_common>
 80062f8:	3001      	adds	r0, #1
 80062fa:	d14c      	bne.n	8006396 <_printf_i+0x1fe>
 80062fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006300:	b004      	add	sp, #16
 8006302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006306:	4835      	ldr	r0, [pc, #212]	; (80063dc <_printf_i+0x244>)
 8006308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800630c:	6829      	ldr	r1, [r5, #0]
 800630e:	6823      	ldr	r3, [r4, #0]
 8006310:	f851 6b04 	ldr.w	r6, [r1], #4
 8006314:	6029      	str	r1, [r5, #0]
 8006316:	061d      	lsls	r5, r3, #24
 8006318:	d514      	bpl.n	8006344 <_printf_i+0x1ac>
 800631a:	07df      	lsls	r7, r3, #31
 800631c:	bf44      	itt	mi
 800631e:	f043 0320 	orrmi.w	r3, r3, #32
 8006322:	6023      	strmi	r3, [r4, #0]
 8006324:	b91e      	cbnz	r6, 800632e <_printf_i+0x196>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	f023 0320 	bic.w	r3, r3, #32
 800632c:	6023      	str	r3, [r4, #0]
 800632e:	2310      	movs	r3, #16
 8006330:	e7b0      	b.n	8006294 <_printf_i+0xfc>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	f043 0320 	orr.w	r3, r3, #32
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	2378      	movs	r3, #120	; 0x78
 800633c:	4828      	ldr	r0, [pc, #160]	; (80063e0 <_printf_i+0x248>)
 800633e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006342:	e7e3      	b.n	800630c <_printf_i+0x174>
 8006344:	0659      	lsls	r1, r3, #25
 8006346:	bf48      	it	mi
 8006348:	b2b6      	uxthmi	r6, r6
 800634a:	e7e6      	b.n	800631a <_printf_i+0x182>
 800634c:	4615      	mov	r5, r2
 800634e:	e7bb      	b.n	80062c8 <_printf_i+0x130>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	6826      	ldr	r6, [r4, #0]
 8006354:	6961      	ldr	r1, [r4, #20]
 8006356:	1d18      	adds	r0, r3, #4
 8006358:	6028      	str	r0, [r5, #0]
 800635a:	0635      	lsls	r5, r6, #24
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	d501      	bpl.n	8006364 <_printf_i+0x1cc>
 8006360:	6019      	str	r1, [r3, #0]
 8006362:	e002      	b.n	800636a <_printf_i+0x1d2>
 8006364:	0670      	lsls	r0, r6, #25
 8006366:	d5fb      	bpl.n	8006360 <_printf_i+0x1c8>
 8006368:	8019      	strh	r1, [r3, #0]
 800636a:	2300      	movs	r3, #0
 800636c:	6123      	str	r3, [r4, #16]
 800636e:	4615      	mov	r5, r2
 8006370:	e7ba      	b.n	80062e8 <_printf_i+0x150>
 8006372:	682b      	ldr	r3, [r5, #0]
 8006374:	1d1a      	adds	r2, r3, #4
 8006376:	602a      	str	r2, [r5, #0]
 8006378:	681d      	ldr	r5, [r3, #0]
 800637a:	6862      	ldr	r2, [r4, #4]
 800637c:	2100      	movs	r1, #0
 800637e:	4628      	mov	r0, r5
 8006380:	f7f9 ffbe 	bl	8000300 <memchr>
 8006384:	b108      	cbz	r0, 800638a <_printf_i+0x1f2>
 8006386:	1b40      	subs	r0, r0, r5
 8006388:	6060      	str	r0, [r4, #4]
 800638a:	6863      	ldr	r3, [r4, #4]
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	2300      	movs	r3, #0
 8006390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006394:	e7a8      	b.n	80062e8 <_printf_i+0x150>
 8006396:	6923      	ldr	r3, [r4, #16]
 8006398:	462a      	mov	r2, r5
 800639a:	4649      	mov	r1, r9
 800639c:	4640      	mov	r0, r8
 800639e:	47d0      	blx	sl
 80063a0:	3001      	adds	r0, #1
 80063a2:	d0ab      	beq.n	80062fc <_printf_i+0x164>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	079b      	lsls	r3, r3, #30
 80063a8:	d413      	bmi.n	80063d2 <_printf_i+0x23a>
 80063aa:	68e0      	ldr	r0, [r4, #12]
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	4298      	cmp	r0, r3
 80063b0:	bfb8      	it	lt
 80063b2:	4618      	movlt	r0, r3
 80063b4:	e7a4      	b.n	8006300 <_printf_i+0x168>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4632      	mov	r2, r6
 80063ba:	4649      	mov	r1, r9
 80063bc:	4640      	mov	r0, r8
 80063be:	47d0      	blx	sl
 80063c0:	3001      	adds	r0, #1
 80063c2:	d09b      	beq.n	80062fc <_printf_i+0x164>
 80063c4:	3501      	adds	r5, #1
 80063c6:	68e3      	ldr	r3, [r4, #12]
 80063c8:	9903      	ldr	r1, [sp, #12]
 80063ca:	1a5b      	subs	r3, r3, r1
 80063cc:	42ab      	cmp	r3, r5
 80063ce:	dcf2      	bgt.n	80063b6 <_printf_i+0x21e>
 80063d0:	e7eb      	b.n	80063aa <_printf_i+0x212>
 80063d2:	2500      	movs	r5, #0
 80063d4:	f104 0619 	add.w	r6, r4, #25
 80063d8:	e7f5      	b.n	80063c6 <_printf_i+0x22e>
 80063da:	bf00      	nop
 80063dc:	080091da 	.word	0x080091da
 80063e0:	080091eb 	.word	0x080091eb

080063e4 <iprintf>:
 80063e4:	b40f      	push	{r0, r1, r2, r3}
 80063e6:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <iprintf+0x2c>)
 80063e8:	b513      	push	{r0, r1, r4, lr}
 80063ea:	681c      	ldr	r4, [r3, #0]
 80063ec:	b124      	cbz	r4, 80063f8 <iprintf+0x14>
 80063ee:	69a3      	ldr	r3, [r4, #24]
 80063f0:	b913      	cbnz	r3, 80063f8 <iprintf+0x14>
 80063f2:	4620      	mov	r0, r4
 80063f4:	f001 f858 	bl	80074a8 <__sinit>
 80063f8:	ab05      	add	r3, sp, #20
 80063fa:	9a04      	ldr	r2, [sp, #16]
 80063fc:	68a1      	ldr	r1, [r4, #8]
 80063fe:	9301      	str	r3, [sp, #4]
 8006400:	4620      	mov	r0, r4
 8006402:	f001 fe15 	bl	8008030 <_vfiprintf_r>
 8006406:	b002      	add	sp, #8
 8006408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800640c:	b004      	add	sp, #16
 800640e:	4770      	bx	lr
 8006410:	24000010 	.word	0x24000010

08006414 <_puts_r>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	460e      	mov	r6, r1
 8006418:	4605      	mov	r5, r0
 800641a:	b118      	cbz	r0, 8006424 <_puts_r+0x10>
 800641c:	6983      	ldr	r3, [r0, #24]
 800641e:	b90b      	cbnz	r3, 8006424 <_puts_r+0x10>
 8006420:	f001 f842 	bl	80074a8 <__sinit>
 8006424:	69ab      	ldr	r3, [r5, #24]
 8006426:	68ac      	ldr	r4, [r5, #8]
 8006428:	b913      	cbnz	r3, 8006430 <_puts_r+0x1c>
 800642a:	4628      	mov	r0, r5
 800642c:	f001 f83c 	bl	80074a8 <__sinit>
 8006430:	4b2c      	ldr	r3, [pc, #176]	; (80064e4 <_puts_r+0xd0>)
 8006432:	429c      	cmp	r4, r3
 8006434:	d120      	bne.n	8006478 <_puts_r+0x64>
 8006436:	686c      	ldr	r4, [r5, #4]
 8006438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643a:	07db      	lsls	r3, r3, #31
 800643c:	d405      	bmi.n	800644a <_puts_r+0x36>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	0598      	lsls	r0, r3, #22
 8006442:	d402      	bmi.n	800644a <_puts_r+0x36>
 8006444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006446:	f001 f8d2 	bl	80075ee <__retarget_lock_acquire_recursive>
 800644a:	89a3      	ldrh	r3, [r4, #12]
 800644c:	0719      	lsls	r1, r3, #28
 800644e:	d51d      	bpl.n	800648c <_puts_r+0x78>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	b1db      	cbz	r3, 800648c <_puts_r+0x78>
 8006454:	3e01      	subs	r6, #1
 8006456:	68a3      	ldr	r3, [r4, #8]
 8006458:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800645c:	3b01      	subs	r3, #1
 800645e:	60a3      	str	r3, [r4, #8]
 8006460:	bb39      	cbnz	r1, 80064b2 <_puts_r+0x9e>
 8006462:	2b00      	cmp	r3, #0
 8006464:	da38      	bge.n	80064d8 <_puts_r+0xc4>
 8006466:	4622      	mov	r2, r4
 8006468:	210a      	movs	r1, #10
 800646a:	4628      	mov	r0, r5
 800646c:	f000 f848 	bl	8006500 <__swbuf_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d011      	beq.n	8006498 <_puts_r+0x84>
 8006474:	250a      	movs	r5, #10
 8006476:	e011      	b.n	800649c <_puts_r+0x88>
 8006478:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <_puts_r+0xd4>)
 800647a:	429c      	cmp	r4, r3
 800647c:	d101      	bne.n	8006482 <_puts_r+0x6e>
 800647e:	68ac      	ldr	r4, [r5, #8]
 8006480:	e7da      	b.n	8006438 <_puts_r+0x24>
 8006482:	4b1a      	ldr	r3, [pc, #104]	; (80064ec <_puts_r+0xd8>)
 8006484:	429c      	cmp	r4, r3
 8006486:	bf08      	it	eq
 8006488:	68ec      	ldreq	r4, [r5, #12]
 800648a:	e7d5      	b.n	8006438 <_puts_r+0x24>
 800648c:	4621      	mov	r1, r4
 800648e:	4628      	mov	r0, r5
 8006490:	f000 f888 	bl	80065a4 <__swsetup_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	d0dd      	beq.n	8006454 <_puts_r+0x40>
 8006498:	f04f 35ff 	mov.w	r5, #4294967295
 800649c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800649e:	07da      	lsls	r2, r3, #31
 80064a0:	d405      	bmi.n	80064ae <_puts_r+0x9a>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	059b      	lsls	r3, r3, #22
 80064a6:	d402      	bmi.n	80064ae <_puts_r+0x9a>
 80064a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064aa:	f001 f8a1 	bl	80075f0 <__retarget_lock_release_recursive>
 80064ae:	4628      	mov	r0, r5
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da04      	bge.n	80064c0 <_puts_r+0xac>
 80064b6:	69a2      	ldr	r2, [r4, #24]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	dc06      	bgt.n	80064ca <_puts_r+0xb6>
 80064bc:	290a      	cmp	r1, #10
 80064be:	d004      	beq.n	80064ca <_puts_r+0xb6>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	1c5a      	adds	r2, r3, #1
 80064c4:	6022      	str	r2, [r4, #0]
 80064c6:	7019      	strb	r1, [r3, #0]
 80064c8:	e7c5      	b.n	8006456 <_puts_r+0x42>
 80064ca:	4622      	mov	r2, r4
 80064cc:	4628      	mov	r0, r5
 80064ce:	f000 f817 	bl	8006500 <__swbuf_r>
 80064d2:	3001      	adds	r0, #1
 80064d4:	d1bf      	bne.n	8006456 <_puts_r+0x42>
 80064d6:	e7df      	b.n	8006498 <_puts_r+0x84>
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	250a      	movs	r5, #10
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	6022      	str	r2, [r4, #0]
 80064e0:	701d      	strb	r5, [r3, #0]
 80064e2:	e7db      	b.n	800649c <_puts_r+0x88>
 80064e4:	080092ac 	.word	0x080092ac
 80064e8:	080092cc 	.word	0x080092cc
 80064ec:	0800928c 	.word	0x0800928c

080064f0 <puts>:
 80064f0:	4b02      	ldr	r3, [pc, #8]	; (80064fc <puts+0xc>)
 80064f2:	4601      	mov	r1, r0
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	f7ff bf8d 	b.w	8006414 <_puts_r>
 80064fa:	bf00      	nop
 80064fc:	24000010 	.word	0x24000010

08006500 <__swbuf_r>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	460e      	mov	r6, r1
 8006504:	4614      	mov	r4, r2
 8006506:	4605      	mov	r5, r0
 8006508:	b118      	cbz	r0, 8006512 <__swbuf_r+0x12>
 800650a:	6983      	ldr	r3, [r0, #24]
 800650c:	b90b      	cbnz	r3, 8006512 <__swbuf_r+0x12>
 800650e:	f000 ffcb 	bl	80074a8 <__sinit>
 8006512:	4b21      	ldr	r3, [pc, #132]	; (8006598 <__swbuf_r+0x98>)
 8006514:	429c      	cmp	r4, r3
 8006516:	d12b      	bne.n	8006570 <__swbuf_r+0x70>
 8006518:	686c      	ldr	r4, [r5, #4]
 800651a:	69a3      	ldr	r3, [r4, #24]
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	071a      	lsls	r2, r3, #28
 8006522:	d52f      	bpl.n	8006584 <__swbuf_r+0x84>
 8006524:	6923      	ldr	r3, [r4, #16]
 8006526:	b36b      	cbz	r3, 8006584 <__swbuf_r+0x84>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	6820      	ldr	r0, [r4, #0]
 800652c:	1ac0      	subs	r0, r0, r3
 800652e:	6963      	ldr	r3, [r4, #20]
 8006530:	b2f6      	uxtb	r6, r6
 8006532:	4283      	cmp	r3, r0
 8006534:	4637      	mov	r7, r6
 8006536:	dc04      	bgt.n	8006542 <__swbuf_r+0x42>
 8006538:	4621      	mov	r1, r4
 800653a:	4628      	mov	r0, r5
 800653c:	f000 ff20 	bl	8007380 <_fflush_r>
 8006540:	bb30      	cbnz	r0, 8006590 <__swbuf_r+0x90>
 8006542:	68a3      	ldr	r3, [r4, #8]
 8006544:	3b01      	subs	r3, #1
 8006546:	60a3      	str	r3, [r4, #8]
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	6022      	str	r2, [r4, #0]
 800654e:	701e      	strb	r6, [r3, #0]
 8006550:	6963      	ldr	r3, [r4, #20]
 8006552:	3001      	adds	r0, #1
 8006554:	4283      	cmp	r3, r0
 8006556:	d004      	beq.n	8006562 <__swbuf_r+0x62>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	07db      	lsls	r3, r3, #31
 800655c:	d506      	bpl.n	800656c <__swbuf_r+0x6c>
 800655e:	2e0a      	cmp	r6, #10
 8006560:	d104      	bne.n	800656c <__swbuf_r+0x6c>
 8006562:	4621      	mov	r1, r4
 8006564:	4628      	mov	r0, r5
 8006566:	f000 ff0b 	bl	8007380 <_fflush_r>
 800656a:	b988      	cbnz	r0, 8006590 <__swbuf_r+0x90>
 800656c:	4638      	mov	r0, r7
 800656e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006570:	4b0a      	ldr	r3, [pc, #40]	; (800659c <__swbuf_r+0x9c>)
 8006572:	429c      	cmp	r4, r3
 8006574:	d101      	bne.n	800657a <__swbuf_r+0x7a>
 8006576:	68ac      	ldr	r4, [r5, #8]
 8006578:	e7cf      	b.n	800651a <__swbuf_r+0x1a>
 800657a:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <__swbuf_r+0xa0>)
 800657c:	429c      	cmp	r4, r3
 800657e:	bf08      	it	eq
 8006580:	68ec      	ldreq	r4, [r5, #12]
 8006582:	e7ca      	b.n	800651a <__swbuf_r+0x1a>
 8006584:	4621      	mov	r1, r4
 8006586:	4628      	mov	r0, r5
 8006588:	f000 f80c 	bl	80065a4 <__swsetup_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	d0cb      	beq.n	8006528 <__swbuf_r+0x28>
 8006590:	f04f 37ff 	mov.w	r7, #4294967295
 8006594:	e7ea      	b.n	800656c <__swbuf_r+0x6c>
 8006596:	bf00      	nop
 8006598:	080092ac 	.word	0x080092ac
 800659c:	080092cc 	.word	0x080092cc
 80065a0:	0800928c 	.word	0x0800928c

080065a4 <__swsetup_r>:
 80065a4:	4b32      	ldr	r3, [pc, #200]	; (8006670 <__swsetup_r+0xcc>)
 80065a6:	b570      	push	{r4, r5, r6, lr}
 80065a8:	681d      	ldr	r5, [r3, #0]
 80065aa:	4606      	mov	r6, r0
 80065ac:	460c      	mov	r4, r1
 80065ae:	b125      	cbz	r5, 80065ba <__swsetup_r+0x16>
 80065b0:	69ab      	ldr	r3, [r5, #24]
 80065b2:	b913      	cbnz	r3, 80065ba <__swsetup_r+0x16>
 80065b4:	4628      	mov	r0, r5
 80065b6:	f000 ff77 	bl	80074a8 <__sinit>
 80065ba:	4b2e      	ldr	r3, [pc, #184]	; (8006674 <__swsetup_r+0xd0>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	d10f      	bne.n	80065e0 <__swsetup_r+0x3c>
 80065c0:	686c      	ldr	r4, [r5, #4]
 80065c2:	89a3      	ldrh	r3, [r4, #12]
 80065c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065c8:	0719      	lsls	r1, r3, #28
 80065ca:	d42c      	bmi.n	8006626 <__swsetup_r+0x82>
 80065cc:	06dd      	lsls	r5, r3, #27
 80065ce:	d411      	bmi.n	80065f4 <__swsetup_r+0x50>
 80065d0:	2309      	movs	r3, #9
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065d8:	81a3      	strh	r3, [r4, #12]
 80065da:	f04f 30ff 	mov.w	r0, #4294967295
 80065de:	e03e      	b.n	800665e <__swsetup_r+0xba>
 80065e0:	4b25      	ldr	r3, [pc, #148]	; (8006678 <__swsetup_r+0xd4>)
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d101      	bne.n	80065ea <__swsetup_r+0x46>
 80065e6:	68ac      	ldr	r4, [r5, #8]
 80065e8:	e7eb      	b.n	80065c2 <__swsetup_r+0x1e>
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <__swsetup_r+0xd8>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	bf08      	it	eq
 80065f0:	68ec      	ldreq	r4, [r5, #12]
 80065f2:	e7e6      	b.n	80065c2 <__swsetup_r+0x1e>
 80065f4:	0758      	lsls	r0, r3, #29
 80065f6:	d512      	bpl.n	800661e <__swsetup_r+0x7a>
 80065f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065fa:	b141      	cbz	r1, 800660e <__swsetup_r+0x6a>
 80065fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006600:	4299      	cmp	r1, r3
 8006602:	d002      	beq.n	800660a <__swsetup_r+0x66>
 8006604:	4630      	mov	r0, r6
 8006606:	f001 fc09 	bl	8007e1c <_free_r>
 800660a:	2300      	movs	r3, #0
 800660c:	6363      	str	r3, [r4, #52]	; 0x34
 800660e:	89a3      	ldrh	r3, [r4, #12]
 8006610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006614:	81a3      	strh	r3, [r4, #12]
 8006616:	2300      	movs	r3, #0
 8006618:	6063      	str	r3, [r4, #4]
 800661a:	6923      	ldr	r3, [r4, #16]
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	f043 0308 	orr.w	r3, r3, #8
 8006624:	81a3      	strh	r3, [r4, #12]
 8006626:	6923      	ldr	r3, [r4, #16]
 8006628:	b94b      	cbnz	r3, 800663e <__swsetup_r+0x9a>
 800662a:	89a3      	ldrh	r3, [r4, #12]
 800662c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006634:	d003      	beq.n	800663e <__swsetup_r+0x9a>
 8006636:	4621      	mov	r1, r4
 8006638:	4630      	mov	r0, r6
 800663a:	f000 ffff 	bl	800763c <__smakebuf_r>
 800663e:	89a0      	ldrh	r0, [r4, #12]
 8006640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006644:	f010 0301 	ands.w	r3, r0, #1
 8006648:	d00a      	beq.n	8006660 <__swsetup_r+0xbc>
 800664a:	2300      	movs	r3, #0
 800664c:	60a3      	str	r3, [r4, #8]
 800664e:	6963      	ldr	r3, [r4, #20]
 8006650:	425b      	negs	r3, r3
 8006652:	61a3      	str	r3, [r4, #24]
 8006654:	6923      	ldr	r3, [r4, #16]
 8006656:	b943      	cbnz	r3, 800666a <__swsetup_r+0xc6>
 8006658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800665c:	d1ba      	bne.n	80065d4 <__swsetup_r+0x30>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	0781      	lsls	r1, r0, #30
 8006662:	bf58      	it	pl
 8006664:	6963      	ldrpl	r3, [r4, #20]
 8006666:	60a3      	str	r3, [r4, #8]
 8006668:	e7f4      	b.n	8006654 <__swsetup_r+0xb0>
 800666a:	2000      	movs	r0, #0
 800666c:	e7f7      	b.n	800665e <__swsetup_r+0xba>
 800666e:	bf00      	nop
 8006670:	24000010 	.word	0x24000010
 8006674:	080092ac 	.word	0x080092ac
 8006678:	080092cc 	.word	0x080092cc
 800667c:	0800928c 	.word	0x0800928c

08006680 <quorem>:
 8006680:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	6903      	ldr	r3, [r0, #16]
 8006686:	690c      	ldr	r4, [r1, #16]
 8006688:	42a3      	cmp	r3, r4
 800668a:	4607      	mov	r7, r0
 800668c:	f2c0 8081 	blt.w	8006792 <quorem+0x112>
 8006690:	3c01      	subs	r4, #1
 8006692:	f101 0814 	add.w	r8, r1, #20
 8006696:	f100 0514 	add.w	r5, r0, #20
 800669a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066a8:	3301      	adds	r3, #1
 80066aa:	429a      	cmp	r2, r3
 80066ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80066b8:	d331      	bcc.n	800671e <quorem+0x9e>
 80066ba:	f04f 0e00 	mov.w	lr, #0
 80066be:	4640      	mov	r0, r8
 80066c0:	46ac      	mov	ip, r5
 80066c2:	46f2      	mov	sl, lr
 80066c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80066c8:	b293      	uxth	r3, r2
 80066ca:	fb06 e303 	mla	r3, r6, r3, lr
 80066ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	ebaa 0303 	sub.w	r3, sl, r3
 80066d8:	f8dc a000 	ldr.w	sl, [ip]
 80066dc:	0c12      	lsrs	r2, r2, #16
 80066de:	fa13 f38a 	uxtah	r3, r3, sl
 80066e2:	fb06 e202 	mla	r2, r6, r2, lr
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	9b00      	ldr	r3, [sp, #0]
 80066ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066ee:	b292      	uxth	r2, r2
 80066f0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f8:	f8bd 3000 	ldrh.w	r3, [sp]
 80066fc:	4581      	cmp	r9, r0
 80066fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006702:	f84c 3b04 	str.w	r3, [ip], #4
 8006706:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800670a:	d2db      	bcs.n	80066c4 <quorem+0x44>
 800670c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006710:	b92b      	cbnz	r3, 800671e <quorem+0x9e>
 8006712:	9b01      	ldr	r3, [sp, #4]
 8006714:	3b04      	subs	r3, #4
 8006716:	429d      	cmp	r5, r3
 8006718:	461a      	mov	r2, r3
 800671a:	d32e      	bcc.n	800677a <quorem+0xfa>
 800671c:	613c      	str	r4, [r7, #16]
 800671e:	4638      	mov	r0, r7
 8006720:	f001 fa64 	bl	8007bec <__mcmp>
 8006724:	2800      	cmp	r0, #0
 8006726:	db24      	blt.n	8006772 <quorem+0xf2>
 8006728:	3601      	adds	r6, #1
 800672a:	4628      	mov	r0, r5
 800672c:	f04f 0c00 	mov.w	ip, #0
 8006730:	f858 2b04 	ldr.w	r2, [r8], #4
 8006734:	f8d0 e000 	ldr.w	lr, [r0]
 8006738:	b293      	uxth	r3, r2
 800673a:	ebac 0303 	sub.w	r3, ip, r3
 800673e:	0c12      	lsrs	r2, r2, #16
 8006740:	fa13 f38e 	uxtah	r3, r3, lr
 8006744:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006748:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800674c:	b29b      	uxth	r3, r3
 800674e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006752:	45c1      	cmp	r9, r8
 8006754:	f840 3b04 	str.w	r3, [r0], #4
 8006758:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800675c:	d2e8      	bcs.n	8006730 <quorem+0xb0>
 800675e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006762:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006766:	b922      	cbnz	r2, 8006772 <quorem+0xf2>
 8006768:	3b04      	subs	r3, #4
 800676a:	429d      	cmp	r5, r3
 800676c:	461a      	mov	r2, r3
 800676e:	d30a      	bcc.n	8006786 <quorem+0x106>
 8006770:	613c      	str	r4, [r7, #16]
 8006772:	4630      	mov	r0, r6
 8006774:	b003      	add	sp, #12
 8006776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	3b04      	subs	r3, #4
 800677e:	2a00      	cmp	r2, #0
 8006780:	d1cc      	bne.n	800671c <quorem+0x9c>
 8006782:	3c01      	subs	r4, #1
 8006784:	e7c7      	b.n	8006716 <quorem+0x96>
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	3b04      	subs	r3, #4
 800678a:	2a00      	cmp	r2, #0
 800678c:	d1f0      	bne.n	8006770 <quorem+0xf0>
 800678e:	3c01      	subs	r4, #1
 8006790:	e7eb      	b.n	800676a <quorem+0xea>
 8006792:	2000      	movs	r0, #0
 8006794:	e7ee      	b.n	8006774 <quorem+0xf4>
	...

08006798 <_dtoa_r>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	ed2d 8b02 	vpush	{d8}
 80067a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067a2:	b091      	sub	sp, #68	; 0x44
 80067a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067a8:	ec59 8b10 	vmov	r8, r9, d0
 80067ac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80067ae:	9106      	str	r1, [sp, #24]
 80067b0:	4606      	mov	r6, r0
 80067b2:	9208      	str	r2, [sp, #32]
 80067b4:	930c      	str	r3, [sp, #48]	; 0x30
 80067b6:	b975      	cbnz	r5, 80067d6 <_dtoa_r+0x3e>
 80067b8:	2010      	movs	r0, #16
 80067ba:	f000 ff7f 	bl	80076bc <malloc>
 80067be:	4602      	mov	r2, r0
 80067c0:	6270      	str	r0, [r6, #36]	; 0x24
 80067c2:	b920      	cbnz	r0, 80067ce <_dtoa_r+0x36>
 80067c4:	4baa      	ldr	r3, [pc, #680]	; (8006a70 <_dtoa_r+0x2d8>)
 80067c6:	21ea      	movs	r1, #234	; 0xea
 80067c8:	48aa      	ldr	r0, [pc, #680]	; (8006a74 <_dtoa_r+0x2dc>)
 80067ca:	f001 fdc7 	bl	800835c <__assert_func>
 80067ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067d2:	6005      	str	r5, [r0, #0]
 80067d4:	60c5      	str	r5, [r0, #12]
 80067d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	b151      	cbz	r1, 80067f2 <_dtoa_r+0x5a>
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	604a      	str	r2, [r1, #4]
 80067e0:	2301      	movs	r3, #1
 80067e2:	4093      	lsls	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
 80067e6:	4630      	mov	r0, r6
 80067e8:	f000 ffbe 	bl	8007768 <_Bfree>
 80067ec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80067ee:	2200      	movs	r2, #0
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	f1b9 0300 	subs.w	r3, r9, #0
 80067f6:	bfbb      	ittet	lt
 80067f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067fc:	9303      	strlt	r3, [sp, #12]
 80067fe:	2300      	movge	r3, #0
 8006800:	2201      	movlt	r2, #1
 8006802:	bfac      	ite	ge
 8006804:	6023      	strge	r3, [r4, #0]
 8006806:	6022      	strlt	r2, [r4, #0]
 8006808:	4b9b      	ldr	r3, [pc, #620]	; (8006a78 <_dtoa_r+0x2e0>)
 800680a:	9c03      	ldr	r4, [sp, #12]
 800680c:	43a3      	bics	r3, r4
 800680e:	d11c      	bne.n	800684a <_dtoa_r+0xb2>
 8006810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006812:	f242 730f 	movw	r3, #9999	; 0x270f
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800681c:	ea53 0308 	orrs.w	r3, r3, r8
 8006820:	f000 84fd 	beq.w	800721e <_dtoa_r+0xa86>
 8006824:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006826:	b963      	cbnz	r3, 8006842 <_dtoa_r+0xaa>
 8006828:	4b94      	ldr	r3, [pc, #592]	; (8006a7c <_dtoa_r+0x2e4>)
 800682a:	e01f      	b.n	800686c <_dtoa_r+0xd4>
 800682c:	4b94      	ldr	r3, [pc, #592]	; (8006a80 <_dtoa_r+0x2e8>)
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	3308      	adds	r3, #8
 8006832:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	9801      	ldr	r0, [sp, #4]
 8006838:	b011      	add	sp, #68	; 0x44
 800683a:	ecbd 8b02 	vpop	{d8}
 800683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006842:	4b8e      	ldr	r3, [pc, #568]	; (8006a7c <_dtoa_r+0x2e4>)
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	3303      	adds	r3, #3
 8006848:	e7f3      	b.n	8006832 <_dtoa_r+0x9a>
 800684a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800684e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006856:	d10b      	bne.n	8006870 <_dtoa_r+0xd8>
 8006858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800685a:	2301      	movs	r3, #1
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 84d9 	beq.w	8007218 <_dtoa_r+0xa80>
 8006866:	4887      	ldr	r0, [pc, #540]	; (8006a84 <_dtoa_r+0x2ec>)
 8006868:	6018      	str	r0, [r3, #0]
 800686a:	1e43      	subs	r3, r0, #1
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	e7e2      	b.n	8006836 <_dtoa_r+0x9e>
 8006870:	a90f      	add	r1, sp, #60	; 0x3c
 8006872:	aa0e      	add	r2, sp, #56	; 0x38
 8006874:	4630      	mov	r0, r6
 8006876:	eeb0 0b48 	vmov.f64	d0, d8
 800687a:	f001 fa5d 	bl	8007d38 <__d2b>
 800687e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8006882:	4605      	mov	r5, r0
 8006884:	980e      	ldr	r0, [sp, #56]	; 0x38
 8006886:	2900      	cmp	r1, #0
 8006888:	d046      	beq.n	8006918 <_dtoa_r+0x180>
 800688a:	ee18 4a90 	vmov	r4, s17
 800688e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006892:	ec53 2b18 	vmov	r2, r3, d8
 8006896:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800689a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800689e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80068a2:	2400      	movs	r4, #0
 80068a4:	ec43 2b16 	vmov	d6, r2, r3
 80068a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80068ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006a58 <_dtoa_r+0x2c0>
 80068b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80068b4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006a60 <_dtoa_r+0x2c8>
 80068b8:	eea7 6b05 	vfma.f64	d6, d7, d5
 80068bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006a68 <_dtoa_r+0x2d0>
 80068c0:	ee07 1a90 	vmov	s15, r1
 80068c4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80068c8:	eeb0 7b46 	vmov.f64	d7, d6
 80068cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 80068d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80068d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80068d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068dc:	ee16 ba90 	vmov	fp, s13
 80068e0:	940a      	str	r4, [sp, #40]	; 0x28
 80068e2:	d508      	bpl.n	80068f6 <_dtoa_r+0x15e>
 80068e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80068e8:	eeb4 6b47 	vcmp.f64	d6, d7
 80068ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f0:	bf18      	it	ne
 80068f2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80068f6:	f1bb 0f16 	cmp.w	fp, #22
 80068fa:	d82f      	bhi.n	800695c <_dtoa_r+0x1c4>
 80068fc:	4b62      	ldr	r3, [pc, #392]	; (8006a88 <_dtoa_r+0x2f0>)
 80068fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006902:	ed93 7b00 	vldr	d7, [r3]
 8006906:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800690a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800690e:	d501      	bpl.n	8006914 <_dtoa_r+0x17c>
 8006910:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006914:	2300      	movs	r3, #0
 8006916:	e022      	b.n	800695e <_dtoa_r+0x1c6>
 8006918:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800691a:	4401      	add	r1, r0
 800691c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006920:	2b20      	cmp	r3, #32
 8006922:	bfc1      	itttt	gt
 8006924:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006928:	fa04 f303 	lslgt.w	r3, r4, r3
 800692c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006930:	fa28 f804 	lsrgt.w	r8, r8, r4
 8006934:	bfd6      	itet	le
 8006936:	f1c3 0320 	rsble	r3, r3, #32
 800693a:	ea43 0808 	orrgt.w	r8, r3, r8
 800693e:	fa08 f803 	lslle.w	r8, r8, r3
 8006942:	ee07 8a90 	vmov	s15, r8
 8006946:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800694a:	3901      	subs	r1, #1
 800694c:	ee17 4a90 	vmov	r4, s15
 8006950:	ec53 2b17 	vmov	r2, r3, d7
 8006954:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006958:	2401      	movs	r4, #1
 800695a:	e7a3      	b.n	80068a4 <_dtoa_r+0x10c>
 800695c:	2301      	movs	r3, #1
 800695e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006960:	1a43      	subs	r3, r0, r1
 8006962:	1e5a      	subs	r2, r3, #1
 8006964:	bf45      	ittet	mi
 8006966:	f1c3 0301 	rsbmi	r3, r3, #1
 800696a:	9304      	strmi	r3, [sp, #16]
 800696c:	2300      	movpl	r3, #0
 800696e:	2300      	movmi	r3, #0
 8006970:	9205      	str	r2, [sp, #20]
 8006972:	bf54      	ite	pl
 8006974:	9304      	strpl	r3, [sp, #16]
 8006976:	9305      	strmi	r3, [sp, #20]
 8006978:	f1bb 0f00 	cmp.w	fp, #0
 800697c:	db18      	blt.n	80069b0 <_dtoa_r+0x218>
 800697e:	9b05      	ldr	r3, [sp, #20]
 8006980:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006984:	445b      	add	r3, fp
 8006986:	9305      	str	r3, [sp, #20]
 8006988:	2300      	movs	r3, #0
 800698a:	9a06      	ldr	r2, [sp, #24]
 800698c:	2a09      	cmp	r2, #9
 800698e:	d849      	bhi.n	8006a24 <_dtoa_r+0x28c>
 8006990:	2a05      	cmp	r2, #5
 8006992:	bfc4      	itt	gt
 8006994:	3a04      	subgt	r2, #4
 8006996:	9206      	strgt	r2, [sp, #24]
 8006998:	9a06      	ldr	r2, [sp, #24]
 800699a:	f1a2 0202 	sub.w	r2, r2, #2
 800699e:	bfcc      	ite	gt
 80069a0:	2400      	movgt	r4, #0
 80069a2:	2401      	movle	r4, #1
 80069a4:	2a03      	cmp	r2, #3
 80069a6:	d848      	bhi.n	8006a3a <_dtoa_r+0x2a2>
 80069a8:	e8df f002 	tbb	[pc, r2]
 80069ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80069b0:	9b04      	ldr	r3, [sp, #16]
 80069b2:	2200      	movs	r2, #0
 80069b4:	eba3 030b 	sub.w	r3, r3, fp
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	9209      	str	r2, [sp, #36]	; 0x24
 80069bc:	f1cb 0300 	rsb	r3, fp, #0
 80069c0:	e7e3      	b.n	800698a <_dtoa_r+0x1f2>
 80069c2:	2200      	movs	r2, #0
 80069c4:	9207      	str	r2, [sp, #28]
 80069c6:	9a08      	ldr	r2, [sp, #32]
 80069c8:	2a00      	cmp	r2, #0
 80069ca:	dc39      	bgt.n	8006a40 <_dtoa_r+0x2a8>
 80069cc:	f04f 0a01 	mov.w	sl, #1
 80069d0:	46d1      	mov	r9, sl
 80069d2:	4652      	mov	r2, sl
 80069d4:	f8cd a020 	str.w	sl, [sp, #32]
 80069d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80069da:	2100      	movs	r1, #0
 80069dc:	6079      	str	r1, [r7, #4]
 80069de:	2004      	movs	r0, #4
 80069e0:	f100 0c14 	add.w	ip, r0, #20
 80069e4:	4594      	cmp	ip, r2
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	d92f      	bls.n	8006a4a <_dtoa_r+0x2b2>
 80069ea:	4630      	mov	r0, r6
 80069ec:	930d      	str	r3, [sp, #52]	; 0x34
 80069ee:	f000 fe7b 	bl	80076e8 <_Balloc>
 80069f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f4:	9001      	str	r0, [sp, #4]
 80069f6:	4602      	mov	r2, r0
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d149      	bne.n	8006a90 <_dtoa_r+0x2f8>
 80069fc:	4b23      	ldr	r3, [pc, #140]	; (8006a8c <_dtoa_r+0x2f4>)
 80069fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a02:	e6e1      	b.n	80067c8 <_dtoa_r+0x30>
 8006a04:	2201      	movs	r2, #1
 8006a06:	e7dd      	b.n	80069c4 <_dtoa_r+0x22c>
 8006a08:	2200      	movs	r2, #0
 8006a0a:	9207      	str	r2, [sp, #28]
 8006a0c:	9a08      	ldr	r2, [sp, #32]
 8006a0e:	eb0b 0a02 	add.w	sl, fp, r2
 8006a12:	f10a 0901 	add.w	r9, sl, #1
 8006a16:	464a      	mov	r2, r9
 8006a18:	2a01      	cmp	r2, #1
 8006a1a:	bfb8      	it	lt
 8006a1c:	2201      	movlt	r2, #1
 8006a1e:	e7db      	b.n	80069d8 <_dtoa_r+0x240>
 8006a20:	2201      	movs	r2, #1
 8006a22:	e7f2      	b.n	8006a0a <_dtoa_r+0x272>
 8006a24:	2401      	movs	r4, #1
 8006a26:	2200      	movs	r2, #0
 8006a28:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006a2c:	f04f 3aff 	mov.w	sl, #4294967295
 8006a30:	2100      	movs	r1, #0
 8006a32:	46d1      	mov	r9, sl
 8006a34:	2212      	movs	r2, #18
 8006a36:	9108      	str	r1, [sp, #32]
 8006a38:	e7ce      	b.n	80069d8 <_dtoa_r+0x240>
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	9207      	str	r2, [sp, #28]
 8006a3e:	e7f5      	b.n	8006a2c <_dtoa_r+0x294>
 8006a40:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a44:	46d1      	mov	r9, sl
 8006a46:	4652      	mov	r2, sl
 8006a48:	e7c6      	b.n	80069d8 <_dtoa_r+0x240>
 8006a4a:	3101      	adds	r1, #1
 8006a4c:	6079      	str	r1, [r7, #4]
 8006a4e:	0040      	lsls	r0, r0, #1
 8006a50:	e7c6      	b.n	80069e0 <_dtoa_r+0x248>
 8006a52:	bf00      	nop
 8006a54:	f3af 8000 	nop.w
 8006a58:	636f4361 	.word	0x636f4361
 8006a5c:	3fd287a7 	.word	0x3fd287a7
 8006a60:	8b60c8b3 	.word	0x8b60c8b3
 8006a64:	3fc68a28 	.word	0x3fc68a28
 8006a68:	509f79fb 	.word	0x509f79fb
 8006a6c:	3fd34413 	.word	0x3fd34413
 8006a70:	08009209 	.word	0x08009209
 8006a74:	08009220 	.word	0x08009220
 8006a78:	7ff00000 	.word	0x7ff00000
 8006a7c:	08009205 	.word	0x08009205
 8006a80:	080091fc 	.word	0x080091fc
 8006a84:	080091d9 	.word	0x080091d9
 8006a88:	08009370 	.word	0x08009370
 8006a8c:	0800927b 	.word	0x0800927b
 8006a90:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006a92:	9901      	ldr	r1, [sp, #4]
 8006a94:	6011      	str	r1, [r2, #0]
 8006a96:	f1b9 0f0e 	cmp.w	r9, #14
 8006a9a:	d86c      	bhi.n	8006b76 <_dtoa_r+0x3de>
 8006a9c:	2c00      	cmp	r4, #0
 8006a9e:	d06a      	beq.n	8006b76 <_dtoa_r+0x3de>
 8006aa0:	f1bb 0f00 	cmp.w	fp, #0
 8006aa4:	f340 80a0 	ble.w	8006be8 <_dtoa_r+0x450>
 8006aa8:	49c1      	ldr	r1, [pc, #772]	; (8006db0 <_dtoa_r+0x618>)
 8006aaa:	f00b 020f 	and.w	r2, fp, #15
 8006aae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006ab2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ab6:	ed92 7b00 	vldr	d7, [r2]
 8006aba:	ea4f 112b 	mov.w	r1, fp, asr #4
 8006abe:	f000 8087 	beq.w	8006bd0 <_dtoa_r+0x438>
 8006ac2:	4abc      	ldr	r2, [pc, #752]	; (8006db4 <_dtoa_r+0x61c>)
 8006ac4:	ed92 6b08 	vldr	d6, [r2, #32]
 8006ac8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006acc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006ad0:	f001 010f 	and.w	r1, r1, #15
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	48b7      	ldr	r0, [pc, #732]	; (8006db4 <_dtoa_r+0x61c>)
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d17b      	bne.n	8006bd4 <_dtoa_r+0x43c>
 8006adc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006ae0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006ae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ae8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006aea:	2900      	cmp	r1, #0
 8006aec:	f000 80a2 	beq.w	8006c34 <_dtoa_r+0x49c>
 8006af0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006af4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006af8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b00:	f140 8098 	bpl.w	8006c34 <_dtoa_r+0x49c>
 8006b04:	f1b9 0f00 	cmp.w	r9, #0
 8006b08:	f000 8094 	beq.w	8006c34 <_dtoa_r+0x49c>
 8006b0c:	f1ba 0f00 	cmp.w	sl, #0
 8006b10:	dd2f      	ble.n	8006b72 <_dtoa_r+0x3da>
 8006b12:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006b16:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006b1a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006b1e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006b22:	3201      	adds	r2, #1
 8006b24:	4650      	mov	r0, sl
 8006b26:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b2a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006b2e:	ee07 2a90 	vmov	s15, r2
 8006b32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b36:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006b3a:	ee15 4a90 	vmov	r4, s11
 8006b3e:	ec52 1b15 	vmov	r1, r2, d5
 8006b42:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006b46:	2800      	cmp	r0, #0
 8006b48:	d177      	bne.n	8006c3a <_dtoa_r+0x4a2>
 8006b4a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006b4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b52:	ec42 1b17 	vmov	d7, r1, r2
 8006b56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b5e:	f300 8263 	bgt.w	8007028 <_dtoa_r+0x890>
 8006b62:	eeb1 7b47 	vneg.f64	d7, d7
 8006b66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b6e:	f100 8258 	bmi.w	8007022 <_dtoa_r+0x88a>
 8006b72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	f2c0 811d 	blt.w	8006db8 <_dtoa_r+0x620>
 8006b7e:	f1bb 0f0e 	cmp.w	fp, #14
 8006b82:	f300 8119 	bgt.w	8006db8 <_dtoa_r+0x620>
 8006b86:	4b8a      	ldr	r3, [pc, #552]	; (8006db0 <_dtoa_r+0x618>)
 8006b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b8c:	ed93 6b00 	vldr	d6, [r3]
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f280 80b7 	bge.w	8006d06 <_dtoa_r+0x56e>
 8006b98:	f1b9 0f00 	cmp.w	r9, #0
 8006b9c:	f300 80b3 	bgt.w	8006d06 <_dtoa_r+0x56e>
 8006ba0:	f040 823f 	bne.w	8007022 <_dtoa_r+0x88a>
 8006ba4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006ba8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006bac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bb0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	464c      	mov	r4, r9
 8006bba:	464f      	mov	r7, r9
 8006bbc:	f280 8215 	bge.w	8006fea <_dtoa_r+0x852>
 8006bc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006bc4:	2331      	movs	r3, #49	; 0x31
 8006bc6:	f808 3b01 	strb.w	r3, [r8], #1
 8006bca:	f10b 0b01 	add.w	fp, fp, #1
 8006bce:	e211      	b.n	8006ff4 <_dtoa_r+0x85c>
 8006bd0:	2202      	movs	r2, #2
 8006bd2:	e780      	b.n	8006ad6 <_dtoa_r+0x33e>
 8006bd4:	07cc      	lsls	r4, r1, #31
 8006bd6:	d504      	bpl.n	8006be2 <_dtoa_r+0x44a>
 8006bd8:	ed90 6b00 	vldr	d6, [r0]
 8006bdc:	3201      	adds	r2, #1
 8006bde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006be2:	1049      	asrs	r1, r1, #1
 8006be4:	3008      	adds	r0, #8
 8006be6:	e777      	b.n	8006ad8 <_dtoa_r+0x340>
 8006be8:	d022      	beq.n	8006c30 <_dtoa_r+0x498>
 8006bea:	f1cb 0100 	rsb	r1, fp, #0
 8006bee:	4a70      	ldr	r2, [pc, #448]	; (8006db0 <_dtoa_r+0x618>)
 8006bf0:	f001 000f 	and.w	r0, r1, #15
 8006bf4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006bf8:	ed92 7b00 	vldr	d7, [r2]
 8006bfc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006c00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c04:	486b      	ldr	r0, [pc, #428]	; (8006db4 <_dtoa_r+0x61c>)
 8006c06:	1109      	asrs	r1, r1, #4
 8006c08:	2400      	movs	r4, #0
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	b929      	cbnz	r1, 8006c1a <_dtoa_r+0x482>
 8006c0e:	2c00      	cmp	r4, #0
 8006c10:	f43f af6a 	beq.w	8006ae8 <_dtoa_r+0x350>
 8006c14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c18:	e766      	b.n	8006ae8 <_dtoa_r+0x350>
 8006c1a:	07cf      	lsls	r7, r1, #31
 8006c1c:	d505      	bpl.n	8006c2a <_dtoa_r+0x492>
 8006c1e:	ed90 6b00 	vldr	d6, [r0]
 8006c22:	3201      	adds	r2, #1
 8006c24:	2401      	movs	r4, #1
 8006c26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c2a:	1049      	asrs	r1, r1, #1
 8006c2c:	3008      	adds	r0, #8
 8006c2e:	e7ed      	b.n	8006c0c <_dtoa_r+0x474>
 8006c30:	2202      	movs	r2, #2
 8006c32:	e759      	b.n	8006ae8 <_dtoa_r+0x350>
 8006c34:	465f      	mov	r7, fp
 8006c36:	4648      	mov	r0, r9
 8006c38:	e775      	b.n	8006b26 <_dtoa_r+0x38e>
 8006c3a:	ec42 1b17 	vmov	d7, r1, r2
 8006c3e:	4a5c      	ldr	r2, [pc, #368]	; (8006db0 <_dtoa_r+0x618>)
 8006c40:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006c44:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006c48:	9a01      	ldr	r2, [sp, #4]
 8006c4a:	1814      	adds	r4, r2, r0
 8006c4c:	9a07      	ldr	r2, [sp, #28]
 8006c4e:	b352      	cbz	r2, 8006ca6 <_dtoa_r+0x50e>
 8006c50:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006c54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006c58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c5c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006c60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006c64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006c68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006c6c:	ee14 2a90 	vmov	r2, s9
 8006c70:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006c74:	3230      	adds	r2, #48	; 0x30
 8006c76:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006c7a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c82:	f808 2b01 	strb.w	r2, [r8], #1
 8006c86:	d439      	bmi.n	8006cfc <_dtoa_r+0x564>
 8006c88:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006c8c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c94:	d472      	bmi.n	8006d7c <_dtoa_r+0x5e4>
 8006c96:	45a0      	cmp	r8, r4
 8006c98:	f43f af6b 	beq.w	8006b72 <_dtoa_r+0x3da>
 8006c9c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006ca0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006ca4:	e7e0      	b.n	8006c68 <_dtoa_r+0x4d0>
 8006ca6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006caa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006cae:	4621      	mov	r1, r4
 8006cb0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006cb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006cb8:	ee14 2a90 	vmov	r2, s9
 8006cbc:	3230      	adds	r2, #48	; 0x30
 8006cbe:	f808 2b01 	strb.w	r2, [r8], #1
 8006cc2:	45a0      	cmp	r8, r4
 8006cc4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006cc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006ccc:	d118      	bne.n	8006d00 <_dtoa_r+0x568>
 8006cce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006cd2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006cd6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cde:	dc4d      	bgt.n	8006d7c <_dtoa_r+0x5e4>
 8006ce0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ce4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cec:	f57f af41 	bpl.w	8006b72 <_dtoa_r+0x3da>
 8006cf0:	4688      	mov	r8, r1
 8006cf2:	3901      	subs	r1, #1
 8006cf4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006cf8:	2b30      	cmp	r3, #48	; 0x30
 8006cfa:	d0f9      	beq.n	8006cf0 <_dtoa_r+0x558>
 8006cfc:	46bb      	mov	fp, r7
 8006cfe:	e02a      	b.n	8006d56 <_dtoa_r+0x5be>
 8006d00:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006d04:	e7d6      	b.n	8006cb4 <_dtoa_r+0x51c>
 8006d06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006d0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006d0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d12:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006d16:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006d1a:	ee15 3a10 	vmov	r3, s10
 8006d1e:	3330      	adds	r3, #48	; 0x30
 8006d20:	f808 3b01 	strb.w	r3, [r8], #1
 8006d24:	9b01      	ldr	r3, [sp, #4]
 8006d26:	eba8 0303 	sub.w	r3, r8, r3
 8006d2a:	4599      	cmp	r9, r3
 8006d2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006d30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006d34:	d133      	bne.n	8006d9e <_dtoa_r+0x606>
 8006d36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006d3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d42:	dc1a      	bgt.n	8006d7a <_dtoa_r+0x5e2>
 8006d44:	eeb4 7b46 	vcmp.f64	d7, d6
 8006d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4c:	d103      	bne.n	8006d56 <_dtoa_r+0x5be>
 8006d4e:	ee15 3a10 	vmov	r3, s10
 8006d52:	07d9      	lsls	r1, r3, #31
 8006d54:	d411      	bmi.n	8006d7a <_dtoa_r+0x5e2>
 8006d56:	4629      	mov	r1, r5
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f000 fd05 	bl	8007768 <_Bfree>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d62:	f888 3000 	strb.w	r3, [r8]
 8006d66:	f10b 0301 	add.w	r3, fp, #1
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f43f ad61 	beq.w	8006836 <_dtoa_r+0x9e>
 8006d74:	f8c3 8000 	str.w	r8, [r3]
 8006d78:	e55d      	b.n	8006836 <_dtoa_r+0x9e>
 8006d7a:	465f      	mov	r7, fp
 8006d7c:	4643      	mov	r3, r8
 8006d7e:	4698      	mov	r8, r3
 8006d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d84:	2a39      	cmp	r2, #57	; 0x39
 8006d86:	d106      	bne.n	8006d96 <_dtoa_r+0x5fe>
 8006d88:	9a01      	ldr	r2, [sp, #4]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d1f7      	bne.n	8006d7e <_dtoa_r+0x5e6>
 8006d8e:	9901      	ldr	r1, [sp, #4]
 8006d90:	2230      	movs	r2, #48	; 0x30
 8006d92:	3701      	adds	r7, #1
 8006d94:	700a      	strb	r2, [r1, #0]
 8006d96:	781a      	ldrb	r2, [r3, #0]
 8006d98:	3201      	adds	r2, #1
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e7ae      	b.n	8006cfc <_dtoa_r+0x564>
 8006d9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006da2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006daa:	d1b2      	bne.n	8006d12 <_dtoa_r+0x57a>
 8006dac:	e7d3      	b.n	8006d56 <_dtoa_r+0x5be>
 8006dae:	bf00      	nop
 8006db0:	08009370 	.word	0x08009370
 8006db4:	08009348 	.word	0x08009348
 8006db8:	9907      	ldr	r1, [sp, #28]
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	f000 80d0 	beq.w	8006f60 <_dtoa_r+0x7c8>
 8006dc0:	9906      	ldr	r1, [sp, #24]
 8006dc2:	2901      	cmp	r1, #1
 8006dc4:	f300 80b4 	bgt.w	8006f30 <_dtoa_r+0x798>
 8006dc8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	f000 80ac 	beq.w	8006f28 <_dtoa_r+0x790>
 8006dd0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006dd4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006dd8:	461c      	mov	r4, r3
 8006dda:	930a      	str	r3, [sp, #40]	; 0x28
 8006ddc:	9b04      	ldr	r3, [sp, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	9304      	str	r3, [sp, #16]
 8006de2:	9b05      	ldr	r3, [sp, #20]
 8006de4:	2101      	movs	r1, #1
 8006de6:	4413      	add	r3, r2
 8006de8:	4630      	mov	r0, r6
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	f000 fd74 	bl	80078d8 <__i2b>
 8006df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df2:	4607      	mov	r7, r0
 8006df4:	f1b8 0f00 	cmp.w	r8, #0
 8006df8:	dd0d      	ble.n	8006e16 <_dtoa_r+0x67e>
 8006dfa:	9a05      	ldr	r2, [sp, #20]
 8006dfc:	2a00      	cmp	r2, #0
 8006dfe:	dd0a      	ble.n	8006e16 <_dtoa_r+0x67e>
 8006e00:	4542      	cmp	r2, r8
 8006e02:	9904      	ldr	r1, [sp, #16]
 8006e04:	bfa8      	it	ge
 8006e06:	4642      	movge	r2, r8
 8006e08:	1a89      	subs	r1, r1, r2
 8006e0a:	9104      	str	r1, [sp, #16]
 8006e0c:	9905      	ldr	r1, [sp, #20]
 8006e0e:	eba8 0802 	sub.w	r8, r8, r2
 8006e12:	1a8a      	subs	r2, r1, r2
 8006e14:	9205      	str	r2, [sp, #20]
 8006e16:	b303      	cbz	r3, 8006e5a <_dtoa_r+0x6c2>
 8006e18:	9a07      	ldr	r2, [sp, #28]
 8006e1a:	2a00      	cmp	r2, #0
 8006e1c:	f000 80a5 	beq.w	8006f6a <_dtoa_r+0x7d2>
 8006e20:	2c00      	cmp	r4, #0
 8006e22:	dd13      	ble.n	8006e4c <_dtoa_r+0x6b4>
 8006e24:	4639      	mov	r1, r7
 8006e26:	4622      	mov	r2, r4
 8006e28:	4630      	mov	r0, r6
 8006e2a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e2c:	f000 fe14 	bl	8007a58 <__pow5mult>
 8006e30:	462a      	mov	r2, r5
 8006e32:	4601      	mov	r1, r0
 8006e34:	4607      	mov	r7, r0
 8006e36:	4630      	mov	r0, r6
 8006e38:	f000 fd64 	bl	8007904 <__multiply>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	900a      	str	r0, [sp, #40]	; 0x28
 8006e40:	4630      	mov	r0, r6
 8006e42:	f000 fc91 	bl	8007768 <_Bfree>
 8006e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e4a:	4615      	mov	r5, r2
 8006e4c:	1b1a      	subs	r2, r3, r4
 8006e4e:	d004      	beq.n	8006e5a <_dtoa_r+0x6c2>
 8006e50:	4629      	mov	r1, r5
 8006e52:	4630      	mov	r0, r6
 8006e54:	f000 fe00 	bl	8007a58 <__pow5mult>
 8006e58:	4605      	mov	r5, r0
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f000 fd3b 	bl	80078d8 <__i2b>
 8006e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	4604      	mov	r4, r0
 8006e68:	f340 8081 	ble.w	8006f6e <_dtoa_r+0x7d6>
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4601      	mov	r1, r0
 8006e70:	4630      	mov	r0, r6
 8006e72:	f000 fdf1 	bl	8007a58 <__pow5mult>
 8006e76:	9b06      	ldr	r3, [sp, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	dd7a      	ble.n	8006f74 <_dtoa_r+0x7dc>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	930a      	str	r3, [sp, #40]	; 0x28
 8006e82:	6922      	ldr	r2, [r4, #16]
 8006e84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006e88:	6910      	ldr	r0, [r2, #16]
 8006e8a:	f000 fcd5 	bl	8007838 <__hi0bits>
 8006e8e:	f1c0 0020 	rsb	r0, r0, #32
 8006e92:	9b05      	ldr	r3, [sp, #20]
 8006e94:	4418      	add	r0, r3
 8006e96:	f010 001f 	ands.w	r0, r0, #31
 8006e9a:	f000 808c 	beq.w	8006fb6 <_dtoa_r+0x81e>
 8006e9e:	f1c0 0220 	rsb	r2, r0, #32
 8006ea2:	2a04      	cmp	r2, #4
 8006ea4:	f340 8085 	ble.w	8006fb2 <_dtoa_r+0x81a>
 8006ea8:	f1c0 001c 	rsb	r0, r0, #28
 8006eac:	9b04      	ldr	r3, [sp, #16]
 8006eae:	4403      	add	r3, r0
 8006eb0:	9304      	str	r3, [sp, #16]
 8006eb2:	9b05      	ldr	r3, [sp, #20]
 8006eb4:	4403      	add	r3, r0
 8006eb6:	4480      	add	r8, r0
 8006eb8:	9305      	str	r3, [sp, #20]
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dd05      	ble.n	8006ecc <_dtoa_r+0x734>
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f000 fe21 	bl	8007b0c <__lshift>
 8006eca:	4605      	mov	r5, r0
 8006ecc:	9b05      	ldr	r3, [sp, #20]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	dd05      	ble.n	8006ede <_dtoa_r+0x746>
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f000 fe18 	bl	8007b0c <__lshift>
 8006edc:	4604      	mov	r4, r0
 8006ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d06a      	beq.n	8006fba <_dtoa_r+0x822>
 8006ee4:	4621      	mov	r1, r4
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	f000 fe80 	bl	8007bec <__mcmp>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	da64      	bge.n	8006fba <_dtoa_r+0x822>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	220a      	movs	r2, #10
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 fc58 	bl	80077ac <__multadd>
 8006efc:	9b07      	ldr	r3, [sp, #28]
 8006efe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f02:	4605      	mov	r5, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 8191 	beq.w	800722c <_dtoa_r+0xa94>
 8006f0a:	4639      	mov	r1, r7
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	220a      	movs	r2, #10
 8006f10:	4630      	mov	r0, r6
 8006f12:	f000 fc4b 	bl	80077ac <__multadd>
 8006f16:	f1ba 0f00 	cmp.w	sl, #0
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	f300 808d 	bgt.w	800703a <_dtoa_r+0x8a2>
 8006f20:	9b06      	ldr	r3, [sp, #24]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	dc50      	bgt.n	8006fc8 <_dtoa_r+0x830>
 8006f26:	e088      	b.n	800703a <_dtoa_r+0x8a2>
 8006f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f2a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f2e:	e751      	b.n	8006dd4 <_dtoa_r+0x63c>
 8006f30:	f109 34ff 	add.w	r4, r9, #4294967295
 8006f34:	42a3      	cmp	r3, r4
 8006f36:	bfbf      	itttt	lt
 8006f38:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006f3a:	1ae3      	sublt	r3, r4, r3
 8006f3c:	18d2      	addlt	r2, r2, r3
 8006f3e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006f40:	bfb6      	itet	lt
 8006f42:	4623      	movlt	r3, r4
 8006f44:	1b1c      	subge	r4, r3, r4
 8006f46:	2400      	movlt	r4, #0
 8006f48:	f1b9 0f00 	cmp.w	r9, #0
 8006f4c:	bfb5      	itete	lt
 8006f4e:	9a04      	ldrlt	r2, [sp, #16]
 8006f50:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006f54:	eba2 0809 	sublt.w	r8, r2, r9
 8006f58:	464a      	movge	r2, r9
 8006f5a:	bfb8      	it	lt
 8006f5c:	2200      	movlt	r2, #0
 8006f5e:	e73c      	b.n	8006dda <_dtoa_r+0x642>
 8006f60:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006f64:	9f07      	ldr	r7, [sp, #28]
 8006f66:	461c      	mov	r4, r3
 8006f68:	e744      	b.n	8006df4 <_dtoa_r+0x65c>
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	e770      	b.n	8006e50 <_dtoa_r+0x6b8>
 8006f6e:	9b06      	ldr	r3, [sp, #24]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	dc18      	bgt.n	8006fa6 <_dtoa_r+0x80e>
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	b9b3      	cbnz	r3, 8006fa6 <_dtoa_r+0x80e>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006f7e:	b9a2      	cbnz	r2, 8006faa <_dtoa_r+0x812>
 8006f80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f84:	0d12      	lsrs	r2, r2, #20
 8006f86:	0512      	lsls	r2, r2, #20
 8006f88:	b18a      	cbz	r2, 8006fae <_dtoa_r+0x816>
 8006f8a:	9b04      	ldr	r3, [sp, #16]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	9b05      	ldr	r3, [sp, #20]
 8006f92:	3301      	adds	r3, #1
 8006f94:	9305      	str	r3, [sp, #20]
 8006f96:	2301      	movs	r3, #1
 8006f98:	930a      	str	r3, [sp, #40]	; 0x28
 8006f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f47f af70 	bne.w	8006e82 <_dtoa_r+0x6ea>
 8006fa2:	2001      	movs	r0, #1
 8006fa4:	e775      	b.n	8006e92 <_dtoa_r+0x6fa>
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e7f6      	b.n	8006f98 <_dtoa_r+0x800>
 8006faa:	9b02      	ldr	r3, [sp, #8]
 8006fac:	e7f4      	b.n	8006f98 <_dtoa_r+0x800>
 8006fae:	920a      	str	r2, [sp, #40]	; 0x28
 8006fb0:	e7f3      	b.n	8006f9a <_dtoa_r+0x802>
 8006fb2:	d082      	beq.n	8006eba <_dtoa_r+0x722>
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	301c      	adds	r0, #28
 8006fb8:	e778      	b.n	8006eac <_dtoa_r+0x714>
 8006fba:	f1b9 0f00 	cmp.w	r9, #0
 8006fbe:	dc37      	bgt.n	8007030 <_dtoa_r+0x898>
 8006fc0:	9b06      	ldr	r3, [sp, #24]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	dd34      	ble.n	8007030 <_dtoa_r+0x898>
 8006fc6:	46ca      	mov	sl, r9
 8006fc8:	f1ba 0f00 	cmp.w	sl, #0
 8006fcc:	d10d      	bne.n	8006fea <_dtoa_r+0x852>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4653      	mov	r3, sl
 8006fd2:	2205      	movs	r2, #5
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	f000 fbe9 	bl	80077ac <__multadd>
 8006fda:	4601      	mov	r1, r0
 8006fdc:	4604      	mov	r4, r0
 8006fde:	4628      	mov	r0, r5
 8006fe0:	f000 fe04 	bl	8007bec <__mcmp>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	f73f adeb 	bgt.w	8006bc0 <_dtoa_r+0x428>
 8006fea:	9b08      	ldr	r3, [sp, #32]
 8006fec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ff0:	ea6f 0b03 	mvn.w	fp, r3
 8006ff4:	f04f 0900 	mov.w	r9, #0
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 fbb4 	bl	8007768 <_Bfree>
 8007000:	2f00      	cmp	r7, #0
 8007002:	f43f aea8 	beq.w	8006d56 <_dtoa_r+0x5be>
 8007006:	f1b9 0f00 	cmp.w	r9, #0
 800700a:	d005      	beq.n	8007018 <_dtoa_r+0x880>
 800700c:	45b9      	cmp	r9, r7
 800700e:	d003      	beq.n	8007018 <_dtoa_r+0x880>
 8007010:	4649      	mov	r1, r9
 8007012:	4630      	mov	r0, r6
 8007014:	f000 fba8 	bl	8007768 <_Bfree>
 8007018:	4639      	mov	r1, r7
 800701a:	4630      	mov	r0, r6
 800701c:	f000 fba4 	bl	8007768 <_Bfree>
 8007020:	e699      	b.n	8006d56 <_dtoa_r+0x5be>
 8007022:	2400      	movs	r4, #0
 8007024:	4627      	mov	r7, r4
 8007026:	e7e0      	b.n	8006fea <_dtoa_r+0x852>
 8007028:	46bb      	mov	fp, r7
 800702a:	4604      	mov	r4, r0
 800702c:	4607      	mov	r7, r0
 800702e:	e5c7      	b.n	8006bc0 <_dtoa_r+0x428>
 8007030:	9b07      	ldr	r3, [sp, #28]
 8007032:	46ca      	mov	sl, r9
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8100 	beq.w	800723a <_dtoa_r+0xaa2>
 800703a:	f1b8 0f00 	cmp.w	r8, #0
 800703e:	dd05      	ble.n	800704c <_dtoa_r+0x8b4>
 8007040:	4639      	mov	r1, r7
 8007042:	4642      	mov	r2, r8
 8007044:	4630      	mov	r0, r6
 8007046:	f000 fd61 	bl	8007b0c <__lshift>
 800704a:	4607      	mov	r7, r0
 800704c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704e:	2b00      	cmp	r3, #0
 8007050:	d05d      	beq.n	800710e <_dtoa_r+0x976>
 8007052:	6879      	ldr	r1, [r7, #4]
 8007054:	4630      	mov	r0, r6
 8007056:	f000 fb47 	bl	80076e8 <_Balloc>
 800705a:	4680      	mov	r8, r0
 800705c:	b928      	cbnz	r0, 800706a <_dtoa_r+0x8d2>
 800705e:	4b82      	ldr	r3, [pc, #520]	; (8007268 <_dtoa_r+0xad0>)
 8007060:	4602      	mov	r2, r0
 8007062:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007066:	f7ff bbaf 	b.w	80067c8 <_dtoa_r+0x30>
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	3202      	adds	r2, #2
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	f107 010c 	add.w	r1, r7, #12
 8007074:	300c      	adds	r0, #12
 8007076:	f000 fb29 	bl	80076cc <memcpy>
 800707a:	2201      	movs	r2, #1
 800707c:	4641      	mov	r1, r8
 800707e:	4630      	mov	r0, r6
 8007080:	f000 fd44 	bl	8007b0c <__lshift>
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	3301      	adds	r3, #1
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	9b01      	ldr	r3, [sp, #4]
 800708c:	4453      	add	r3, sl
 800708e:	9308      	str	r3, [sp, #32]
 8007090:	9b02      	ldr	r3, [sp, #8]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	46b9      	mov	r9, r7
 8007098:	9307      	str	r3, [sp, #28]
 800709a:	4607      	mov	r7, r0
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	4621      	mov	r1, r4
 80070a0:	3b01      	subs	r3, #1
 80070a2:	4628      	mov	r0, r5
 80070a4:	9302      	str	r3, [sp, #8]
 80070a6:	f7ff faeb 	bl	8006680 <quorem>
 80070aa:	4603      	mov	r3, r0
 80070ac:	3330      	adds	r3, #48	; 0x30
 80070ae:	9005      	str	r0, [sp, #20]
 80070b0:	4649      	mov	r1, r9
 80070b2:	4628      	mov	r0, r5
 80070b4:	9309      	str	r3, [sp, #36]	; 0x24
 80070b6:	f000 fd99 	bl	8007bec <__mcmp>
 80070ba:	463a      	mov	r2, r7
 80070bc:	4682      	mov	sl, r0
 80070be:	4621      	mov	r1, r4
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 fdaf 	bl	8007c24 <__mdiff>
 80070c6:	68c2      	ldr	r2, [r0, #12]
 80070c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ca:	4680      	mov	r8, r0
 80070cc:	bb0a      	cbnz	r2, 8007112 <_dtoa_r+0x97a>
 80070ce:	4601      	mov	r1, r0
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 fd8b 	bl	8007bec <__mcmp>
 80070d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d8:	4602      	mov	r2, r0
 80070da:	4641      	mov	r1, r8
 80070dc:	4630      	mov	r0, r6
 80070de:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80070e2:	f000 fb41 	bl	8007768 <_Bfree>
 80070e6:	9b06      	ldr	r3, [sp, #24]
 80070e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80070ee:	ea43 0102 	orr.w	r1, r3, r2
 80070f2:	9b07      	ldr	r3, [sp, #28]
 80070f4:	430b      	orrs	r3, r1
 80070f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f8:	d10d      	bne.n	8007116 <_dtoa_r+0x97e>
 80070fa:	2b39      	cmp	r3, #57	; 0x39
 80070fc:	d029      	beq.n	8007152 <_dtoa_r+0x9ba>
 80070fe:	f1ba 0f00 	cmp.w	sl, #0
 8007102:	dd01      	ble.n	8007108 <_dtoa_r+0x970>
 8007104:	9b05      	ldr	r3, [sp, #20]
 8007106:	3331      	adds	r3, #49	; 0x31
 8007108:	9a02      	ldr	r2, [sp, #8]
 800710a:	7013      	strb	r3, [r2, #0]
 800710c:	e774      	b.n	8006ff8 <_dtoa_r+0x860>
 800710e:	4638      	mov	r0, r7
 8007110:	e7b8      	b.n	8007084 <_dtoa_r+0x8ec>
 8007112:	2201      	movs	r2, #1
 8007114:	e7e1      	b.n	80070da <_dtoa_r+0x942>
 8007116:	f1ba 0f00 	cmp.w	sl, #0
 800711a:	db06      	blt.n	800712a <_dtoa_r+0x992>
 800711c:	9906      	ldr	r1, [sp, #24]
 800711e:	ea41 0a0a 	orr.w	sl, r1, sl
 8007122:	9907      	ldr	r1, [sp, #28]
 8007124:	ea5a 0101 	orrs.w	r1, sl, r1
 8007128:	d120      	bne.n	800716c <_dtoa_r+0x9d4>
 800712a:	2a00      	cmp	r2, #0
 800712c:	ddec      	ble.n	8007108 <_dtoa_r+0x970>
 800712e:	4629      	mov	r1, r5
 8007130:	2201      	movs	r2, #1
 8007132:	4630      	mov	r0, r6
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	f000 fce9 	bl	8007b0c <__lshift>
 800713a:	4621      	mov	r1, r4
 800713c:	4605      	mov	r5, r0
 800713e:	f000 fd55 	bl	8007bec <__mcmp>
 8007142:	2800      	cmp	r0, #0
 8007144:	9b04      	ldr	r3, [sp, #16]
 8007146:	dc02      	bgt.n	800714e <_dtoa_r+0x9b6>
 8007148:	d1de      	bne.n	8007108 <_dtoa_r+0x970>
 800714a:	07da      	lsls	r2, r3, #31
 800714c:	d5dc      	bpl.n	8007108 <_dtoa_r+0x970>
 800714e:	2b39      	cmp	r3, #57	; 0x39
 8007150:	d1d8      	bne.n	8007104 <_dtoa_r+0x96c>
 8007152:	9a02      	ldr	r2, [sp, #8]
 8007154:	2339      	movs	r3, #57	; 0x39
 8007156:	7013      	strb	r3, [r2, #0]
 8007158:	4643      	mov	r3, r8
 800715a:	4698      	mov	r8, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007162:	2a39      	cmp	r2, #57	; 0x39
 8007164:	d051      	beq.n	800720a <_dtoa_r+0xa72>
 8007166:	3201      	adds	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	e745      	b.n	8006ff8 <_dtoa_r+0x860>
 800716c:	2a00      	cmp	r2, #0
 800716e:	dd03      	ble.n	8007178 <_dtoa_r+0x9e0>
 8007170:	2b39      	cmp	r3, #57	; 0x39
 8007172:	d0ee      	beq.n	8007152 <_dtoa_r+0x9ba>
 8007174:	3301      	adds	r3, #1
 8007176:	e7c7      	b.n	8007108 <_dtoa_r+0x970>
 8007178:	9a04      	ldr	r2, [sp, #16]
 800717a:	9908      	ldr	r1, [sp, #32]
 800717c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007180:	428a      	cmp	r2, r1
 8007182:	d02b      	beq.n	80071dc <_dtoa_r+0xa44>
 8007184:	4629      	mov	r1, r5
 8007186:	2300      	movs	r3, #0
 8007188:	220a      	movs	r2, #10
 800718a:	4630      	mov	r0, r6
 800718c:	f000 fb0e 	bl	80077ac <__multadd>
 8007190:	45b9      	cmp	r9, r7
 8007192:	4605      	mov	r5, r0
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	f04f 020a 	mov.w	r2, #10
 800719c:	4649      	mov	r1, r9
 800719e:	4630      	mov	r0, r6
 80071a0:	d107      	bne.n	80071b2 <_dtoa_r+0xa1a>
 80071a2:	f000 fb03 	bl	80077ac <__multadd>
 80071a6:	4681      	mov	r9, r0
 80071a8:	4607      	mov	r7, r0
 80071aa:	9b04      	ldr	r3, [sp, #16]
 80071ac:	3301      	adds	r3, #1
 80071ae:	9304      	str	r3, [sp, #16]
 80071b0:	e774      	b.n	800709c <_dtoa_r+0x904>
 80071b2:	f000 fafb 	bl	80077ac <__multadd>
 80071b6:	4639      	mov	r1, r7
 80071b8:	4681      	mov	r9, r0
 80071ba:	2300      	movs	r3, #0
 80071bc:	220a      	movs	r2, #10
 80071be:	4630      	mov	r0, r6
 80071c0:	f000 faf4 	bl	80077ac <__multadd>
 80071c4:	4607      	mov	r7, r0
 80071c6:	e7f0      	b.n	80071aa <_dtoa_r+0xa12>
 80071c8:	f1ba 0f00 	cmp.w	sl, #0
 80071cc:	9a01      	ldr	r2, [sp, #4]
 80071ce:	bfcc      	ite	gt
 80071d0:	46d0      	movgt	r8, sl
 80071d2:	f04f 0801 	movle.w	r8, #1
 80071d6:	4490      	add	r8, r2
 80071d8:	f04f 0900 	mov.w	r9, #0
 80071dc:	4629      	mov	r1, r5
 80071de:	2201      	movs	r2, #1
 80071e0:	4630      	mov	r0, r6
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	f000 fc92 	bl	8007b0c <__lshift>
 80071e8:	4621      	mov	r1, r4
 80071ea:	4605      	mov	r5, r0
 80071ec:	f000 fcfe 	bl	8007bec <__mcmp>
 80071f0:	2800      	cmp	r0, #0
 80071f2:	dcb1      	bgt.n	8007158 <_dtoa_r+0x9c0>
 80071f4:	d102      	bne.n	80071fc <_dtoa_r+0xa64>
 80071f6:	9b02      	ldr	r3, [sp, #8]
 80071f8:	07db      	lsls	r3, r3, #31
 80071fa:	d4ad      	bmi.n	8007158 <_dtoa_r+0x9c0>
 80071fc:	4643      	mov	r3, r8
 80071fe:	4698      	mov	r8, r3
 8007200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007204:	2a30      	cmp	r2, #48	; 0x30
 8007206:	d0fa      	beq.n	80071fe <_dtoa_r+0xa66>
 8007208:	e6f6      	b.n	8006ff8 <_dtoa_r+0x860>
 800720a:	9a01      	ldr	r2, [sp, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d1a4      	bne.n	800715a <_dtoa_r+0x9c2>
 8007210:	f10b 0b01 	add.w	fp, fp, #1
 8007214:	2331      	movs	r3, #49	; 0x31
 8007216:	e778      	b.n	800710a <_dtoa_r+0x972>
 8007218:	4b14      	ldr	r3, [pc, #80]	; (800726c <_dtoa_r+0xad4>)
 800721a:	f7ff bb27 	b.w	800686c <_dtoa_r+0xd4>
 800721e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007220:	2b00      	cmp	r3, #0
 8007222:	f47f ab03 	bne.w	800682c <_dtoa_r+0x94>
 8007226:	4b12      	ldr	r3, [pc, #72]	; (8007270 <_dtoa_r+0xad8>)
 8007228:	f7ff bb20 	b.w	800686c <_dtoa_r+0xd4>
 800722c:	f1ba 0f00 	cmp.w	sl, #0
 8007230:	dc03      	bgt.n	800723a <_dtoa_r+0xaa2>
 8007232:	9b06      	ldr	r3, [sp, #24]
 8007234:	2b02      	cmp	r3, #2
 8007236:	f73f aec7 	bgt.w	8006fc8 <_dtoa_r+0x830>
 800723a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800723e:	4621      	mov	r1, r4
 8007240:	4628      	mov	r0, r5
 8007242:	f7ff fa1d 	bl	8006680 <quorem>
 8007246:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800724a:	f808 3b01 	strb.w	r3, [r8], #1
 800724e:	9a01      	ldr	r2, [sp, #4]
 8007250:	eba8 0202 	sub.w	r2, r8, r2
 8007254:	4592      	cmp	sl, r2
 8007256:	ddb7      	ble.n	80071c8 <_dtoa_r+0xa30>
 8007258:	4629      	mov	r1, r5
 800725a:	2300      	movs	r3, #0
 800725c:	220a      	movs	r2, #10
 800725e:	4630      	mov	r0, r6
 8007260:	f000 faa4 	bl	80077ac <__multadd>
 8007264:	4605      	mov	r5, r0
 8007266:	e7ea      	b.n	800723e <_dtoa_r+0xaa6>
 8007268:	0800927b 	.word	0x0800927b
 800726c:	080091d8 	.word	0x080091d8
 8007270:	080091fc 	.word	0x080091fc

08007274 <__sflush_r>:
 8007274:	898a      	ldrh	r2, [r1, #12]
 8007276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727a:	4605      	mov	r5, r0
 800727c:	0710      	lsls	r0, r2, #28
 800727e:	460c      	mov	r4, r1
 8007280:	d458      	bmi.n	8007334 <__sflush_r+0xc0>
 8007282:	684b      	ldr	r3, [r1, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	dc05      	bgt.n	8007294 <__sflush_r+0x20>
 8007288:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	dc02      	bgt.n	8007294 <__sflush_r+0x20>
 800728e:	2000      	movs	r0, #0
 8007290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007294:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007296:	2e00      	cmp	r6, #0
 8007298:	d0f9      	beq.n	800728e <__sflush_r+0x1a>
 800729a:	2300      	movs	r3, #0
 800729c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072a0:	682f      	ldr	r7, [r5, #0]
 80072a2:	602b      	str	r3, [r5, #0]
 80072a4:	d032      	beq.n	800730c <__sflush_r+0x98>
 80072a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	075a      	lsls	r2, r3, #29
 80072ac:	d505      	bpl.n	80072ba <__sflush_r+0x46>
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	1ac0      	subs	r0, r0, r3
 80072b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072b4:	b10b      	cbz	r3, 80072ba <__sflush_r+0x46>
 80072b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072b8:	1ac0      	subs	r0, r0, r3
 80072ba:	2300      	movs	r3, #0
 80072bc:	4602      	mov	r2, r0
 80072be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072c0:	6a21      	ldr	r1, [r4, #32]
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b0      	blx	r6
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	d106      	bne.n	80072da <__sflush_r+0x66>
 80072cc:	6829      	ldr	r1, [r5, #0]
 80072ce:	291d      	cmp	r1, #29
 80072d0:	d82c      	bhi.n	800732c <__sflush_r+0xb8>
 80072d2:	4a2a      	ldr	r2, [pc, #168]	; (800737c <__sflush_r+0x108>)
 80072d4:	40ca      	lsrs	r2, r1
 80072d6:	07d6      	lsls	r6, r2, #31
 80072d8:	d528      	bpl.n	800732c <__sflush_r+0xb8>
 80072da:	2200      	movs	r2, #0
 80072dc:	6062      	str	r2, [r4, #4]
 80072de:	04d9      	lsls	r1, r3, #19
 80072e0:	6922      	ldr	r2, [r4, #16]
 80072e2:	6022      	str	r2, [r4, #0]
 80072e4:	d504      	bpl.n	80072f0 <__sflush_r+0x7c>
 80072e6:	1c42      	adds	r2, r0, #1
 80072e8:	d101      	bne.n	80072ee <__sflush_r+0x7a>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b903      	cbnz	r3, 80072f0 <__sflush_r+0x7c>
 80072ee:	6560      	str	r0, [r4, #84]	; 0x54
 80072f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072f2:	602f      	str	r7, [r5, #0]
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d0ca      	beq.n	800728e <__sflush_r+0x1a>
 80072f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072fc:	4299      	cmp	r1, r3
 80072fe:	d002      	beq.n	8007306 <__sflush_r+0x92>
 8007300:	4628      	mov	r0, r5
 8007302:	f000 fd8b 	bl	8007e1c <_free_r>
 8007306:	2000      	movs	r0, #0
 8007308:	6360      	str	r0, [r4, #52]	; 0x34
 800730a:	e7c1      	b.n	8007290 <__sflush_r+0x1c>
 800730c:	6a21      	ldr	r1, [r4, #32]
 800730e:	2301      	movs	r3, #1
 8007310:	4628      	mov	r0, r5
 8007312:	47b0      	blx	r6
 8007314:	1c41      	adds	r1, r0, #1
 8007316:	d1c7      	bne.n	80072a8 <__sflush_r+0x34>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d0c4      	beq.n	80072a8 <__sflush_r+0x34>
 800731e:	2b1d      	cmp	r3, #29
 8007320:	d001      	beq.n	8007326 <__sflush_r+0xb2>
 8007322:	2b16      	cmp	r3, #22
 8007324:	d101      	bne.n	800732a <__sflush_r+0xb6>
 8007326:	602f      	str	r7, [r5, #0]
 8007328:	e7b1      	b.n	800728e <__sflush_r+0x1a>
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007330:	81a3      	strh	r3, [r4, #12]
 8007332:	e7ad      	b.n	8007290 <__sflush_r+0x1c>
 8007334:	690f      	ldr	r7, [r1, #16]
 8007336:	2f00      	cmp	r7, #0
 8007338:	d0a9      	beq.n	800728e <__sflush_r+0x1a>
 800733a:	0793      	lsls	r3, r2, #30
 800733c:	680e      	ldr	r6, [r1, #0]
 800733e:	bf08      	it	eq
 8007340:	694b      	ldreq	r3, [r1, #20]
 8007342:	600f      	str	r7, [r1, #0]
 8007344:	bf18      	it	ne
 8007346:	2300      	movne	r3, #0
 8007348:	eba6 0807 	sub.w	r8, r6, r7
 800734c:	608b      	str	r3, [r1, #8]
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	dd9c      	ble.n	800728e <__sflush_r+0x1a>
 8007354:	6a21      	ldr	r1, [r4, #32]
 8007356:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007358:	4643      	mov	r3, r8
 800735a:	463a      	mov	r2, r7
 800735c:	4628      	mov	r0, r5
 800735e:	47b0      	blx	r6
 8007360:	2800      	cmp	r0, #0
 8007362:	dc06      	bgt.n	8007372 <__sflush_r+0xfe>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	e78e      	b.n	8007290 <__sflush_r+0x1c>
 8007372:	4407      	add	r7, r0
 8007374:	eba8 0800 	sub.w	r8, r8, r0
 8007378:	e7e9      	b.n	800734e <__sflush_r+0xda>
 800737a:	bf00      	nop
 800737c:	20400001 	.word	0x20400001

08007380 <_fflush_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	690b      	ldr	r3, [r1, #16]
 8007384:	4605      	mov	r5, r0
 8007386:	460c      	mov	r4, r1
 8007388:	b913      	cbnz	r3, 8007390 <_fflush_r+0x10>
 800738a:	2500      	movs	r5, #0
 800738c:	4628      	mov	r0, r5
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	b118      	cbz	r0, 800739a <_fflush_r+0x1a>
 8007392:	6983      	ldr	r3, [r0, #24]
 8007394:	b90b      	cbnz	r3, 800739a <_fflush_r+0x1a>
 8007396:	f000 f887 	bl	80074a8 <__sinit>
 800739a:	4b14      	ldr	r3, [pc, #80]	; (80073ec <_fflush_r+0x6c>)
 800739c:	429c      	cmp	r4, r3
 800739e:	d11b      	bne.n	80073d8 <_fflush_r+0x58>
 80073a0:	686c      	ldr	r4, [r5, #4]
 80073a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0ef      	beq.n	800738a <_fflush_r+0xa>
 80073aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073ac:	07d0      	lsls	r0, r2, #31
 80073ae:	d404      	bmi.n	80073ba <_fflush_r+0x3a>
 80073b0:	0599      	lsls	r1, r3, #22
 80073b2:	d402      	bmi.n	80073ba <_fflush_r+0x3a>
 80073b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073b6:	f000 f91a 	bl	80075ee <__retarget_lock_acquire_recursive>
 80073ba:	4628      	mov	r0, r5
 80073bc:	4621      	mov	r1, r4
 80073be:	f7ff ff59 	bl	8007274 <__sflush_r>
 80073c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073c4:	07da      	lsls	r2, r3, #31
 80073c6:	4605      	mov	r5, r0
 80073c8:	d4e0      	bmi.n	800738c <_fflush_r+0xc>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	059b      	lsls	r3, r3, #22
 80073ce:	d4dd      	bmi.n	800738c <_fflush_r+0xc>
 80073d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073d2:	f000 f90d 	bl	80075f0 <__retarget_lock_release_recursive>
 80073d6:	e7d9      	b.n	800738c <_fflush_r+0xc>
 80073d8:	4b05      	ldr	r3, [pc, #20]	; (80073f0 <_fflush_r+0x70>)
 80073da:	429c      	cmp	r4, r3
 80073dc:	d101      	bne.n	80073e2 <_fflush_r+0x62>
 80073de:	68ac      	ldr	r4, [r5, #8]
 80073e0:	e7df      	b.n	80073a2 <_fflush_r+0x22>
 80073e2:	4b04      	ldr	r3, [pc, #16]	; (80073f4 <_fflush_r+0x74>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	bf08      	it	eq
 80073e8:	68ec      	ldreq	r4, [r5, #12]
 80073ea:	e7da      	b.n	80073a2 <_fflush_r+0x22>
 80073ec:	080092ac 	.word	0x080092ac
 80073f0:	080092cc 	.word	0x080092cc
 80073f4:	0800928c 	.word	0x0800928c

080073f8 <std>:
 80073f8:	2300      	movs	r3, #0
 80073fa:	b510      	push	{r4, lr}
 80073fc:	4604      	mov	r4, r0
 80073fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007406:	6083      	str	r3, [r0, #8]
 8007408:	8181      	strh	r1, [r0, #12]
 800740a:	6643      	str	r3, [r0, #100]	; 0x64
 800740c:	81c2      	strh	r2, [r0, #14]
 800740e:	6183      	str	r3, [r0, #24]
 8007410:	4619      	mov	r1, r3
 8007412:	2208      	movs	r2, #8
 8007414:	305c      	adds	r0, #92	; 0x5c
 8007416:	f7fe fb9b 	bl	8005b50 <memset>
 800741a:	4b05      	ldr	r3, [pc, #20]	; (8007430 <std+0x38>)
 800741c:	6263      	str	r3, [r4, #36]	; 0x24
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <std+0x3c>)
 8007420:	62a3      	str	r3, [r4, #40]	; 0x28
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <std+0x40>)
 8007424:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <std+0x44>)
 8007428:	6224      	str	r4, [r4, #32]
 800742a:	6323      	str	r3, [r4, #48]	; 0x30
 800742c:	bd10      	pop	{r4, pc}
 800742e:	bf00      	nop
 8007430:	080082b1 	.word	0x080082b1
 8007434:	080082d3 	.word	0x080082d3
 8007438:	0800830b 	.word	0x0800830b
 800743c:	0800832f 	.word	0x0800832f

08007440 <_cleanup_r>:
 8007440:	4901      	ldr	r1, [pc, #4]	; (8007448 <_cleanup_r+0x8>)
 8007442:	f000 b8af 	b.w	80075a4 <_fwalk_reent>
 8007446:	bf00      	nop
 8007448:	08007381 	.word	0x08007381

0800744c <__sfmoreglue>:
 800744c:	b570      	push	{r4, r5, r6, lr}
 800744e:	2268      	movs	r2, #104	; 0x68
 8007450:	1e4d      	subs	r5, r1, #1
 8007452:	4355      	muls	r5, r2
 8007454:	460e      	mov	r6, r1
 8007456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800745a:	f000 fd4b 	bl	8007ef4 <_malloc_r>
 800745e:	4604      	mov	r4, r0
 8007460:	b140      	cbz	r0, 8007474 <__sfmoreglue+0x28>
 8007462:	2100      	movs	r1, #0
 8007464:	e9c0 1600 	strd	r1, r6, [r0]
 8007468:	300c      	adds	r0, #12
 800746a:	60a0      	str	r0, [r4, #8]
 800746c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007470:	f7fe fb6e 	bl	8005b50 <memset>
 8007474:	4620      	mov	r0, r4
 8007476:	bd70      	pop	{r4, r5, r6, pc}

08007478 <__sfp_lock_acquire>:
 8007478:	4801      	ldr	r0, [pc, #4]	; (8007480 <__sfp_lock_acquire+0x8>)
 800747a:	f000 b8b8 	b.w	80075ee <__retarget_lock_acquire_recursive>
 800747e:	bf00      	nop
 8007480:	2400032d 	.word	0x2400032d

08007484 <__sfp_lock_release>:
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <__sfp_lock_release+0x8>)
 8007486:	f000 b8b3 	b.w	80075f0 <__retarget_lock_release_recursive>
 800748a:	bf00      	nop
 800748c:	2400032d 	.word	0x2400032d

08007490 <__sinit_lock_acquire>:
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <__sinit_lock_acquire+0x8>)
 8007492:	f000 b8ac 	b.w	80075ee <__retarget_lock_acquire_recursive>
 8007496:	bf00      	nop
 8007498:	2400032e 	.word	0x2400032e

0800749c <__sinit_lock_release>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__sinit_lock_release+0x8>)
 800749e:	f000 b8a7 	b.w	80075f0 <__retarget_lock_release_recursive>
 80074a2:	bf00      	nop
 80074a4:	2400032e 	.word	0x2400032e

080074a8 <__sinit>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	4604      	mov	r4, r0
 80074ac:	f7ff fff0 	bl	8007490 <__sinit_lock_acquire>
 80074b0:	69a3      	ldr	r3, [r4, #24]
 80074b2:	b11b      	cbz	r3, 80074bc <__sinit+0x14>
 80074b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074b8:	f7ff bff0 	b.w	800749c <__sinit_lock_release>
 80074bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074c0:	6523      	str	r3, [r4, #80]	; 0x50
 80074c2:	4b13      	ldr	r3, [pc, #76]	; (8007510 <__sinit+0x68>)
 80074c4:	4a13      	ldr	r2, [pc, #76]	; (8007514 <__sinit+0x6c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80074ca:	42a3      	cmp	r3, r4
 80074cc:	bf04      	itt	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	61a3      	streq	r3, [r4, #24]
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 f820 	bl	8007518 <__sfp>
 80074d8:	6060      	str	r0, [r4, #4]
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 f81c 	bl	8007518 <__sfp>
 80074e0:	60a0      	str	r0, [r4, #8]
 80074e2:	4620      	mov	r0, r4
 80074e4:	f000 f818 	bl	8007518 <__sfp>
 80074e8:	2200      	movs	r2, #0
 80074ea:	60e0      	str	r0, [r4, #12]
 80074ec:	2104      	movs	r1, #4
 80074ee:	6860      	ldr	r0, [r4, #4]
 80074f0:	f7ff ff82 	bl	80073f8 <std>
 80074f4:	68a0      	ldr	r0, [r4, #8]
 80074f6:	2201      	movs	r2, #1
 80074f8:	2109      	movs	r1, #9
 80074fa:	f7ff ff7d 	bl	80073f8 <std>
 80074fe:	68e0      	ldr	r0, [r4, #12]
 8007500:	2202      	movs	r2, #2
 8007502:	2112      	movs	r1, #18
 8007504:	f7ff ff78 	bl	80073f8 <std>
 8007508:	2301      	movs	r3, #1
 800750a:	61a3      	str	r3, [r4, #24]
 800750c:	e7d2      	b.n	80074b4 <__sinit+0xc>
 800750e:	bf00      	nop
 8007510:	080091c4 	.word	0x080091c4
 8007514:	08007441 	.word	0x08007441

08007518 <__sfp>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	4607      	mov	r7, r0
 800751c:	f7ff ffac 	bl	8007478 <__sfp_lock_acquire>
 8007520:	4b1e      	ldr	r3, [pc, #120]	; (800759c <__sfp+0x84>)
 8007522:	681e      	ldr	r6, [r3, #0]
 8007524:	69b3      	ldr	r3, [r6, #24]
 8007526:	b913      	cbnz	r3, 800752e <__sfp+0x16>
 8007528:	4630      	mov	r0, r6
 800752a:	f7ff ffbd 	bl	80074a8 <__sinit>
 800752e:	3648      	adds	r6, #72	; 0x48
 8007530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007534:	3b01      	subs	r3, #1
 8007536:	d503      	bpl.n	8007540 <__sfp+0x28>
 8007538:	6833      	ldr	r3, [r6, #0]
 800753a:	b30b      	cbz	r3, 8007580 <__sfp+0x68>
 800753c:	6836      	ldr	r6, [r6, #0]
 800753e:	e7f7      	b.n	8007530 <__sfp+0x18>
 8007540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007544:	b9d5      	cbnz	r5, 800757c <__sfp+0x64>
 8007546:	4b16      	ldr	r3, [pc, #88]	; (80075a0 <__sfp+0x88>)
 8007548:	60e3      	str	r3, [r4, #12]
 800754a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800754e:	6665      	str	r5, [r4, #100]	; 0x64
 8007550:	f000 f84c 	bl	80075ec <__retarget_lock_init_recursive>
 8007554:	f7ff ff96 	bl	8007484 <__sfp_lock_release>
 8007558:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800755c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007560:	6025      	str	r5, [r4, #0]
 8007562:	61a5      	str	r5, [r4, #24]
 8007564:	2208      	movs	r2, #8
 8007566:	4629      	mov	r1, r5
 8007568:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800756c:	f7fe faf0 	bl	8005b50 <memset>
 8007570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007578:	4620      	mov	r0, r4
 800757a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800757c:	3468      	adds	r4, #104	; 0x68
 800757e:	e7d9      	b.n	8007534 <__sfp+0x1c>
 8007580:	2104      	movs	r1, #4
 8007582:	4638      	mov	r0, r7
 8007584:	f7ff ff62 	bl	800744c <__sfmoreglue>
 8007588:	4604      	mov	r4, r0
 800758a:	6030      	str	r0, [r6, #0]
 800758c:	2800      	cmp	r0, #0
 800758e:	d1d5      	bne.n	800753c <__sfp+0x24>
 8007590:	f7ff ff78 	bl	8007484 <__sfp_lock_release>
 8007594:	230c      	movs	r3, #12
 8007596:	603b      	str	r3, [r7, #0]
 8007598:	e7ee      	b.n	8007578 <__sfp+0x60>
 800759a:	bf00      	nop
 800759c:	080091c4 	.word	0x080091c4
 80075a0:	ffff0001 	.word	0xffff0001

080075a4 <_fwalk_reent>:
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a8:	4606      	mov	r6, r0
 80075aa:	4688      	mov	r8, r1
 80075ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075b0:	2700      	movs	r7, #0
 80075b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075b6:	f1b9 0901 	subs.w	r9, r9, #1
 80075ba:	d505      	bpl.n	80075c8 <_fwalk_reent+0x24>
 80075bc:	6824      	ldr	r4, [r4, #0]
 80075be:	2c00      	cmp	r4, #0
 80075c0:	d1f7      	bne.n	80075b2 <_fwalk_reent+0xe>
 80075c2:	4638      	mov	r0, r7
 80075c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c8:	89ab      	ldrh	r3, [r5, #12]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d907      	bls.n	80075de <_fwalk_reent+0x3a>
 80075ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075d2:	3301      	adds	r3, #1
 80075d4:	d003      	beq.n	80075de <_fwalk_reent+0x3a>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4630      	mov	r0, r6
 80075da:	47c0      	blx	r8
 80075dc:	4307      	orrs	r7, r0
 80075de:	3568      	adds	r5, #104	; 0x68
 80075e0:	e7e9      	b.n	80075b6 <_fwalk_reent+0x12>
	...

080075e4 <_localeconv_r>:
 80075e4:	4800      	ldr	r0, [pc, #0]	; (80075e8 <_localeconv_r+0x4>)
 80075e6:	4770      	bx	lr
 80075e8:	24000164 	.word	0x24000164

080075ec <__retarget_lock_init_recursive>:
 80075ec:	4770      	bx	lr

080075ee <__retarget_lock_acquire_recursive>:
 80075ee:	4770      	bx	lr

080075f0 <__retarget_lock_release_recursive>:
 80075f0:	4770      	bx	lr

080075f2 <__swhatbuf_r>:
 80075f2:	b570      	push	{r4, r5, r6, lr}
 80075f4:	460e      	mov	r6, r1
 80075f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fa:	2900      	cmp	r1, #0
 80075fc:	b096      	sub	sp, #88	; 0x58
 80075fe:	4614      	mov	r4, r2
 8007600:	461d      	mov	r5, r3
 8007602:	da08      	bge.n	8007616 <__swhatbuf_r+0x24>
 8007604:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	602a      	str	r2, [r5, #0]
 800760c:	061a      	lsls	r2, r3, #24
 800760e:	d410      	bmi.n	8007632 <__swhatbuf_r+0x40>
 8007610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007614:	e00e      	b.n	8007634 <__swhatbuf_r+0x42>
 8007616:	466a      	mov	r2, sp
 8007618:	f000 fee0 	bl	80083dc <_fstat_r>
 800761c:	2800      	cmp	r0, #0
 800761e:	dbf1      	blt.n	8007604 <__swhatbuf_r+0x12>
 8007620:	9a01      	ldr	r2, [sp, #4]
 8007622:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007626:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800762a:	425a      	negs	r2, r3
 800762c:	415a      	adcs	r2, r3
 800762e:	602a      	str	r2, [r5, #0]
 8007630:	e7ee      	b.n	8007610 <__swhatbuf_r+0x1e>
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	2000      	movs	r0, #0
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	b016      	add	sp, #88	; 0x58
 800763a:	bd70      	pop	{r4, r5, r6, pc}

0800763c <__smakebuf_r>:
 800763c:	898b      	ldrh	r3, [r1, #12]
 800763e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007640:	079d      	lsls	r5, r3, #30
 8007642:	4606      	mov	r6, r0
 8007644:	460c      	mov	r4, r1
 8007646:	d507      	bpl.n	8007658 <__smakebuf_r+0x1c>
 8007648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	6123      	str	r3, [r4, #16]
 8007650:	2301      	movs	r3, #1
 8007652:	6163      	str	r3, [r4, #20]
 8007654:	b002      	add	sp, #8
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	ab01      	add	r3, sp, #4
 800765a:	466a      	mov	r2, sp
 800765c:	f7ff ffc9 	bl	80075f2 <__swhatbuf_r>
 8007660:	9900      	ldr	r1, [sp, #0]
 8007662:	4605      	mov	r5, r0
 8007664:	4630      	mov	r0, r6
 8007666:	f000 fc45 	bl	8007ef4 <_malloc_r>
 800766a:	b948      	cbnz	r0, 8007680 <__smakebuf_r+0x44>
 800766c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007670:	059a      	lsls	r2, r3, #22
 8007672:	d4ef      	bmi.n	8007654 <__smakebuf_r+0x18>
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	81a3      	strh	r3, [r4, #12]
 800767e:	e7e3      	b.n	8007648 <__smakebuf_r+0xc>
 8007680:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <__smakebuf_r+0x7c>)
 8007682:	62b3      	str	r3, [r6, #40]	; 0x28
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	6020      	str	r0, [r4, #0]
 8007688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800768c:	81a3      	strh	r3, [r4, #12]
 800768e:	9b00      	ldr	r3, [sp, #0]
 8007690:	6163      	str	r3, [r4, #20]
 8007692:	9b01      	ldr	r3, [sp, #4]
 8007694:	6120      	str	r0, [r4, #16]
 8007696:	b15b      	cbz	r3, 80076b0 <__smakebuf_r+0x74>
 8007698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800769c:	4630      	mov	r0, r6
 800769e:	f000 feaf 	bl	8008400 <_isatty_r>
 80076a2:	b128      	cbz	r0, 80076b0 <__smakebuf_r+0x74>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	f023 0303 	bic.w	r3, r3, #3
 80076aa:	f043 0301 	orr.w	r3, r3, #1
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	89a0      	ldrh	r0, [r4, #12]
 80076b2:	4305      	orrs	r5, r0
 80076b4:	81a5      	strh	r5, [r4, #12]
 80076b6:	e7cd      	b.n	8007654 <__smakebuf_r+0x18>
 80076b8:	08007441 	.word	0x08007441

080076bc <malloc>:
 80076bc:	4b02      	ldr	r3, [pc, #8]	; (80076c8 <malloc+0xc>)
 80076be:	4601      	mov	r1, r0
 80076c0:	6818      	ldr	r0, [r3, #0]
 80076c2:	f000 bc17 	b.w	8007ef4 <_malloc_r>
 80076c6:	bf00      	nop
 80076c8:	24000010 	.word	0x24000010

080076cc <memcpy>:
 80076cc:	440a      	add	r2, r1
 80076ce:	4291      	cmp	r1, r2
 80076d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076d4:	d100      	bne.n	80076d8 <memcpy+0xc>
 80076d6:	4770      	bx	lr
 80076d8:	b510      	push	{r4, lr}
 80076da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076e2:	4291      	cmp	r1, r2
 80076e4:	d1f9      	bne.n	80076da <memcpy+0xe>
 80076e6:	bd10      	pop	{r4, pc}

080076e8 <_Balloc>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076ec:	4604      	mov	r4, r0
 80076ee:	460d      	mov	r5, r1
 80076f0:	b976      	cbnz	r6, 8007710 <_Balloc+0x28>
 80076f2:	2010      	movs	r0, #16
 80076f4:	f7ff ffe2 	bl	80076bc <malloc>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6260      	str	r0, [r4, #36]	; 0x24
 80076fc:	b920      	cbnz	r0, 8007708 <_Balloc+0x20>
 80076fe:	4b18      	ldr	r3, [pc, #96]	; (8007760 <_Balloc+0x78>)
 8007700:	4818      	ldr	r0, [pc, #96]	; (8007764 <_Balloc+0x7c>)
 8007702:	2166      	movs	r1, #102	; 0x66
 8007704:	f000 fe2a 	bl	800835c <__assert_func>
 8007708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800770c:	6006      	str	r6, [r0, #0]
 800770e:	60c6      	str	r6, [r0, #12]
 8007710:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007712:	68f3      	ldr	r3, [r6, #12]
 8007714:	b183      	cbz	r3, 8007738 <_Balloc+0x50>
 8007716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800771e:	b9b8      	cbnz	r0, 8007750 <_Balloc+0x68>
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f605 	lsl.w	r6, r1, r5
 8007726:	1d72      	adds	r2, r6, #5
 8007728:	0092      	lsls	r2, r2, #2
 800772a:	4620      	mov	r0, r4
 800772c:	f000 fb60 	bl	8007df0 <_calloc_r>
 8007730:	b160      	cbz	r0, 800774c <_Balloc+0x64>
 8007732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007736:	e00e      	b.n	8007756 <_Balloc+0x6e>
 8007738:	2221      	movs	r2, #33	; 0x21
 800773a:	2104      	movs	r1, #4
 800773c:	4620      	mov	r0, r4
 800773e:	f000 fb57 	bl	8007df0 <_calloc_r>
 8007742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007744:	60f0      	str	r0, [r6, #12]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e4      	bne.n	8007716 <_Balloc+0x2e>
 800774c:	2000      	movs	r0, #0
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	6802      	ldr	r2, [r0, #0]
 8007752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007756:	2300      	movs	r3, #0
 8007758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800775c:	e7f7      	b.n	800774e <_Balloc+0x66>
 800775e:	bf00      	nop
 8007760:	08009209 	.word	0x08009209
 8007764:	080092ec 	.word	0x080092ec

08007768 <_Bfree>:
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b976      	cbnz	r6, 8007790 <_Bfree+0x28>
 8007772:	2010      	movs	r0, #16
 8007774:	f7ff ffa2 	bl	80076bc <malloc>
 8007778:	4602      	mov	r2, r0
 800777a:	6268      	str	r0, [r5, #36]	; 0x24
 800777c:	b920      	cbnz	r0, 8007788 <_Bfree+0x20>
 800777e:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <_Bfree+0x3c>)
 8007780:	4809      	ldr	r0, [pc, #36]	; (80077a8 <_Bfree+0x40>)
 8007782:	218a      	movs	r1, #138	; 0x8a
 8007784:	f000 fdea 	bl	800835c <__assert_func>
 8007788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800778c:	6006      	str	r6, [r0, #0]
 800778e:	60c6      	str	r6, [r0, #12]
 8007790:	b13c      	cbz	r4, 80077a2 <_Bfree+0x3a>
 8007792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007794:	6862      	ldr	r2, [r4, #4]
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800779c:	6021      	str	r1, [r4, #0]
 800779e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	08009209 	.word	0x08009209
 80077a8:	080092ec 	.word	0x080092ec

080077ac <__multadd>:
 80077ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b0:	690d      	ldr	r5, [r1, #16]
 80077b2:	4607      	mov	r7, r0
 80077b4:	460c      	mov	r4, r1
 80077b6:	461e      	mov	r6, r3
 80077b8:	f101 0c14 	add.w	ip, r1, #20
 80077bc:	2000      	movs	r0, #0
 80077be:	f8dc 3000 	ldr.w	r3, [ip]
 80077c2:	b299      	uxth	r1, r3
 80077c4:	fb02 6101 	mla	r1, r2, r1, r6
 80077c8:	0c1e      	lsrs	r6, r3, #16
 80077ca:	0c0b      	lsrs	r3, r1, #16
 80077cc:	fb02 3306 	mla	r3, r2, r6, r3
 80077d0:	b289      	uxth	r1, r1
 80077d2:	3001      	adds	r0, #1
 80077d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077d8:	4285      	cmp	r5, r0
 80077da:	f84c 1b04 	str.w	r1, [ip], #4
 80077de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077e2:	dcec      	bgt.n	80077be <__multadd+0x12>
 80077e4:	b30e      	cbz	r6, 800782a <__multadd+0x7e>
 80077e6:	68a3      	ldr	r3, [r4, #8]
 80077e8:	42ab      	cmp	r3, r5
 80077ea:	dc19      	bgt.n	8007820 <__multadd+0x74>
 80077ec:	6861      	ldr	r1, [r4, #4]
 80077ee:	4638      	mov	r0, r7
 80077f0:	3101      	adds	r1, #1
 80077f2:	f7ff ff79 	bl	80076e8 <_Balloc>
 80077f6:	4680      	mov	r8, r0
 80077f8:	b928      	cbnz	r0, 8007806 <__multadd+0x5a>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <__multadd+0x84>)
 80077fe:	480d      	ldr	r0, [pc, #52]	; (8007834 <__multadd+0x88>)
 8007800:	21b5      	movs	r1, #181	; 0xb5
 8007802:	f000 fdab 	bl	800835c <__assert_func>
 8007806:	6922      	ldr	r2, [r4, #16]
 8007808:	3202      	adds	r2, #2
 800780a:	f104 010c 	add.w	r1, r4, #12
 800780e:	0092      	lsls	r2, r2, #2
 8007810:	300c      	adds	r0, #12
 8007812:	f7ff ff5b 	bl	80076cc <memcpy>
 8007816:	4621      	mov	r1, r4
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff ffa5 	bl	8007768 <_Bfree>
 800781e:	4644      	mov	r4, r8
 8007820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007824:	3501      	adds	r5, #1
 8007826:	615e      	str	r6, [r3, #20]
 8007828:	6125      	str	r5, [r4, #16]
 800782a:	4620      	mov	r0, r4
 800782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007830:	0800927b 	.word	0x0800927b
 8007834:	080092ec 	.word	0x080092ec

08007838 <__hi0bits>:
 8007838:	0c03      	lsrs	r3, r0, #16
 800783a:	041b      	lsls	r3, r3, #16
 800783c:	b9d3      	cbnz	r3, 8007874 <__hi0bits+0x3c>
 800783e:	0400      	lsls	r0, r0, #16
 8007840:	2310      	movs	r3, #16
 8007842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007846:	bf04      	itt	eq
 8007848:	0200      	lsleq	r0, r0, #8
 800784a:	3308      	addeq	r3, #8
 800784c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007850:	bf04      	itt	eq
 8007852:	0100      	lsleq	r0, r0, #4
 8007854:	3304      	addeq	r3, #4
 8007856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800785a:	bf04      	itt	eq
 800785c:	0080      	lsleq	r0, r0, #2
 800785e:	3302      	addeq	r3, #2
 8007860:	2800      	cmp	r0, #0
 8007862:	db05      	blt.n	8007870 <__hi0bits+0x38>
 8007864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007868:	f103 0301 	add.w	r3, r3, #1
 800786c:	bf08      	it	eq
 800786e:	2320      	moveq	r3, #32
 8007870:	4618      	mov	r0, r3
 8007872:	4770      	bx	lr
 8007874:	2300      	movs	r3, #0
 8007876:	e7e4      	b.n	8007842 <__hi0bits+0xa>

08007878 <__lo0bits>:
 8007878:	6803      	ldr	r3, [r0, #0]
 800787a:	f013 0207 	ands.w	r2, r3, #7
 800787e:	4601      	mov	r1, r0
 8007880:	d00b      	beq.n	800789a <__lo0bits+0x22>
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d423      	bmi.n	80078ce <__lo0bits+0x56>
 8007886:	0798      	lsls	r0, r3, #30
 8007888:	bf49      	itett	mi
 800788a:	085b      	lsrmi	r3, r3, #1
 800788c:	089b      	lsrpl	r3, r3, #2
 800788e:	2001      	movmi	r0, #1
 8007890:	600b      	strmi	r3, [r1, #0]
 8007892:	bf5c      	itt	pl
 8007894:	600b      	strpl	r3, [r1, #0]
 8007896:	2002      	movpl	r0, #2
 8007898:	4770      	bx	lr
 800789a:	b298      	uxth	r0, r3
 800789c:	b9a8      	cbnz	r0, 80078ca <__lo0bits+0x52>
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	2010      	movs	r0, #16
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	b90a      	cbnz	r2, 80078aa <__lo0bits+0x32>
 80078a6:	3008      	adds	r0, #8
 80078a8:	0a1b      	lsrs	r3, r3, #8
 80078aa:	071a      	lsls	r2, r3, #28
 80078ac:	bf04      	itt	eq
 80078ae:	091b      	lsreq	r3, r3, #4
 80078b0:	3004      	addeq	r0, #4
 80078b2:	079a      	lsls	r2, r3, #30
 80078b4:	bf04      	itt	eq
 80078b6:	089b      	lsreq	r3, r3, #2
 80078b8:	3002      	addeq	r0, #2
 80078ba:	07da      	lsls	r2, r3, #31
 80078bc:	d403      	bmi.n	80078c6 <__lo0bits+0x4e>
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	f100 0001 	add.w	r0, r0, #1
 80078c4:	d005      	beq.n	80078d2 <__lo0bits+0x5a>
 80078c6:	600b      	str	r3, [r1, #0]
 80078c8:	4770      	bx	lr
 80078ca:	4610      	mov	r0, r2
 80078cc:	e7e9      	b.n	80078a2 <__lo0bits+0x2a>
 80078ce:	2000      	movs	r0, #0
 80078d0:	4770      	bx	lr
 80078d2:	2020      	movs	r0, #32
 80078d4:	4770      	bx	lr
	...

080078d8 <__i2b>:
 80078d8:	b510      	push	{r4, lr}
 80078da:	460c      	mov	r4, r1
 80078dc:	2101      	movs	r1, #1
 80078de:	f7ff ff03 	bl	80076e8 <_Balloc>
 80078e2:	4602      	mov	r2, r0
 80078e4:	b928      	cbnz	r0, 80078f2 <__i2b+0x1a>
 80078e6:	4b05      	ldr	r3, [pc, #20]	; (80078fc <__i2b+0x24>)
 80078e8:	4805      	ldr	r0, [pc, #20]	; (8007900 <__i2b+0x28>)
 80078ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80078ee:	f000 fd35 	bl	800835c <__assert_func>
 80078f2:	2301      	movs	r3, #1
 80078f4:	6144      	str	r4, [r0, #20]
 80078f6:	6103      	str	r3, [r0, #16]
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	bf00      	nop
 80078fc:	0800927b 	.word	0x0800927b
 8007900:	080092ec 	.word	0x080092ec

08007904 <__multiply>:
 8007904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	4691      	mov	r9, r2
 800790a:	690a      	ldr	r2, [r1, #16]
 800790c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007910:	429a      	cmp	r2, r3
 8007912:	bfb8      	it	lt
 8007914:	460b      	movlt	r3, r1
 8007916:	460c      	mov	r4, r1
 8007918:	bfbc      	itt	lt
 800791a:	464c      	movlt	r4, r9
 800791c:	4699      	movlt	r9, r3
 800791e:	6927      	ldr	r7, [r4, #16]
 8007920:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007924:	68a3      	ldr	r3, [r4, #8]
 8007926:	6861      	ldr	r1, [r4, #4]
 8007928:	eb07 060a 	add.w	r6, r7, sl
 800792c:	42b3      	cmp	r3, r6
 800792e:	b085      	sub	sp, #20
 8007930:	bfb8      	it	lt
 8007932:	3101      	addlt	r1, #1
 8007934:	f7ff fed8 	bl	80076e8 <_Balloc>
 8007938:	b930      	cbnz	r0, 8007948 <__multiply+0x44>
 800793a:	4602      	mov	r2, r0
 800793c:	4b44      	ldr	r3, [pc, #272]	; (8007a50 <__multiply+0x14c>)
 800793e:	4845      	ldr	r0, [pc, #276]	; (8007a54 <__multiply+0x150>)
 8007940:	f240 115d 	movw	r1, #349	; 0x15d
 8007944:	f000 fd0a 	bl	800835c <__assert_func>
 8007948:	f100 0514 	add.w	r5, r0, #20
 800794c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007950:	462b      	mov	r3, r5
 8007952:	2200      	movs	r2, #0
 8007954:	4543      	cmp	r3, r8
 8007956:	d321      	bcc.n	800799c <__multiply+0x98>
 8007958:	f104 0314 	add.w	r3, r4, #20
 800795c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007960:	f109 0314 	add.w	r3, r9, #20
 8007964:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007968:	9202      	str	r2, [sp, #8]
 800796a:	1b3a      	subs	r2, r7, r4
 800796c:	3a15      	subs	r2, #21
 800796e:	f022 0203 	bic.w	r2, r2, #3
 8007972:	3204      	adds	r2, #4
 8007974:	f104 0115 	add.w	r1, r4, #21
 8007978:	428f      	cmp	r7, r1
 800797a:	bf38      	it	cc
 800797c:	2204      	movcc	r2, #4
 800797e:	9201      	str	r2, [sp, #4]
 8007980:	9a02      	ldr	r2, [sp, #8]
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	429a      	cmp	r2, r3
 8007986:	d80c      	bhi.n	80079a2 <__multiply+0x9e>
 8007988:	2e00      	cmp	r6, #0
 800798a:	dd03      	ble.n	8007994 <__multiply+0x90>
 800798c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05a      	beq.n	8007a4a <__multiply+0x146>
 8007994:	6106      	str	r6, [r0, #16]
 8007996:	b005      	add	sp, #20
 8007998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799c:	f843 2b04 	str.w	r2, [r3], #4
 80079a0:	e7d8      	b.n	8007954 <__multiply+0x50>
 80079a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80079a6:	f1ba 0f00 	cmp.w	sl, #0
 80079aa:	d024      	beq.n	80079f6 <__multiply+0xf2>
 80079ac:	f104 0e14 	add.w	lr, r4, #20
 80079b0:	46a9      	mov	r9, r5
 80079b2:	f04f 0c00 	mov.w	ip, #0
 80079b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80079ba:	f8d9 1000 	ldr.w	r1, [r9]
 80079be:	fa1f fb82 	uxth.w	fp, r2
 80079c2:	b289      	uxth	r1, r1
 80079c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80079c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079cc:	f8d9 2000 	ldr.w	r2, [r9]
 80079d0:	4461      	add	r1, ip
 80079d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80079da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079de:	b289      	uxth	r1, r1
 80079e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079e4:	4577      	cmp	r7, lr
 80079e6:	f849 1b04 	str.w	r1, [r9], #4
 80079ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079ee:	d8e2      	bhi.n	80079b6 <__multiply+0xb2>
 80079f0:	9a01      	ldr	r2, [sp, #4]
 80079f2:	f845 c002 	str.w	ip, [r5, r2]
 80079f6:	9a03      	ldr	r2, [sp, #12]
 80079f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079fc:	3304      	adds	r3, #4
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	d020      	beq.n	8007a46 <__multiply+0x142>
 8007a04:	6829      	ldr	r1, [r5, #0]
 8007a06:	f104 0c14 	add.w	ip, r4, #20
 8007a0a:	46ae      	mov	lr, r5
 8007a0c:	f04f 0a00 	mov.w	sl, #0
 8007a10:	f8bc b000 	ldrh.w	fp, [ip]
 8007a14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a18:	fb09 220b 	mla	r2, r9, fp, r2
 8007a1c:	4492      	add	sl, r2
 8007a1e:	b289      	uxth	r1, r1
 8007a20:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a24:	f84e 1b04 	str.w	r1, [lr], #4
 8007a28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a2c:	f8be 1000 	ldrh.w	r1, [lr]
 8007a30:	0c12      	lsrs	r2, r2, #16
 8007a32:	fb09 1102 	mla	r1, r9, r2, r1
 8007a36:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a3a:	4567      	cmp	r7, ip
 8007a3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a40:	d8e6      	bhi.n	8007a10 <__multiply+0x10c>
 8007a42:	9a01      	ldr	r2, [sp, #4]
 8007a44:	50a9      	str	r1, [r5, r2]
 8007a46:	3504      	adds	r5, #4
 8007a48:	e79a      	b.n	8007980 <__multiply+0x7c>
 8007a4a:	3e01      	subs	r6, #1
 8007a4c:	e79c      	b.n	8007988 <__multiply+0x84>
 8007a4e:	bf00      	nop
 8007a50:	0800927b 	.word	0x0800927b
 8007a54:	080092ec 	.word	0x080092ec

08007a58 <__pow5mult>:
 8007a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a5c:	4615      	mov	r5, r2
 8007a5e:	f012 0203 	ands.w	r2, r2, #3
 8007a62:	4606      	mov	r6, r0
 8007a64:	460f      	mov	r7, r1
 8007a66:	d007      	beq.n	8007a78 <__pow5mult+0x20>
 8007a68:	4c25      	ldr	r4, [pc, #148]	; (8007b00 <__pow5mult+0xa8>)
 8007a6a:	3a01      	subs	r2, #1
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a72:	f7ff fe9b 	bl	80077ac <__multadd>
 8007a76:	4607      	mov	r7, r0
 8007a78:	10ad      	asrs	r5, r5, #2
 8007a7a:	d03d      	beq.n	8007af8 <__pow5mult+0xa0>
 8007a7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a7e:	b97c      	cbnz	r4, 8007aa0 <__pow5mult+0x48>
 8007a80:	2010      	movs	r0, #16
 8007a82:	f7ff fe1b 	bl	80076bc <malloc>
 8007a86:	4602      	mov	r2, r0
 8007a88:	6270      	str	r0, [r6, #36]	; 0x24
 8007a8a:	b928      	cbnz	r0, 8007a98 <__pow5mult+0x40>
 8007a8c:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <__pow5mult+0xac>)
 8007a8e:	481e      	ldr	r0, [pc, #120]	; (8007b08 <__pow5mult+0xb0>)
 8007a90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007a94:	f000 fc62 	bl	800835c <__assert_func>
 8007a98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a9c:	6004      	str	r4, [r0, #0]
 8007a9e:	60c4      	str	r4, [r0, #12]
 8007aa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007aa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007aa8:	b94c      	cbnz	r4, 8007abe <__pow5mult+0x66>
 8007aaa:	f240 2171 	movw	r1, #625	; 0x271
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ff12 	bl	80078d8 <__i2b>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007aba:	4604      	mov	r4, r0
 8007abc:	6003      	str	r3, [r0, #0]
 8007abe:	f04f 0900 	mov.w	r9, #0
 8007ac2:	07eb      	lsls	r3, r5, #31
 8007ac4:	d50a      	bpl.n	8007adc <__pow5mult+0x84>
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	4622      	mov	r2, r4
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7ff ff1a 	bl	8007904 <__multiply>
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff fe47 	bl	8007768 <_Bfree>
 8007ada:	4647      	mov	r7, r8
 8007adc:	106d      	asrs	r5, r5, #1
 8007ade:	d00b      	beq.n	8007af8 <__pow5mult+0xa0>
 8007ae0:	6820      	ldr	r0, [r4, #0]
 8007ae2:	b938      	cbnz	r0, 8007af4 <__pow5mult+0x9c>
 8007ae4:	4622      	mov	r2, r4
 8007ae6:	4621      	mov	r1, r4
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff ff0b 	bl	8007904 <__multiply>
 8007aee:	6020      	str	r0, [r4, #0]
 8007af0:	f8c0 9000 	str.w	r9, [r0]
 8007af4:	4604      	mov	r4, r0
 8007af6:	e7e4      	b.n	8007ac2 <__pow5mult+0x6a>
 8007af8:	4638      	mov	r0, r7
 8007afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007afe:	bf00      	nop
 8007b00:	08009438 	.word	0x08009438
 8007b04:	08009209 	.word	0x08009209
 8007b08:	080092ec 	.word	0x080092ec

08007b0c <__lshift>:
 8007b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	460c      	mov	r4, r1
 8007b12:	6849      	ldr	r1, [r1, #4]
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b1a:	68a3      	ldr	r3, [r4, #8]
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	4691      	mov	r9, r2
 8007b20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b24:	f108 0601 	add.w	r6, r8, #1
 8007b28:	42b3      	cmp	r3, r6
 8007b2a:	db0b      	blt.n	8007b44 <__lshift+0x38>
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f7ff fddb 	bl	80076e8 <_Balloc>
 8007b32:	4605      	mov	r5, r0
 8007b34:	b948      	cbnz	r0, 8007b4a <__lshift+0x3e>
 8007b36:	4602      	mov	r2, r0
 8007b38:	4b2a      	ldr	r3, [pc, #168]	; (8007be4 <__lshift+0xd8>)
 8007b3a:	482b      	ldr	r0, [pc, #172]	; (8007be8 <__lshift+0xdc>)
 8007b3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b40:	f000 fc0c 	bl	800835c <__assert_func>
 8007b44:	3101      	adds	r1, #1
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	e7ee      	b.n	8007b28 <__lshift+0x1c>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f100 0114 	add.w	r1, r0, #20
 8007b50:	f100 0210 	add.w	r2, r0, #16
 8007b54:	4618      	mov	r0, r3
 8007b56:	4553      	cmp	r3, sl
 8007b58:	db37      	blt.n	8007bca <__lshift+0xbe>
 8007b5a:	6920      	ldr	r0, [r4, #16]
 8007b5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b60:	f104 0314 	add.w	r3, r4, #20
 8007b64:	f019 091f 	ands.w	r9, r9, #31
 8007b68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b70:	d02f      	beq.n	8007bd2 <__lshift+0xc6>
 8007b72:	f1c9 0e20 	rsb	lr, r9, #32
 8007b76:	468a      	mov	sl, r1
 8007b78:	f04f 0c00 	mov.w	ip, #0
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	fa02 f209 	lsl.w	r2, r2, r9
 8007b82:	ea42 020c 	orr.w	r2, r2, ip
 8007b86:	f84a 2b04 	str.w	r2, [sl], #4
 8007b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8e:	4298      	cmp	r0, r3
 8007b90:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007b94:	d8f2      	bhi.n	8007b7c <__lshift+0x70>
 8007b96:	1b03      	subs	r3, r0, r4
 8007b98:	3b15      	subs	r3, #21
 8007b9a:	f023 0303 	bic.w	r3, r3, #3
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	f104 0215 	add.w	r2, r4, #21
 8007ba4:	4290      	cmp	r0, r2
 8007ba6:	bf38      	it	cc
 8007ba8:	2304      	movcc	r3, #4
 8007baa:	f841 c003 	str.w	ip, [r1, r3]
 8007bae:	f1bc 0f00 	cmp.w	ip, #0
 8007bb2:	d001      	beq.n	8007bb8 <__lshift+0xac>
 8007bb4:	f108 0602 	add.w	r6, r8, #2
 8007bb8:	3e01      	subs	r6, #1
 8007bba:	4638      	mov	r0, r7
 8007bbc:	612e      	str	r6, [r5, #16]
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	f7ff fdd2 	bl	8007768 <_Bfree>
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bca:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bce:	3301      	adds	r3, #1
 8007bd0:	e7c1      	b.n	8007b56 <__lshift+0x4a>
 8007bd2:	3904      	subs	r1, #4
 8007bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bdc:	4298      	cmp	r0, r3
 8007bde:	d8f9      	bhi.n	8007bd4 <__lshift+0xc8>
 8007be0:	e7ea      	b.n	8007bb8 <__lshift+0xac>
 8007be2:	bf00      	nop
 8007be4:	0800927b 	.word	0x0800927b
 8007be8:	080092ec 	.word	0x080092ec

08007bec <__mcmp>:
 8007bec:	b530      	push	{r4, r5, lr}
 8007bee:	6902      	ldr	r2, [r0, #16]
 8007bf0:	690c      	ldr	r4, [r1, #16]
 8007bf2:	1b12      	subs	r2, r2, r4
 8007bf4:	d10e      	bne.n	8007c14 <__mcmp+0x28>
 8007bf6:	f100 0314 	add.w	r3, r0, #20
 8007bfa:	3114      	adds	r1, #20
 8007bfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c0c:	42a5      	cmp	r5, r4
 8007c0e:	d003      	beq.n	8007c18 <__mcmp+0x2c>
 8007c10:	d305      	bcc.n	8007c1e <__mcmp+0x32>
 8007c12:	2201      	movs	r2, #1
 8007c14:	4610      	mov	r0, r2
 8007c16:	bd30      	pop	{r4, r5, pc}
 8007c18:	4283      	cmp	r3, r0
 8007c1a:	d3f3      	bcc.n	8007c04 <__mcmp+0x18>
 8007c1c:	e7fa      	b.n	8007c14 <__mcmp+0x28>
 8007c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c22:	e7f7      	b.n	8007c14 <__mcmp+0x28>

08007c24 <__mdiff>:
 8007c24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	460c      	mov	r4, r1
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4620      	mov	r0, r4
 8007c30:	4690      	mov	r8, r2
 8007c32:	f7ff ffdb 	bl	8007bec <__mcmp>
 8007c36:	1e05      	subs	r5, r0, #0
 8007c38:	d110      	bne.n	8007c5c <__mdiff+0x38>
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff fd53 	bl	80076e8 <_Balloc>
 8007c42:	b930      	cbnz	r0, 8007c52 <__mdiff+0x2e>
 8007c44:	4b3a      	ldr	r3, [pc, #232]	; (8007d30 <__mdiff+0x10c>)
 8007c46:	4602      	mov	r2, r0
 8007c48:	f240 2132 	movw	r1, #562	; 0x232
 8007c4c:	4839      	ldr	r0, [pc, #228]	; (8007d34 <__mdiff+0x110>)
 8007c4e:	f000 fb85 	bl	800835c <__assert_func>
 8007c52:	2301      	movs	r3, #1
 8007c54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5c:	bfa4      	itt	ge
 8007c5e:	4643      	movge	r3, r8
 8007c60:	46a0      	movge	r8, r4
 8007c62:	4630      	mov	r0, r6
 8007c64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c68:	bfa6      	itte	ge
 8007c6a:	461c      	movge	r4, r3
 8007c6c:	2500      	movge	r5, #0
 8007c6e:	2501      	movlt	r5, #1
 8007c70:	f7ff fd3a 	bl	80076e8 <_Balloc>
 8007c74:	b920      	cbnz	r0, 8007c80 <__mdiff+0x5c>
 8007c76:	4b2e      	ldr	r3, [pc, #184]	; (8007d30 <__mdiff+0x10c>)
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007c7e:	e7e5      	b.n	8007c4c <__mdiff+0x28>
 8007c80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c84:	6926      	ldr	r6, [r4, #16]
 8007c86:	60c5      	str	r5, [r0, #12]
 8007c88:	f104 0914 	add.w	r9, r4, #20
 8007c8c:	f108 0514 	add.w	r5, r8, #20
 8007c90:	f100 0e14 	add.w	lr, r0, #20
 8007c94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c9c:	f108 0210 	add.w	r2, r8, #16
 8007ca0:	46f2      	mov	sl, lr
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ca8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007cac:	fa1f f883 	uxth.w	r8, r3
 8007cb0:	fa11 f18b 	uxtah	r1, r1, fp
 8007cb4:	0c1b      	lsrs	r3, r3, #16
 8007cb6:	eba1 0808 	sub.w	r8, r1, r8
 8007cba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007cbe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007cc2:	fa1f f888 	uxth.w	r8, r8
 8007cc6:	1419      	asrs	r1, r3, #16
 8007cc8:	454e      	cmp	r6, r9
 8007cca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007cce:	f84a 3b04 	str.w	r3, [sl], #4
 8007cd2:	d8e7      	bhi.n	8007ca4 <__mdiff+0x80>
 8007cd4:	1b33      	subs	r3, r6, r4
 8007cd6:	3b15      	subs	r3, #21
 8007cd8:	f023 0303 	bic.w	r3, r3, #3
 8007cdc:	3304      	adds	r3, #4
 8007cde:	3415      	adds	r4, #21
 8007ce0:	42a6      	cmp	r6, r4
 8007ce2:	bf38      	it	cc
 8007ce4:	2304      	movcc	r3, #4
 8007ce6:	441d      	add	r5, r3
 8007ce8:	4473      	add	r3, lr
 8007cea:	469e      	mov	lr, r3
 8007cec:	462e      	mov	r6, r5
 8007cee:	4566      	cmp	r6, ip
 8007cf0:	d30e      	bcc.n	8007d10 <__mdiff+0xec>
 8007cf2:	f10c 0203 	add.w	r2, ip, #3
 8007cf6:	1b52      	subs	r2, r2, r5
 8007cf8:	f022 0203 	bic.w	r2, r2, #3
 8007cfc:	3d03      	subs	r5, #3
 8007cfe:	45ac      	cmp	ip, r5
 8007d00:	bf38      	it	cc
 8007d02:	2200      	movcc	r2, #0
 8007d04:	441a      	add	r2, r3
 8007d06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d0a:	b17b      	cbz	r3, 8007d2c <__mdiff+0x108>
 8007d0c:	6107      	str	r7, [r0, #16]
 8007d0e:	e7a3      	b.n	8007c58 <__mdiff+0x34>
 8007d10:	f856 8b04 	ldr.w	r8, [r6], #4
 8007d14:	fa11 f288 	uxtah	r2, r1, r8
 8007d18:	1414      	asrs	r4, r2, #16
 8007d1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d1e:	b292      	uxth	r2, r2
 8007d20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007d24:	f84e 2b04 	str.w	r2, [lr], #4
 8007d28:	1421      	asrs	r1, r4, #16
 8007d2a:	e7e0      	b.n	8007cee <__mdiff+0xca>
 8007d2c:	3f01      	subs	r7, #1
 8007d2e:	e7ea      	b.n	8007d06 <__mdiff+0xe2>
 8007d30:	0800927b 	.word	0x0800927b
 8007d34:	080092ec 	.word	0x080092ec

08007d38 <__d2b>:
 8007d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	2101      	movs	r1, #1
 8007d40:	ec57 6b10 	vmov	r6, r7, d0
 8007d44:	4690      	mov	r8, r2
 8007d46:	f7ff fccf 	bl	80076e8 <_Balloc>
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	b930      	cbnz	r0, 8007d5c <__d2b+0x24>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b25      	ldr	r3, [pc, #148]	; (8007de8 <__d2b+0xb0>)
 8007d52:	4826      	ldr	r0, [pc, #152]	; (8007dec <__d2b+0xb4>)
 8007d54:	f240 310a 	movw	r1, #778	; 0x30a
 8007d58:	f000 fb00 	bl	800835c <__assert_func>
 8007d5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d64:	bb35      	cbnz	r5, 8007db4 <__d2b+0x7c>
 8007d66:	2e00      	cmp	r6, #0
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	d028      	beq.n	8007dbe <__d2b+0x86>
 8007d6c:	4668      	mov	r0, sp
 8007d6e:	9600      	str	r6, [sp, #0]
 8007d70:	f7ff fd82 	bl	8007878 <__lo0bits>
 8007d74:	9900      	ldr	r1, [sp, #0]
 8007d76:	b300      	cbz	r0, 8007dba <__d2b+0x82>
 8007d78:	9a01      	ldr	r2, [sp, #4]
 8007d7a:	f1c0 0320 	rsb	r3, r0, #32
 8007d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d82:	430b      	orrs	r3, r1
 8007d84:	40c2      	lsrs	r2, r0
 8007d86:	6163      	str	r3, [r4, #20]
 8007d88:	9201      	str	r2, [sp, #4]
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	61a3      	str	r3, [r4, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bf14      	ite	ne
 8007d92:	2202      	movne	r2, #2
 8007d94:	2201      	moveq	r2, #1
 8007d96:	6122      	str	r2, [r4, #16]
 8007d98:	b1d5      	cbz	r5, 8007dd0 <__d2b+0x98>
 8007d9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d9e:	4405      	add	r5, r0
 8007da0:	f8c9 5000 	str.w	r5, [r9]
 8007da4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007da8:	f8c8 0000 	str.w	r0, [r8]
 8007dac:	4620      	mov	r0, r4
 8007dae:	b003      	add	sp, #12
 8007db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db8:	e7d5      	b.n	8007d66 <__d2b+0x2e>
 8007dba:	6161      	str	r1, [r4, #20]
 8007dbc:	e7e5      	b.n	8007d8a <__d2b+0x52>
 8007dbe:	a801      	add	r0, sp, #4
 8007dc0:	f7ff fd5a 	bl	8007878 <__lo0bits>
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	6163      	str	r3, [r4, #20]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	6122      	str	r2, [r4, #16]
 8007dcc:	3020      	adds	r0, #32
 8007dce:	e7e3      	b.n	8007d98 <__d2b+0x60>
 8007dd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007dd8:	f8c9 0000 	str.w	r0, [r9]
 8007ddc:	6918      	ldr	r0, [r3, #16]
 8007dde:	f7ff fd2b 	bl	8007838 <__hi0bits>
 8007de2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007de6:	e7df      	b.n	8007da8 <__d2b+0x70>
 8007de8:	0800927b 	.word	0x0800927b
 8007dec:	080092ec 	.word	0x080092ec

08007df0 <_calloc_r>:
 8007df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007df2:	fba1 2402 	umull	r2, r4, r1, r2
 8007df6:	b94c      	cbnz	r4, 8007e0c <_calloc_r+0x1c>
 8007df8:	4611      	mov	r1, r2
 8007dfa:	9201      	str	r2, [sp, #4]
 8007dfc:	f000 f87a 	bl	8007ef4 <_malloc_r>
 8007e00:	9a01      	ldr	r2, [sp, #4]
 8007e02:	4605      	mov	r5, r0
 8007e04:	b930      	cbnz	r0, 8007e14 <_calloc_r+0x24>
 8007e06:	4628      	mov	r0, r5
 8007e08:	b003      	add	sp, #12
 8007e0a:	bd30      	pop	{r4, r5, pc}
 8007e0c:	220c      	movs	r2, #12
 8007e0e:	6002      	str	r2, [r0, #0]
 8007e10:	2500      	movs	r5, #0
 8007e12:	e7f8      	b.n	8007e06 <_calloc_r+0x16>
 8007e14:	4621      	mov	r1, r4
 8007e16:	f7fd fe9b 	bl	8005b50 <memset>
 8007e1a:	e7f4      	b.n	8007e06 <_calloc_r+0x16>

08007e1c <_free_r>:
 8007e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e1e:	2900      	cmp	r1, #0
 8007e20:	d044      	beq.n	8007eac <_free_r+0x90>
 8007e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e26:	9001      	str	r0, [sp, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e2e:	bfb8      	it	lt
 8007e30:	18e4      	addlt	r4, r4, r3
 8007e32:	f000 fb19 	bl	8008468 <__malloc_lock>
 8007e36:	4a1e      	ldr	r2, [pc, #120]	; (8007eb0 <_free_r+0x94>)
 8007e38:	9801      	ldr	r0, [sp, #4]
 8007e3a:	6813      	ldr	r3, [r2, #0]
 8007e3c:	b933      	cbnz	r3, 8007e4c <_free_r+0x30>
 8007e3e:	6063      	str	r3, [r4, #4]
 8007e40:	6014      	str	r4, [r2, #0]
 8007e42:	b003      	add	sp, #12
 8007e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e48:	f000 bb14 	b.w	8008474 <__malloc_unlock>
 8007e4c:	42a3      	cmp	r3, r4
 8007e4e:	d908      	bls.n	8007e62 <_free_r+0x46>
 8007e50:	6825      	ldr	r5, [r4, #0]
 8007e52:	1961      	adds	r1, r4, r5
 8007e54:	428b      	cmp	r3, r1
 8007e56:	bf01      	itttt	eq
 8007e58:	6819      	ldreq	r1, [r3, #0]
 8007e5a:	685b      	ldreq	r3, [r3, #4]
 8007e5c:	1949      	addeq	r1, r1, r5
 8007e5e:	6021      	streq	r1, [r4, #0]
 8007e60:	e7ed      	b.n	8007e3e <_free_r+0x22>
 8007e62:	461a      	mov	r2, r3
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	b10b      	cbz	r3, 8007e6c <_free_r+0x50>
 8007e68:	42a3      	cmp	r3, r4
 8007e6a:	d9fa      	bls.n	8007e62 <_free_r+0x46>
 8007e6c:	6811      	ldr	r1, [r2, #0]
 8007e6e:	1855      	adds	r5, r2, r1
 8007e70:	42a5      	cmp	r5, r4
 8007e72:	d10b      	bne.n	8007e8c <_free_r+0x70>
 8007e74:	6824      	ldr	r4, [r4, #0]
 8007e76:	4421      	add	r1, r4
 8007e78:	1854      	adds	r4, r2, r1
 8007e7a:	42a3      	cmp	r3, r4
 8007e7c:	6011      	str	r1, [r2, #0]
 8007e7e:	d1e0      	bne.n	8007e42 <_free_r+0x26>
 8007e80:	681c      	ldr	r4, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	6053      	str	r3, [r2, #4]
 8007e86:	4421      	add	r1, r4
 8007e88:	6011      	str	r1, [r2, #0]
 8007e8a:	e7da      	b.n	8007e42 <_free_r+0x26>
 8007e8c:	d902      	bls.n	8007e94 <_free_r+0x78>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	6003      	str	r3, [r0, #0]
 8007e92:	e7d6      	b.n	8007e42 <_free_r+0x26>
 8007e94:	6825      	ldr	r5, [r4, #0]
 8007e96:	1961      	adds	r1, r4, r5
 8007e98:	428b      	cmp	r3, r1
 8007e9a:	bf04      	itt	eq
 8007e9c:	6819      	ldreq	r1, [r3, #0]
 8007e9e:	685b      	ldreq	r3, [r3, #4]
 8007ea0:	6063      	str	r3, [r4, #4]
 8007ea2:	bf04      	itt	eq
 8007ea4:	1949      	addeq	r1, r1, r5
 8007ea6:	6021      	streq	r1, [r4, #0]
 8007ea8:	6054      	str	r4, [r2, #4]
 8007eaa:	e7ca      	b.n	8007e42 <_free_r+0x26>
 8007eac:	b003      	add	sp, #12
 8007eae:	bd30      	pop	{r4, r5, pc}
 8007eb0:	24000330 	.word	0x24000330

08007eb4 <sbrk_aligned>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4e0e      	ldr	r6, [pc, #56]	; (8007ef0 <sbrk_aligned+0x3c>)
 8007eb8:	460c      	mov	r4, r1
 8007eba:	6831      	ldr	r1, [r6, #0]
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	b911      	cbnz	r1, 8007ec6 <sbrk_aligned+0x12>
 8007ec0:	f000 f9e6 	bl	8008290 <_sbrk_r>
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 f9e1 	bl	8008290 <_sbrk_r>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d00a      	beq.n	8007ee8 <sbrk_aligned+0x34>
 8007ed2:	1cc4      	adds	r4, r0, #3
 8007ed4:	f024 0403 	bic.w	r4, r4, #3
 8007ed8:	42a0      	cmp	r0, r4
 8007eda:	d007      	beq.n	8007eec <sbrk_aligned+0x38>
 8007edc:	1a21      	subs	r1, r4, r0
 8007ede:	4628      	mov	r0, r5
 8007ee0:	f000 f9d6 	bl	8008290 <_sbrk_r>
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d101      	bne.n	8007eec <sbrk_aligned+0x38>
 8007ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8007eec:	4620      	mov	r0, r4
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	24000334 	.word	0x24000334

08007ef4 <_malloc_r>:
 8007ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef8:	1ccd      	adds	r5, r1, #3
 8007efa:	f025 0503 	bic.w	r5, r5, #3
 8007efe:	3508      	adds	r5, #8
 8007f00:	2d0c      	cmp	r5, #12
 8007f02:	bf38      	it	cc
 8007f04:	250c      	movcc	r5, #12
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	4607      	mov	r7, r0
 8007f0a:	db01      	blt.n	8007f10 <_malloc_r+0x1c>
 8007f0c:	42a9      	cmp	r1, r5
 8007f0e:	d905      	bls.n	8007f1c <_malloc_r+0x28>
 8007f10:	230c      	movs	r3, #12
 8007f12:	603b      	str	r3, [r7, #0]
 8007f14:	2600      	movs	r6, #0
 8007f16:	4630      	mov	r0, r6
 8007f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f1c:	4e2e      	ldr	r6, [pc, #184]	; (8007fd8 <_malloc_r+0xe4>)
 8007f1e:	f000 faa3 	bl	8008468 <__malloc_lock>
 8007f22:	6833      	ldr	r3, [r6, #0]
 8007f24:	461c      	mov	r4, r3
 8007f26:	bb34      	cbnz	r4, 8007f76 <_malloc_r+0x82>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f7ff ffc2 	bl	8007eb4 <sbrk_aligned>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	4604      	mov	r4, r0
 8007f34:	d14d      	bne.n	8007fd2 <_malloc_r+0xde>
 8007f36:	6834      	ldr	r4, [r6, #0]
 8007f38:	4626      	mov	r6, r4
 8007f3a:	2e00      	cmp	r6, #0
 8007f3c:	d140      	bne.n	8007fc0 <_malloc_r+0xcc>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	4631      	mov	r1, r6
 8007f42:	4638      	mov	r0, r7
 8007f44:	eb04 0803 	add.w	r8, r4, r3
 8007f48:	f000 f9a2 	bl	8008290 <_sbrk_r>
 8007f4c:	4580      	cmp	r8, r0
 8007f4e:	d13a      	bne.n	8007fc6 <_malloc_r+0xd2>
 8007f50:	6821      	ldr	r1, [r4, #0]
 8007f52:	3503      	adds	r5, #3
 8007f54:	1a6d      	subs	r5, r5, r1
 8007f56:	f025 0503 	bic.w	r5, r5, #3
 8007f5a:	3508      	adds	r5, #8
 8007f5c:	2d0c      	cmp	r5, #12
 8007f5e:	bf38      	it	cc
 8007f60:	250c      	movcc	r5, #12
 8007f62:	4629      	mov	r1, r5
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff ffa5 	bl	8007eb4 <sbrk_aligned>
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d02b      	beq.n	8007fc6 <_malloc_r+0xd2>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	442b      	add	r3, r5
 8007f72:	6023      	str	r3, [r4, #0]
 8007f74:	e00e      	b.n	8007f94 <_malloc_r+0xa0>
 8007f76:	6822      	ldr	r2, [r4, #0]
 8007f78:	1b52      	subs	r2, r2, r5
 8007f7a:	d41e      	bmi.n	8007fba <_malloc_r+0xc6>
 8007f7c:	2a0b      	cmp	r2, #11
 8007f7e:	d916      	bls.n	8007fae <_malloc_r+0xba>
 8007f80:	1961      	adds	r1, r4, r5
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	6025      	str	r5, [r4, #0]
 8007f86:	bf18      	it	ne
 8007f88:	6059      	strne	r1, [r3, #4]
 8007f8a:	6863      	ldr	r3, [r4, #4]
 8007f8c:	bf08      	it	eq
 8007f8e:	6031      	streq	r1, [r6, #0]
 8007f90:	5162      	str	r2, [r4, r5]
 8007f92:	604b      	str	r3, [r1, #4]
 8007f94:	4638      	mov	r0, r7
 8007f96:	f104 060b 	add.w	r6, r4, #11
 8007f9a:	f000 fa6b 	bl	8008474 <__malloc_unlock>
 8007f9e:	f026 0607 	bic.w	r6, r6, #7
 8007fa2:	1d23      	adds	r3, r4, #4
 8007fa4:	1af2      	subs	r2, r6, r3
 8007fa6:	d0b6      	beq.n	8007f16 <_malloc_r+0x22>
 8007fa8:	1b9b      	subs	r3, r3, r6
 8007faa:	50a3      	str	r3, [r4, r2]
 8007fac:	e7b3      	b.n	8007f16 <_malloc_r+0x22>
 8007fae:	6862      	ldr	r2, [r4, #4]
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	bf0c      	ite	eq
 8007fb4:	6032      	streq	r2, [r6, #0]
 8007fb6:	605a      	strne	r2, [r3, #4]
 8007fb8:	e7ec      	b.n	8007f94 <_malloc_r+0xa0>
 8007fba:	4623      	mov	r3, r4
 8007fbc:	6864      	ldr	r4, [r4, #4]
 8007fbe:	e7b2      	b.n	8007f26 <_malloc_r+0x32>
 8007fc0:	4634      	mov	r4, r6
 8007fc2:	6876      	ldr	r6, [r6, #4]
 8007fc4:	e7b9      	b.n	8007f3a <_malloc_r+0x46>
 8007fc6:	230c      	movs	r3, #12
 8007fc8:	603b      	str	r3, [r7, #0]
 8007fca:	4638      	mov	r0, r7
 8007fcc:	f000 fa52 	bl	8008474 <__malloc_unlock>
 8007fd0:	e7a1      	b.n	8007f16 <_malloc_r+0x22>
 8007fd2:	6025      	str	r5, [r4, #0]
 8007fd4:	e7de      	b.n	8007f94 <_malloc_r+0xa0>
 8007fd6:	bf00      	nop
 8007fd8:	24000330 	.word	0x24000330

08007fdc <__sfputc_r>:
 8007fdc:	6893      	ldr	r3, [r2, #8]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	b410      	push	{r4}
 8007fe4:	6093      	str	r3, [r2, #8]
 8007fe6:	da08      	bge.n	8007ffa <__sfputc_r+0x1e>
 8007fe8:	6994      	ldr	r4, [r2, #24]
 8007fea:	42a3      	cmp	r3, r4
 8007fec:	db01      	blt.n	8007ff2 <__sfputc_r+0x16>
 8007fee:	290a      	cmp	r1, #10
 8007ff0:	d103      	bne.n	8007ffa <__sfputc_r+0x1e>
 8007ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff6:	f7fe ba83 	b.w	8006500 <__swbuf_r>
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	1c58      	adds	r0, r3, #1
 8007ffe:	6010      	str	r0, [r2, #0]
 8008000:	7019      	strb	r1, [r3, #0]
 8008002:	4608      	mov	r0, r1
 8008004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008008:	4770      	bx	lr

0800800a <__sfputs_r>:
 800800a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800c:	4606      	mov	r6, r0
 800800e:	460f      	mov	r7, r1
 8008010:	4614      	mov	r4, r2
 8008012:	18d5      	adds	r5, r2, r3
 8008014:	42ac      	cmp	r4, r5
 8008016:	d101      	bne.n	800801c <__sfputs_r+0x12>
 8008018:	2000      	movs	r0, #0
 800801a:	e007      	b.n	800802c <__sfputs_r+0x22>
 800801c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008020:	463a      	mov	r2, r7
 8008022:	4630      	mov	r0, r6
 8008024:	f7ff ffda 	bl	8007fdc <__sfputc_r>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d1f3      	bne.n	8008014 <__sfputs_r+0xa>
 800802c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008030 <_vfiprintf_r>:
 8008030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008034:	460d      	mov	r5, r1
 8008036:	b09d      	sub	sp, #116	; 0x74
 8008038:	4614      	mov	r4, r2
 800803a:	4698      	mov	r8, r3
 800803c:	4606      	mov	r6, r0
 800803e:	b118      	cbz	r0, 8008048 <_vfiprintf_r+0x18>
 8008040:	6983      	ldr	r3, [r0, #24]
 8008042:	b90b      	cbnz	r3, 8008048 <_vfiprintf_r+0x18>
 8008044:	f7ff fa30 	bl	80074a8 <__sinit>
 8008048:	4b89      	ldr	r3, [pc, #548]	; (8008270 <_vfiprintf_r+0x240>)
 800804a:	429d      	cmp	r5, r3
 800804c:	d11b      	bne.n	8008086 <_vfiprintf_r+0x56>
 800804e:	6875      	ldr	r5, [r6, #4]
 8008050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008052:	07d9      	lsls	r1, r3, #31
 8008054:	d405      	bmi.n	8008062 <_vfiprintf_r+0x32>
 8008056:	89ab      	ldrh	r3, [r5, #12]
 8008058:	059a      	lsls	r2, r3, #22
 800805a:	d402      	bmi.n	8008062 <_vfiprintf_r+0x32>
 800805c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800805e:	f7ff fac6 	bl	80075ee <__retarget_lock_acquire_recursive>
 8008062:	89ab      	ldrh	r3, [r5, #12]
 8008064:	071b      	lsls	r3, r3, #28
 8008066:	d501      	bpl.n	800806c <_vfiprintf_r+0x3c>
 8008068:	692b      	ldr	r3, [r5, #16]
 800806a:	b9eb      	cbnz	r3, 80080a8 <_vfiprintf_r+0x78>
 800806c:	4629      	mov	r1, r5
 800806e:	4630      	mov	r0, r6
 8008070:	f7fe fa98 	bl	80065a4 <__swsetup_r>
 8008074:	b1c0      	cbz	r0, 80080a8 <_vfiprintf_r+0x78>
 8008076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008078:	07dc      	lsls	r4, r3, #31
 800807a:	d50e      	bpl.n	800809a <_vfiprintf_r+0x6a>
 800807c:	f04f 30ff 	mov.w	r0, #4294967295
 8008080:	b01d      	add	sp, #116	; 0x74
 8008082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008086:	4b7b      	ldr	r3, [pc, #492]	; (8008274 <_vfiprintf_r+0x244>)
 8008088:	429d      	cmp	r5, r3
 800808a:	d101      	bne.n	8008090 <_vfiprintf_r+0x60>
 800808c:	68b5      	ldr	r5, [r6, #8]
 800808e:	e7df      	b.n	8008050 <_vfiprintf_r+0x20>
 8008090:	4b79      	ldr	r3, [pc, #484]	; (8008278 <_vfiprintf_r+0x248>)
 8008092:	429d      	cmp	r5, r3
 8008094:	bf08      	it	eq
 8008096:	68f5      	ldreq	r5, [r6, #12]
 8008098:	e7da      	b.n	8008050 <_vfiprintf_r+0x20>
 800809a:	89ab      	ldrh	r3, [r5, #12]
 800809c:	0598      	lsls	r0, r3, #22
 800809e:	d4ed      	bmi.n	800807c <_vfiprintf_r+0x4c>
 80080a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080a2:	f7ff faa5 	bl	80075f0 <__retarget_lock_release_recursive>
 80080a6:	e7e9      	b.n	800807c <_vfiprintf_r+0x4c>
 80080a8:	2300      	movs	r3, #0
 80080aa:	9309      	str	r3, [sp, #36]	; 0x24
 80080ac:	2320      	movs	r3, #32
 80080ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b6:	2330      	movs	r3, #48	; 0x30
 80080b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800827c <_vfiprintf_r+0x24c>
 80080bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080c0:	f04f 0901 	mov.w	r9, #1
 80080c4:	4623      	mov	r3, r4
 80080c6:	469a      	mov	sl, r3
 80080c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080cc:	b10a      	cbz	r2, 80080d2 <_vfiprintf_r+0xa2>
 80080ce:	2a25      	cmp	r2, #37	; 0x25
 80080d0:	d1f9      	bne.n	80080c6 <_vfiprintf_r+0x96>
 80080d2:	ebba 0b04 	subs.w	fp, sl, r4
 80080d6:	d00b      	beq.n	80080f0 <_vfiprintf_r+0xc0>
 80080d8:	465b      	mov	r3, fp
 80080da:	4622      	mov	r2, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	4630      	mov	r0, r6
 80080e0:	f7ff ff93 	bl	800800a <__sfputs_r>
 80080e4:	3001      	adds	r0, #1
 80080e6:	f000 80aa 	beq.w	800823e <_vfiprintf_r+0x20e>
 80080ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ec:	445a      	add	r2, fp
 80080ee:	9209      	str	r2, [sp, #36]	; 0x24
 80080f0:	f89a 3000 	ldrb.w	r3, [sl]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80a2 	beq.w	800823e <_vfiprintf_r+0x20e>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008104:	f10a 0a01 	add.w	sl, sl, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	9307      	str	r3, [sp, #28]
 800810c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008110:	931a      	str	r3, [sp, #104]	; 0x68
 8008112:	4654      	mov	r4, sl
 8008114:	2205      	movs	r2, #5
 8008116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811a:	4858      	ldr	r0, [pc, #352]	; (800827c <_vfiprintf_r+0x24c>)
 800811c:	f7f8 f8f0 	bl	8000300 <memchr>
 8008120:	9a04      	ldr	r2, [sp, #16]
 8008122:	b9d8      	cbnz	r0, 800815c <_vfiprintf_r+0x12c>
 8008124:	06d1      	lsls	r1, r2, #27
 8008126:	bf44      	itt	mi
 8008128:	2320      	movmi	r3, #32
 800812a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800812e:	0713      	lsls	r3, r2, #28
 8008130:	bf44      	itt	mi
 8008132:	232b      	movmi	r3, #43	; 0x2b
 8008134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008138:	f89a 3000 	ldrb.w	r3, [sl]
 800813c:	2b2a      	cmp	r3, #42	; 0x2a
 800813e:	d015      	beq.n	800816c <_vfiprintf_r+0x13c>
 8008140:	9a07      	ldr	r2, [sp, #28]
 8008142:	4654      	mov	r4, sl
 8008144:	2000      	movs	r0, #0
 8008146:	f04f 0c0a 	mov.w	ip, #10
 800814a:	4621      	mov	r1, r4
 800814c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008150:	3b30      	subs	r3, #48	; 0x30
 8008152:	2b09      	cmp	r3, #9
 8008154:	d94e      	bls.n	80081f4 <_vfiprintf_r+0x1c4>
 8008156:	b1b0      	cbz	r0, 8008186 <_vfiprintf_r+0x156>
 8008158:	9207      	str	r2, [sp, #28]
 800815a:	e014      	b.n	8008186 <_vfiprintf_r+0x156>
 800815c:	eba0 0308 	sub.w	r3, r0, r8
 8008160:	fa09 f303 	lsl.w	r3, r9, r3
 8008164:	4313      	orrs	r3, r2
 8008166:	9304      	str	r3, [sp, #16]
 8008168:	46a2      	mov	sl, r4
 800816a:	e7d2      	b.n	8008112 <_vfiprintf_r+0xe2>
 800816c:	9b03      	ldr	r3, [sp, #12]
 800816e:	1d19      	adds	r1, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	9103      	str	r1, [sp, #12]
 8008174:	2b00      	cmp	r3, #0
 8008176:	bfbb      	ittet	lt
 8008178:	425b      	neglt	r3, r3
 800817a:	f042 0202 	orrlt.w	r2, r2, #2
 800817e:	9307      	strge	r3, [sp, #28]
 8008180:	9307      	strlt	r3, [sp, #28]
 8008182:	bfb8      	it	lt
 8008184:	9204      	strlt	r2, [sp, #16]
 8008186:	7823      	ldrb	r3, [r4, #0]
 8008188:	2b2e      	cmp	r3, #46	; 0x2e
 800818a:	d10c      	bne.n	80081a6 <_vfiprintf_r+0x176>
 800818c:	7863      	ldrb	r3, [r4, #1]
 800818e:	2b2a      	cmp	r3, #42	; 0x2a
 8008190:	d135      	bne.n	80081fe <_vfiprintf_r+0x1ce>
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	1d1a      	adds	r2, r3, #4
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	9203      	str	r2, [sp, #12]
 800819a:	2b00      	cmp	r3, #0
 800819c:	bfb8      	it	lt
 800819e:	f04f 33ff 	movlt.w	r3, #4294967295
 80081a2:	3402      	adds	r4, #2
 80081a4:	9305      	str	r3, [sp, #20]
 80081a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800828c <_vfiprintf_r+0x25c>
 80081aa:	7821      	ldrb	r1, [r4, #0]
 80081ac:	2203      	movs	r2, #3
 80081ae:	4650      	mov	r0, sl
 80081b0:	f7f8 f8a6 	bl	8000300 <memchr>
 80081b4:	b140      	cbz	r0, 80081c8 <_vfiprintf_r+0x198>
 80081b6:	2340      	movs	r3, #64	; 0x40
 80081b8:	eba0 000a 	sub.w	r0, r0, sl
 80081bc:	fa03 f000 	lsl.w	r0, r3, r0
 80081c0:	9b04      	ldr	r3, [sp, #16]
 80081c2:	4303      	orrs	r3, r0
 80081c4:	3401      	adds	r4, #1
 80081c6:	9304      	str	r3, [sp, #16]
 80081c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081cc:	482c      	ldr	r0, [pc, #176]	; (8008280 <_vfiprintf_r+0x250>)
 80081ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081d2:	2206      	movs	r2, #6
 80081d4:	f7f8 f894 	bl	8000300 <memchr>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d03f      	beq.n	800825c <_vfiprintf_r+0x22c>
 80081dc:	4b29      	ldr	r3, [pc, #164]	; (8008284 <_vfiprintf_r+0x254>)
 80081de:	bb1b      	cbnz	r3, 8008228 <_vfiprintf_r+0x1f8>
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	3307      	adds	r3, #7
 80081e4:	f023 0307 	bic.w	r3, r3, #7
 80081e8:	3308      	adds	r3, #8
 80081ea:	9303      	str	r3, [sp, #12]
 80081ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ee:	443b      	add	r3, r7
 80081f0:	9309      	str	r3, [sp, #36]	; 0x24
 80081f2:	e767      	b.n	80080c4 <_vfiprintf_r+0x94>
 80081f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f8:	460c      	mov	r4, r1
 80081fa:	2001      	movs	r0, #1
 80081fc:	e7a5      	b.n	800814a <_vfiprintf_r+0x11a>
 80081fe:	2300      	movs	r3, #0
 8008200:	3401      	adds	r4, #1
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	4619      	mov	r1, r3
 8008206:	f04f 0c0a 	mov.w	ip, #10
 800820a:	4620      	mov	r0, r4
 800820c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008210:	3a30      	subs	r2, #48	; 0x30
 8008212:	2a09      	cmp	r2, #9
 8008214:	d903      	bls.n	800821e <_vfiprintf_r+0x1ee>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0c5      	beq.n	80081a6 <_vfiprintf_r+0x176>
 800821a:	9105      	str	r1, [sp, #20]
 800821c:	e7c3      	b.n	80081a6 <_vfiprintf_r+0x176>
 800821e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008222:	4604      	mov	r4, r0
 8008224:	2301      	movs	r3, #1
 8008226:	e7f0      	b.n	800820a <_vfiprintf_r+0x1da>
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	462a      	mov	r2, r5
 800822e:	4b16      	ldr	r3, [pc, #88]	; (8008288 <_vfiprintf_r+0x258>)
 8008230:	a904      	add	r1, sp, #16
 8008232:	4630      	mov	r0, r6
 8008234:	f7fd fd24 	bl	8005c80 <_printf_float>
 8008238:	4607      	mov	r7, r0
 800823a:	1c78      	adds	r0, r7, #1
 800823c:	d1d6      	bne.n	80081ec <_vfiprintf_r+0x1bc>
 800823e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008240:	07d9      	lsls	r1, r3, #31
 8008242:	d405      	bmi.n	8008250 <_vfiprintf_r+0x220>
 8008244:	89ab      	ldrh	r3, [r5, #12]
 8008246:	059a      	lsls	r2, r3, #22
 8008248:	d402      	bmi.n	8008250 <_vfiprintf_r+0x220>
 800824a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800824c:	f7ff f9d0 	bl	80075f0 <__retarget_lock_release_recursive>
 8008250:	89ab      	ldrh	r3, [r5, #12]
 8008252:	065b      	lsls	r3, r3, #25
 8008254:	f53f af12 	bmi.w	800807c <_vfiprintf_r+0x4c>
 8008258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800825a:	e711      	b.n	8008080 <_vfiprintf_r+0x50>
 800825c:	ab03      	add	r3, sp, #12
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	462a      	mov	r2, r5
 8008262:	4b09      	ldr	r3, [pc, #36]	; (8008288 <_vfiprintf_r+0x258>)
 8008264:	a904      	add	r1, sp, #16
 8008266:	4630      	mov	r0, r6
 8008268:	f7fd ff96 	bl	8006198 <_printf_i>
 800826c:	e7e4      	b.n	8008238 <_vfiprintf_r+0x208>
 800826e:	bf00      	nop
 8008270:	080092ac 	.word	0x080092ac
 8008274:	080092cc 	.word	0x080092cc
 8008278:	0800928c 	.word	0x0800928c
 800827c:	08009444 	.word	0x08009444
 8008280:	0800944e 	.word	0x0800944e
 8008284:	08005c81 	.word	0x08005c81
 8008288:	0800800b 	.word	0x0800800b
 800828c:	0800944a 	.word	0x0800944a

08008290 <_sbrk_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d06      	ldr	r5, [pc, #24]	; (80082ac <_sbrk_r+0x1c>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	602b      	str	r3, [r5, #0]
 800829c:	f7f8 ff3a 	bl	8001114 <_sbrk>
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	d102      	bne.n	80082aa <_sbrk_r+0x1a>
 80082a4:	682b      	ldr	r3, [r5, #0]
 80082a6:	b103      	cbz	r3, 80082aa <_sbrk_r+0x1a>
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	bd38      	pop	{r3, r4, r5, pc}
 80082ac:	24000338 	.word	0x24000338

080082b0 <__sread>:
 80082b0:	b510      	push	{r4, lr}
 80082b2:	460c      	mov	r4, r1
 80082b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b8:	f000 f8e2 	bl	8008480 <_read_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	bfab      	itete	ge
 80082c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082c2:	89a3      	ldrhlt	r3, [r4, #12]
 80082c4:	181b      	addge	r3, r3, r0
 80082c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082ca:	bfac      	ite	ge
 80082cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082ce:	81a3      	strhlt	r3, [r4, #12]
 80082d0:	bd10      	pop	{r4, pc}

080082d2 <__swrite>:
 80082d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082d6:	461f      	mov	r7, r3
 80082d8:	898b      	ldrh	r3, [r1, #12]
 80082da:	05db      	lsls	r3, r3, #23
 80082dc:	4605      	mov	r5, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	4616      	mov	r6, r2
 80082e2:	d505      	bpl.n	80082f0 <__swrite+0x1e>
 80082e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e8:	2302      	movs	r3, #2
 80082ea:	2200      	movs	r2, #0
 80082ec:	f000 f898 	bl	8008420 <_lseek_r>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	4632      	mov	r2, r6
 80082fe:	463b      	mov	r3, r7
 8008300:	4628      	mov	r0, r5
 8008302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008306:	f000 b817 	b.w	8008338 <_write_r>

0800830a <__sseek>:
 800830a:	b510      	push	{r4, lr}
 800830c:	460c      	mov	r4, r1
 800830e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008312:	f000 f885 	bl	8008420 <_lseek_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	bf15      	itete	ne
 800831c:	6560      	strne	r0, [r4, #84]	; 0x54
 800831e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008326:	81a3      	strheq	r3, [r4, #12]
 8008328:	bf18      	it	ne
 800832a:	81a3      	strhne	r3, [r4, #12]
 800832c:	bd10      	pop	{r4, pc}

0800832e <__sclose>:
 800832e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008332:	f000 b831 	b.w	8008398 <_close_r>
	...

08008338 <_write_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d07      	ldr	r5, [pc, #28]	; (8008358 <_write_r+0x20>)
 800833c:	4604      	mov	r4, r0
 800833e:	4608      	mov	r0, r1
 8008340:	4611      	mov	r1, r2
 8008342:	2200      	movs	r2, #0
 8008344:	602a      	str	r2, [r5, #0]
 8008346:	461a      	mov	r2, r3
 8008348:	f7f8 fe93 	bl	8001072 <_write>
 800834c:	1c43      	adds	r3, r0, #1
 800834e:	d102      	bne.n	8008356 <_write_r+0x1e>
 8008350:	682b      	ldr	r3, [r5, #0]
 8008352:	b103      	cbz	r3, 8008356 <_write_r+0x1e>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	bd38      	pop	{r3, r4, r5, pc}
 8008358:	24000338 	.word	0x24000338

0800835c <__assert_func>:
 800835c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800835e:	4614      	mov	r4, r2
 8008360:	461a      	mov	r2, r3
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <__assert_func+0x2c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4605      	mov	r5, r0
 8008368:	68d8      	ldr	r0, [r3, #12]
 800836a:	b14c      	cbz	r4, 8008380 <__assert_func+0x24>
 800836c:	4b07      	ldr	r3, [pc, #28]	; (800838c <__assert_func+0x30>)
 800836e:	9100      	str	r1, [sp, #0]
 8008370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008374:	4906      	ldr	r1, [pc, #24]	; (8008390 <__assert_func+0x34>)
 8008376:	462b      	mov	r3, r5
 8008378:	f000 f81e 	bl	80083b8 <fiprintf>
 800837c:	f000 f89f 	bl	80084be <abort>
 8008380:	4b04      	ldr	r3, [pc, #16]	; (8008394 <__assert_func+0x38>)
 8008382:	461c      	mov	r4, r3
 8008384:	e7f3      	b.n	800836e <__assert_func+0x12>
 8008386:	bf00      	nop
 8008388:	24000010 	.word	0x24000010
 800838c:	08009455 	.word	0x08009455
 8008390:	08009462 	.word	0x08009462
 8008394:	08009490 	.word	0x08009490

08008398 <_close_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	4d06      	ldr	r5, [pc, #24]	; (80083b4 <_close_r+0x1c>)
 800839c:	2300      	movs	r3, #0
 800839e:	4604      	mov	r4, r0
 80083a0:	4608      	mov	r0, r1
 80083a2:	602b      	str	r3, [r5, #0]
 80083a4:	f7f8 fe81 	bl	80010aa <_close>
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	d102      	bne.n	80083b2 <_close_r+0x1a>
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	b103      	cbz	r3, 80083b2 <_close_r+0x1a>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd38      	pop	{r3, r4, r5, pc}
 80083b4:	24000338 	.word	0x24000338

080083b8 <fiprintf>:
 80083b8:	b40e      	push	{r1, r2, r3}
 80083ba:	b503      	push	{r0, r1, lr}
 80083bc:	4601      	mov	r1, r0
 80083be:	ab03      	add	r3, sp, #12
 80083c0:	4805      	ldr	r0, [pc, #20]	; (80083d8 <fiprintf+0x20>)
 80083c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c6:	6800      	ldr	r0, [r0, #0]
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	f7ff fe31 	bl	8008030 <_vfiprintf_r>
 80083ce:	b002      	add	sp, #8
 80083d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083d4:	b003      	add	sp, #12
 80083d6:	4770      	bx	lr
 80083d8:	24000010 	.word	0x24000010

080083dc <_fstat_r>:
 80083dc:	b538      	push	{r3, r4, r5, lr}
 80083de:	4d07      	ldr	r5, [pc, #28]	; (80083fc <_fstat_r+0x20>)
 80083e0:	2300      	movs	r3, #0
 80083e2:	4604      	mov	r4, r0
 80083e4:	4608      	mov	r0, r1
 80083e6:	4611      	mov	r1, r2
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	f7f8 fe6a 	bl	80010c2 <_fstat>
 80083ee:	1c43      	adds	r3, r0, #1
 80083f0:	d102      	bne.n	80083f8 <_fstat_r+0x1c>
 80083f2:	682b      	ldr	r3, [r5, #0]
 80083f4:	b103      	cbz	r3, 80083f8 <_fstat_r+0x1c>
 80083f6:	6023      	str	r3, [r4, #0]
 80083f8:	bd38      	pop	{r3, r4, r5, pc}
 80083fa:	bf00      	nop
 80083fc:	24000338 	.word	0x24000338

08008400 <_isatty_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4d06      	ldr	r5, [pc, #24]	; (800841c <_isatty_r+0x1c>)
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	4608      	mov	r0, r1
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	f7f8 fe69 	bl	80010e2 <_isatty>
 8008410:	1c43      	adds	r3, r0, #1
 8008412:	d102      	bne.n	800841a <_isatty_r+0x1a>
 8008414:	682b      	ldr	r3, [r5, #0]
 8008416:	b103      	cbz	r3, 800841a <_isatty_r+0x1a>
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	bd38      	pop	{r3, r4, r5, pc}
 800841c:	24000338 	.word	0x24000338

08008420 <_lseek_r>:
 8008420:	b538      	push	{r3, r4, r5, lr}
 8008422:	4d07      	ldr	r5, [pc, #28]	; (8008440 <_lseek_r+0x20>)
 8008424:	4604      	mov	r4, r0
 8008426:	4608      	mov	r0, r1
 8008428:	4611      	mov	r1, r2
 800842a:	2200      	movs	r2, #0
 800842c:	602a      	str	r2, [r5, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	f7f8 fe62 	bl	80010f8 <_lseek>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_lseek_r+0x1e>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_lseek_r+0x1e>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	24000338 	.word	0x24000338

08008444 <__ascii_mbtowc>:
 8008444:	b082      	sub	sp, #8
 8008446:	b901      	cbnz	r1, 800844a <__ascii_mbtowc+0x6>
 8008448:	a901      	add	r1, sp, #4
 800844a:	b142      	cbz	r2, 800845e <__ascii_mbtowc+0x1a>
 800844c:	b14b      	cbz	r3, 8008462 <__ascii_mbtowc+0x1e>
 800844e:	7813      	ldrb	r3, [r2, #0]
 8008450:	600b      	str	r3, [r1, #0]
 8008452:	7812      	ldrb	r2, [r2, #0]
 8008454:	1e10      	subs	r0, r2, #0
 8008456:	bf18      	it	ne
 8008458:	2001      	movne	r0, #1
 800845a:	b002      	add	sp, #8
 800845c:	4770      	bx	lr
 800845e:	4610      	mov	r0, r2
 8008460:	e7fb      	b.n	800845a <__ascii_mbtowc+0x16>
 8008462:	f06f 0001 	mvn.w	r0, #1
 8008466:	e7f8      	b.n	800845a <__ascii_mbtowc+0x16>

08008468 <__malloc_lock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_lock+0x8>)
 800846a:	f7ff b8c0 	b.w	80075ee <__retarget_lock_acquire_recursive>
 800846e:	bf00      	nop
 8008470:	2400032c 	.word	0x2400032c

08008474 <__malloc_unlock>:
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__malloc_unlock+0x8>)
 8008476:	f7ff b8bb 	b.w	80075f0 <__retarget_lock_release_recursive>
 800847a:	bf00      	nop
 800847c:	2400032c 	.word	0x2400032c

08008480 <_read_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d07      	ldr	r5, [pc, #28]	; (80084a0 <_read_r+0x20>)
 8008484:	4604      	mov	r4, r0
 8008486:	4608      	mov	r0, r1
 8008488:	4611      	mov	r1, r2
 800848a:	2200      	movs	r2, #0
 800848c:	602a      	str	r2, [r5, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	f7f8 fdd2 	bl	8001038 <_read>
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d102      	bne.n	800849e <_read_r+0x1e>
 8008498:	682b      	ldr	r3, [r5, #0]
 800849a:	b103      	cbz	r3, 800849e <_read_r+0x1e>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	bd38      	pop	{r3, r4, r5, pc}
 80084a0:	24000338 	.word	0x24000338

080084a4 <__ascii_wctomb>:
 80084a4:	b149      	cbz	r1, 80084ba <__ascii_wctomb+0x16>
 80084a6:	2aff      	cmp	r2, #255	; 0xff
 80084a8:	bf85      	ittet	hi
 80084aa:	238a      	movhi	r3, #138	; 0x8a
 80084ac:	6003      	strhi	r3, [r0, #0]
 80084ae:	700a      	strbls	r2, [r1, #0]
 80084b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80084b4:	bf98      	it	ls
 80084b6:	2001      	movls	r0, #1
 80084b8:	4770      	bx	lr
 80084ba:	4608      	mov	r0, r1
 80084bc:	4770      	bx	lr

080084be <abort>:
 80084be:	b508      	push	{r3, lr}
 80084c0:	2006      	movs	r0, #6
 80084c2:	f000 f82b 	bl	800851c <raise>
 80084c6:	2001      	movs	r0, #1
 80084c8:	f7f8 fdac 	bl	8001024 <_exit>

080084cc <_raise_r>:
 80084cc:	291f      	cmp	r1, #31
 80084ce:	b538      	push	{r3, r4, r5, lr}
 80084d0:	4604      	mov	r4, r0
 80084d2:	460d      	mov	r5, r1
 80084d4:	d904      	bls.n	80084e0 <_raise_r+0x14>
 80084d6:	2316      	movs	r3, #22
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	f04f 30ff 	mov.w	r0, #4294967295
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084e2:	b112      	cbz	r2, 80084ea <_raise_r+0x1e>
 80084e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084e8:	b94b      	cbnz	r3, 80084fe <_raise_r+0x32>
 80084ea:	4620      	mov	r0, r4
 80084ec:	f000 f830 	bl	8008550 <_getpid_r>
 80084f0:	462a      	mov	r2, r5
 80084f2:	4601      	mov	r1, r0
 80084f4:	4620      	mov	r0, r4
 80084f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084fa:	f000 b817 	b.w	800852c <_kill_r>
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d00a      	beq.n	8008518 <_raise_r+0x4c>
 8008502:	1c59      	adds	r1, r3, #1
 8008504:	d103      	bne.n	800850e <_raise_r+0x42>
 8008506:	2316      	movs	r3, #22
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	2001      	movs	r0, #1
 800850c:	e7e7      	b.n	80084de <_raise_r+0x12>
 800850e:	2400      	movs	r4, #0
 8008510:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008514:	4628      	mov	r0, r5
 8008516:	4798      	blx	r3
 8008518:	2000      	movs	r0, #0
 800851a:	e7e0      	b.n	80084de <_raise_r+0x12>

0800851c <raise>:
 800851c:	4b02      	ldr	r3, [pc, #8]	; (8008528 <raise+0xc>)
 800851e:	4601      	mov	r1, r0
 8008520:	6818      	ldr	r0, [r3, #0]
 8008522:	f7ff bfd3 	b.w	80084cc <_raise_r>
 8008526:	bf00      	nop
 8008528:	24000010 	.word	0x24000010

0800852c <_kill_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d07      	ldr	r5, [pc, #28]	; (800854c <_kill_r+0x20>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	4611      	mov	r1, r2
 8008538:	602b      	str	r3, [r5, #0]
 800853a:	f7f8 fd63 	bl	8001004 <_kill>
 800853e:	1c43      	adds	r3, r0, #1
 8008540:	d102      	bne.n	8008548 <_kill_r+0x1c>
 8008542:	682b      	ldr	r3, [r5, #0]
 8008544:	b103      	cbz	r3, 8008548 <_kill_r+0x1c>
 8008546:	6023      	str	r3, [r4, #0]
 8008548:	bd38      	pop	{r3, r4, r5, pc}
 800854a:	bf00      	nop
 800854c:	24000338 	.word	0x24000338

08008550 <_getpid_r>:
 8008550:	f7f8 bd50 	b.w	8000ff4 <_getpid>
 8008554:	0000      	movs	r0, r0
	...

08008558 <sin>:
 8008558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800855a:	eeb0 7b40 	vmov.f64	d7, d0
 800855e:	ee17 3a90 	vmov	r3, s15
 8008562:	4a21      	ldr	r2, [pc, #132]	; (80085e8 <sin+0x90>)
 8008564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008568:	4293      	cmp	r3, r2
 800856a:	dc07      	bgt.n	800857c <sin+0x24>
 800856c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80085e0 <sin+0x88>
 8008570:	2000      	movs	r0, #0
 8008572:	b005      	add	sp, #20
 8008574:	f85d eb04 	ldr.w	lr, [sp], #4
 8008578:	f000 bc82 	b.w	8008e80 <__kernel_sin>
 800857c:	4a1b      	ldr	r2, [pc, #108]	; (80085ec <sin+0x94>)
 800857e:	4293      	cmp	r3, r2
 8008580:	dd04      	ble.n	800858c <sin+0x34>
 8008582:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008586:	b005      	add	sp, #20
 8008588:	f85d fb04 	ldr.w	pc, [sp], #4
 800858c:	4668      	mov	r0, sp
 800858e:	f000 f82f 	bl	80085f0 <__ieee754_rem_pio2>
 8008592:	f000 0003 	and.w	r0, r0, #3
 8008596:	2801      	cmp	r0, #1
 8008598:	d00a      	beq.n	80085b0 <sin+0x58>
 800859a:	2802      	cmp	r0, #2
 800859c:	d00f      	beq.n	80085be <sin+0x66>
 800859e:	b9c0      	cbnz	r0, 80085d2 <sin+0x7a>
 80085a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085a4:	ed9d 0b00 	vldr	d0, [sp]
 80085a8:	2001      	movs	r0, #1
 80085aa:	f000 fc69 	bl	8008e80 <__kernel_sin>
 80085ae:	e7ea      	b.n	8008586 <sin+0x2e>
 80085b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085b4:	ed9d 0b00 	vldr	d0, [sp]
 80085b8:	f000 f95e 	bl	8008878 <__kernel_cos>
 80085bc:	e7e3      	b.n	8008586 <sin+0x2e>
 80085be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085c2:	ed9d 0b00 	vldr	d0, [sp]
 80085c6:	2001      	movs	r0, #1
 80085c8:	f000 fc5a 	bl	8008e80 <__kernel_sin>
 80085cc:	eeb1 0b40 	vneg.f64	d0, d0
 80085d0:	e7d9      	b.n	8008586 <sin+0x2e>
 80085d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085d6:	ed9d 0b00 	vldr	d0, [sp]
 80085da:	f000 f94d 	bl	8008878 <__kernel_cos>
 80085de:	e7f5      	b.n	80085cc <sin+0x74>
	...
 80085e8:	3fe921fb 	.word	0x3fe921fb
 80085ec:	7fefffff 	.word	0x7fefffff

080085f0 <__ieee754_rem_pio2>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	eeb0 7b40 	vmov.f64	d7, d0
 80085f6:	ee17 5a90 	vmov	r5, s15
 80085fa:	4b99      	ldr	r3, [pc, #612]	; (8008860 <__ieee754_rem_pio2+0x270>)
 80085fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008600:	429e      	cmp	r6, r3
 8008602:	b088      	sub	sp, #32
 8008604:	4604      	mov	r4, r0
 8008606:	dc07      	bgt.n	8008618 <__ieee754_rem_pio2+0x28>
 8008608:	2200      	movs	r2, #0
 800860a:	2300      	movs	r3, #0
 800860c:	ed84 0b00 	vstr	d0, [r4]
 8008610:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008614:	2000      	movs	r0, #0
 8008616:	e01b      	b.n	8008650 <__ieee754_rem_pio2+0x60>
 8008618:	4b92      	ldr	r3, [pc, #584]	; (8008864 <__ieee754_rem_pio2+0x274>)
 800861a:	429e      	cmp	r6, r3
 800861c:	dc3b      	bgt.n	8008696 <__ieee754_rem_pio2+0xa6>
 800861e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8008622:	2d00      	cmp	r5, #0
 8008624:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8008820 <__ieee754_rem_pio2+0x230>
 8008628:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800862c:	dd19      	ble.n	8008662 <__ieee754_rem_pio2+0x72>
 800862e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008632:	429e      	cmp	r6, r3
 8008634:	d00e      	beq.n	8008654 <__ieee754_rem_pio2+0x64>
 8008636:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008828 <__ieee754_rem_pio2+0x238>
 800863a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800863e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008642:	ed84 5b00 	vstr	d5, [r4]
 8008646:	ee37 7b46 	vsub.f64	d7, d7, d6
 800864a:	ed84 7b02 	vstr	d7, [r4, #8]
 800864e:	2001      	movs	r0, #1
 8008650:	b008      	add	sp, #32
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008830 <__ieee754_rem_pio2+0x240>
 8008658:	ee37 7b46 	vsub.f64	d7, d7, d6
 800865c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008838 <__ieee754_rem_pio2+0x248>
 8008660:	e7eb      	b.n	800863a <__ieee754_rem_pio2+0x4a>
 8008662:	429e      	cmp	r6, r3
 8008664:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008668:	d00e      	beq.n	8008688 <__ieee754_rem_pio2+0x98>
 800866a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8008828 <__ieee754_rem_pio2+0x238>
 800866e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008672:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008676:	ed84 5b00 	vstr	d5, [r4]
 800867a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800867e:	f04f 30ff 	mov.w	r0, #4294967295
 8008682:	ed84 7b02 	vstr	d7, [r4, #8]
 8008686:	e7e3      	b.n	8008650 <__ieee754_rem_pio2+0x60>
 8008688:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008830 <__ieee754_rem_pio2+0x240>
 800868c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008690:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008838 <__ieee754_rem_pio2+0x248>
 8008694:	e7eb      	b.n	800866e <__ieee754_rem_pio2+0x7e>
 8008696:	4b74      	ldr	r3, [pc, #464]	; (8008868 <__ieee754_rem_pio2+0x278>)
 8008698:	429e      	cmp	r6, r3
 800869a:	dc70      	bgt.n	800877e <__ieee754_rem_pio2+0x18e>
 800869c:	f000 fc48 	bl	8008f30 <fabs>
 80086a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80086a4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008840 <__ieee754_rem_pio2+0x250>
 80086a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80086ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80086b0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80086b4:	ee17 0a90 	vmov	r0, s15
 80086b8:	eeb1 4b45 	vneg.f64	d4, d5
 80086bc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008820 <__ieee754_rem_pio2+0x230>
 80086c0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80086c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008828 <__ieee754_rem_pio2+0x238>
 80086c8:	281f      	cmp	r0, #31
 80086ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 80086ce:	ee30 6b47 	vsub.f64	d6, d0, d7
 80086d2:	dc08      	bgt.n	80086e6 <__ieee754_rem_pio2+0xf6>
 80086d4:	4b65      	ldr	r3, [pc, #404]	; (800886c <__ieee754_rem_pio2+0x27c>)
 80086d6:	1e42      	subs	r2, r0, #1
 80086d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086dc:	42b3      	cmp	r3, r6
 80086de:	d002      	beq.n	80086e6 <__ieee754_rem_pio2+0xf6>
 80086e0:	ed84 6b00 	vstr	d6, [r4]
 80086e4:	e026      	b.n	8008734 <__ieee754_rem_pio2+0x144>
 80086e6:	ee16 3a90 	vmov	r3, s13
 80086ea:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80086ee:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80086f2:	2b10      	cmp	r3, #16
 80086f4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80086f8:	ddf2      	ble.n	80086e0 <__ieee754_rem_pio2+0xf0>
 80086fa:	eeb0 6b40 	vmov.f64	d6, d0
 80086fe:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8008830 <__ieee754_rem_pio2+0x240>
 8008702:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8008838 <__ieee754_rem_pio2+0x248>
 8008706:	eea4 6b07 	vfma.f64	d6, d4, d7
 800870a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800870e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008712:	eeb0 7b40 	vmov.f64	d7, d0
 8008716:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800871a:	ee36 3b47 	vsub.f64	d3, d6, d7
 800871e:	ee13 3a90 	vmov	r3, s7
 8008722:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b31      	cmp	r3, #49	; 0x31
 800872a:	dc17      	bgt.n	800875c <__ieee754_rem_pio2+0x16c>
 800872c:	eeb0 0b46 	vmov.f64	d0, d6
 8008730:	ed84 3b00 	vstr	d3, [r4]
 8008734:	ed94 6b00 	vldr	d6, [r4]
 8008738:	2d00      	cmp	r5, #0
 800873a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800873e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008742:	ed84 0b02 	vstr	d0, [r4, #8]
 8008746:	da83      	bge.n	8008650 <__ieee754_rem_pio2+0x60>
 8008748:	eeb1 6b46 	vneg.f64	d6, d6
 800874c:	eeb1 0b40 	vneg.f64	d0, d0
 8008750:	ed84 6b00 	vstr	d6, [r4]
 8008754:	ed84 0b02 	vstr	d0, [r4, #8]
 8008758:	4240      	negs	r0, r0
 800875a:	e779      	b.n	8008650 <__ieee754_rem_pio2+0x60>
 800875c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8008848 <__ieee754_rem_pio2+0x258>
 8008760:	eeb0 0b46 	vmov.f64	d0, d6
 8008764:	eea4 0b03 	vfma.f64	d0, d4, d3
 8008768:	ee36 7b40 	vsub.f64	d7, d6, d0
 800876c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008850 <__ieee754_rem_pio2+0x260>
 8008770:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008774:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8008778:	ee30 6b47 	vsub.f64	d6, d0, d7
 800877c:	e7b0      	b.n	80086e0 <__ieee754_rem_pio2+0xf0>
 800877e:	4b3c      	ldr	r3, [pc, #240]	; (8008870 <__ieee754_rem_pio2+0x280>)
 8008780:	429e      	cmp	r6, r3
 8008782:	dd06      	ble.n	8008792 <__ieee754_rem_pio2+0x1a2>
 8008784:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008788:	ed80 7b02 	vstr	d7, [r0, #8]
 800878c:	ed80 7b00 	vstr	d7, [r0]
 8008790:	e740      	b.n	8008614 <__ieee754_rem_pio2+0x24>
 8008792:	1532      	asrs	r2, r6, #20
 8008794:	ee10 0a10 	vmov	r0, s0
 8008798:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800879c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80087a0:	ec41 0b17 	vmov	d7, r0, r1
 80087a4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80087a8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008858 <__ieee754_rem_pio2+0x268>
 80087ac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80087b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80087b4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80087b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80087bc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80087c0:	a902      	add	r1, sp, #8
 80087c2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80087c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80087ca:	ed8d 6b04 	vstr	d6, [sp, #16]
 80087ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80087d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087d6:	2603      	movs	r6, #3
 80087d8:	4608      	mov	r0, r1
 80087da:	ed91 7b04 	vldr	d7, [r1, #16]
 80087de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e6:	4633      	mov	r3, r6
 80087e8:	f1a1 0108 	sub.w	r1, r1, #8
 80087ec:	f106 36ff 	add.w	r6, r6, #4294967295
 80087f0:	d0f3      	beq.n	80087da <__ieee754_rem_pio2+0x1ea>
 80087f2:	4920      	ldr	r1, [pc, #128]	; (8008874 <__ieee754_rem_pio2+0x284>)
 80087f4:	9101      	str	r1, [sp, #4]
 80087f6:	2102      	movs	r1, #2
 80087f8:	9100      	str	r1, [sp, #0]
 80087fa:	4621      	mov	r1, r4
 80087fc:	f000 f8a8 	bl	8008950 <__kernel_rem_pio2>
 8008800:	2d00      	cmp	r5, #0
 8008802:	f6bf af25 	bge.w	8008650 <__ieee754_rem_pio2+0x60>
 8008806:	ed94 7b00 	vldr	d7, [r4]
 800880a:	eeb1 7b47 	vneg.f64	d7, d7
 800880e:	ed84 7b00 	vstr	d7, [r4]
 8008812:	ed94 7b02 	vldr	d7, [r4, #8]
 8008816:	eeb1 7b47 	vneg.f64	d7, d7
 800881a:	ed84 7b02 	vstr	d7, [r4, #8]
 800881e:	e79b      	b.n	8008758 <__ieee754_rem_pio2+0x168>
 8008820:	54400000 	.word	0x54400000
 8008824:	3ff921fb 	.word	0x3ff921fb
 8008828:	1a626331 	.word	0x1a626331
 800882c:	3dd0b461 	.word	0x3dd0b461
 8008830:	1a600000 	.word	0x1a600000
 8008834:	3dd0b461 	.word	0x3dd0b461
 8008838:	2e037073 	.word	0x2e037073
 800883c:	3ba3198a 	.word	0x3ba3198a
 8008840:	6dc9c883 	.word	0x6dc9c883
 8008844:	3fe45f30 	.word	0x3fe45f30
 8008848:	2e000000 	.word	0x2e000000
 800884c:	3ba3198a 	.word	0x3ba3198a
 8008850:	252049c1 	.word	0x252049c1
 8008854:	397b839a 	.word	0x397b839a
 8008858:	00000000 	.word	0x00000000
 800885c:	41700000 	.word	0x41700000
 8008860:	3fe921fb 	.word	0x3fe921fb
 8008864:	4002d97b 	.word	0x4002d97b
 8008868:	413921fb 	.word	0x413921fb
 800886c:	0800959c 	.word	0x0800959c
 8008870:	7fefffff 	.word	0x7fefffff
 8008874:	0800961c 	.word	0x0800961c

08008878 <__kernel_cos>:
 8008878:	ee10 1a90 	vmov	r1, s1
 800887c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008884:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008888:	da05      	bge.n	8008896 <__kernel_cos+0x1e>
 800888a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800888e:	ee17 3a90 	vmov	r3, s15
 8008892:	2b00      	cmp	r3, #0
 8008894:	d03d      	beq.n	8008912 <__kernel_cos+0x9a>
 8008896:	ee20 3b00 	vmul.f64	d3, d0, d0
 800889a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008918 <__kernel_cos+0xa0>
 800889e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008920 <__kernel_cos+0xa8>
 80088a2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80088a6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008928 <__kernel_cos+0xb0>
 80088aa:	eea6 7b03 	vfma.f64	d7, d6, d3
 80088ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008930 <__kernel_cos+0xb8>
 80088b2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80088b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008938 <__kernel_cos+0xc0>
 80088ba:	4b23      	ldr	r3, [pc, #140]	; (8008948 <__kernel_cos+0xd0>)
 80088bc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80088c0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008940 <__kernel_cos+0xc8>
 80088c4:	4299      	cmp	r1, r3
 80088c6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80088ca:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80088ce:	ee26 5b03 	vmul.f64	d5, d6, d3
 80088d2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80088d6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80088da:	eea3 6b05 	vfma.f64	d6, d3, d5
 80088de:	dc04      	bgt.n	80088ea <__kernel_cos+0x72>
 80088e0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80088e4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80088e8:	4770      	bx	lr
 80088ea:	4b18      	ldr	r3, [pc, #96]	; (800894c <__kernel_cos+0xd4>)
 80088ec:	4299      	cmp	r1, r3
 80088ee:	dc0d      	bgt.n	800890c <__kernel_cos+0x94>
 80088f0:	2200      	movs	r2, #0
 80088f2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80088f6:	ec43 2b15 	vmov	d5, r2, r3
 80088fa:	ee34 0b45 	vsub.f64	d0, d4, d5
 80088fe:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008902:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008906:	ee30 0b47 	vsub.f64	d0, d0, d7
 800890a:	4770      	bx	lr
 800890c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008910:	e7f3      	b.n	80088fa <__kernel_cos+0x82>
 8008912:	eeb0 0b44 	vmov.f64	d0, d4
 8008916:	4770      	bx	lr
 8008918:	be8838d4 	.word	0xbe8838d4
 800891c:	bda8fae9 	.word	0xbda8fae9
 8008920:	bdb4b1c4 	.word	0xbdb4b1c4
 8008924:	3e21ee9e 	.word	0x3e21ee9e
 8008928:	809c52ad 	.word	0x809c52ad
 800892c:	be927e4f 	.word	0xbe927e4f
 8008930:	19cb1590 	.word	0x19cb1590
 8008934:	3efa01a0 	.word	0x3efa01a0
 8008938:	16c15177 	.word	0x16c15177
 800893c:	bf56c16c 	.word	0xbf56c16c
 8008940:	5555554c 	.word	0x5555554c
 8008944:	3fa55555 	.word	0x3fa55555
 8008948:	3fd33332 	.word	0x3fd33332
 800894c:	3fe90000 	.word	0x3fe90000

08008950 <__kernel_rem_pio2>:
 8008950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	ed2d 8b06 	vpush	{d8-d10}
 8008958:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800895c:	460f      	mov	r7, r1
 800895e:	9002      	str	r0, [sp, #8]
 8008960:	49c5      	ldr	r1, [pc, #788]	; (8008c78 <__kernel_rem_pio2+0x328>)
 8008962:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8008964:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8008968:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800896c:	9301      	str	r3, [sp, #4]
 800896e:	f112 0f14 	cmn.w	r2, #20
 8008972:	bfa8      	it	ge
 8008974:	2018      	movge	r0, #24
 8008976:	f103 31ff 	add.w	r1, r3, #4294967295
 800897a:	bfb8      	it	lt
 800897c:	2000      	movlt	r0, #0
 800897e:	f06f 0417 	mvn.w	r4, #23
 8008982:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8008c60 <__kernel_rem_pio2+0x310>
 8008986:	bfa4      	itt	ge
 8008988:	f1a2 0a03 	subge.w	sl, r2, #3
 800898c:	fb9a f0f0 	sdivge	r0, sl, r0
 8008990:	fb00 4404 	mla	r4, r0, r4, r4
 8008994:	1a46      	subs	r6, r0, r1
 8008996:	4414      	add	r4, r2
 8008998:	eb09 0c01 	add.w	ip, r9, r1
 800899c:	ad1a      	add	r5, sp, #104	; 0x68
 800899e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80089a2:	2200      	movs	r2, #0
 80089a4:	4562      	cmp	r2, ip
 80089a6:	dd10      	ble.n	80089ca <__kernel_rem_pio2+0x7a>
 80089a8:	9a01      	ldr	r2, [sp, #4]
 80089aa:	ab1a      	add	r3, sp, #104	; 0x68
 80089ac:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80089b0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80089b4:	f04f 0c00 	mov.w	ip, #0
 80089b8:	45cc      	cmp	ip, r9
 80089ba:	dc26      	bgt.n	8008a0a <__kernel_rem_pio2+0xba>
 80089bc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8008c60 <__kernel_rem_pio2+0x310>
 80089c0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80089c4:	4616      	mov	r6, r2
 80089c6:	2500      	movs	r5, #0
 80089c8:	e015      	b.n	80089f6 <__kernel_rem_pio2+0xa6>
 80089ca:	42d6      	cmn	r6, r2
 80089cc:	d409      	bmi.n	80089e2 <__kernel_rem_pio2+0x92>
 80089ce:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80089d2:	ee07 3a90 	vmov	s15, r3
 80089d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089da:	eca5 7b02 	vstmia	r5!, {d7}
 80089de:	3201      	adds	r2, #1
 80089e0:	e7e0      	b.n	80089a4 <__kernel_rem_pio2+0x54>
 80089e2:	eeb0 7b46 	vmov.f64	d7, d6
 80089e6:	e7f8      	b.n	80089da <__kernel_rem_pio2+0x8a>
 80089e8:	ecb8 5b02 	vldmia	r8!, {d5}
 80089ec:	ed96 6b00 	vldr	d6, [r6]
 80089f0:	3501      	adds	r5, #1
 80089f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80089f6:	428d      	cmp	r5, r1
 80089f8:	f1a6 0608 	sub.w	r6, r6, #8
 80089fc:	ddf4      	ble.n	80089e8 <__kernel_rem_pio2+0x98>
 80089fe:	ecaa 7b02 	vstmia	sl!, {d7}
 8008a02:	f10c 0c01 	add.w	ip, ip, #1
 8008a06:	3208      	adds	r2, #8
 8008a08:	e7d6      	b.n	80089b8 <__kernel_rem_pio2+0x68>
 8008a0a:	ab06      	add	r3, sp, #24
 8008a0c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8008c68 <__kernel_rem_pio2+0x318>
 8008a10:	ed9f ab97 	vldr	d10, [pc, #604]	; 8008c70 <__kernel_rem_pio2+0x320>
 8008a14:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008a18:	9303      	str	r3, [sp, #12]
 8008a1a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8008a1e:	464d      	mov	r5, r9
 8008a20:	00eb      	lsls	r3, r5, #3
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	ab92      	add	r3, sp, #584	; 0x248
 8008a26:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008a2a:	f10d 0b18 	add.w	fp, sp, #24
 8008a2e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8008a30:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8008a34:	465e      	mov	r6, fp
 8008a36:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f1a2 0208 	sub.w	r2, r2, #8
 8008a42:	dc4c      	bgt.n	8008ade <__kernel_rem_pio2+0x18e>
 8008a44:	4620      	mov	r0, r4
 8008a46:	9105      	str	r1, [sp, #20]
 8008a48:	f000 faf2 	bl	8009030 <scalbn>
 8008a4c:	eeb0 8b40 	vmov.f64	d8, d0
 8008a50:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008a54:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008a58:	f000 fa76 	bl	8008f48 <floor>
 8008a5c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008a60:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008a64:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008a6e:	ee17 8a90 	vmov	r8, s15
 8008a72:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008a76:	9905      	ldr	r1, [sp, #20]
 8008a78:	dd43      	ble.n	8008b02 <__kernel_rem_pio2+0x1b2>
 8008a7a:	1e68      	subs	r0, r5, #1
 8008a7c:	ab06      	add	r3, sp, #24
 8008a7e:	f1c4 0c18 	rsb	ip, r4, #24
 8008a82:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8008a86:	fa46 f20c 	asr.w	r2, r6, ip
 8008a8a:	4490      	add	r8, r2
 8008a8c:	fa02 f20c 	lsl.w	r2, r2, ip
 8008a90:	1ab6      	subs	r6, r6, r2
 8008a92:	f1c4 0217 	rsb	r2, r4, #23
 8008a96:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8008a9a:	4116      	asrs	r6, r2
 8008a9c:	2e00      	cmp	r6, #0
 8008a9e:	dd3f      	ble.n	8008b20 <__kernel_rem_pio2+0x1d0>
 8008aa0:	f04f 0c00 	mov.w	ip, #0
 8008aa4:	f108 0801 	add.w	r8, r8, #1
 8008aa8:	4660      	mov	r0, ip
 8008aaa:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008aae:	4565      	cmp	r5, ip
 8008ab0:	dc6e      	bgt.n	8008b90 <__kernel_rem_pio2+0x240>
 8008ab2:	2c00      	cmp	r4, #0
 8008ab4:	dd04      	ble.n	8008ac0 <__kernel_rem_pio2+0x170>
 8008ab6:	2c01      	cmp	r4, #1
 8008ab8:	d07f      	beq.n	8008bba <__kernel_rem_pio2+0x26a>
 8008aba:	2c02      	cmp	r4, #2
 8008abc:	f000 8087 	beq.w	8008bce <__kernel_rem_pio2+0x27e>
 8008ac0:	2e02      	cmp	r6, #2
 8008ac2:	d12d      	bne.n	8008b20 <__kernel_rem_pio2+0x1d0>
 8008ac4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008ac8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008acc:	b340      	cbz	r0, 8008b20 <__kernel_rem_pio2+0x1d0>
 8008ace:	4620      	mov	r0, r4
 8008ad0:	9105      	str	r1, [sp, #20]
 8008ad2:	f000 faad 	bl	8009030 <scalbn>
 8008ad6:	9905      	ldr	r1, [sp, #20]
 8008ad8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008adc:	e020      	b.n	8008b20 <__kernel_rem_pio2+0x1d0>
 8008ade:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008ae2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008ae6:	3801      	subs	r0, #1
 8008ae8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008aec:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008af0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008af4:	eca6 0a01 	vstmia	r6!, {s0}
 8008af8:	ed92 0b00 	vldr	d0, [r2]
 8008afc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008b00:	e79c      	b.n	8008a3c <__kernel_rem_pio2+0xec>
 8008b02:	d105      	bne.n	8008b10 <__kernel_rem_pio2+0x1c0>
 8008b04:	1e6a      	subs	r2, r5, #1
 8008b06:	ab06      	add	r3, sp, #24
 8008b08:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8008b0c:	15f6      	asrs	r6, r6, #23
 8008b0e:	e7c5      	b.n	8008a9c <__kernel_rem_pio2+0x14c>
 8008b10:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008b14:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1c:	da36      	bge.n	8008b8c <__kernel_rem_pio2+0x23c>
 8008b1e:	2600      	movs	r6, #0
 8008b20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b28:	f040 80aa 	bne.w	8008c80 <__kernel_rem_pio2+0x330>
 8008b2c:	f105 3bff 	add.w	fp, r5, #4294967295
 8008b30:	4658      	mov	r0, fp
 8008b32:	2200      	movs	r2, #0
 8008b34:	4548      	cmp	r0, r9
 8008b36:	da52      	bge.n	8008bde <__kernel_rem_pio2+0x28e>
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	f000 8081 	beq.w	8008c40 <__kernel_rem_pio2+0x2f0>
 8008b3e:	ab06      	add	r3, sp, #24
 8008b40:	3c18      	subs	r4, #24
 8008b42:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 8087 	beq.w	8008c5a <__kernel_rem_pio2+0x30a>
 8008b4c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008b50:	4620      	mov	r0, r4
 8008b52:	f000 fa6d 	bl	8009030 <scalbn>
 8008b56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b5a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8008c68 <__kernel_rem_pio2+0x318>
 8008b5e:	a96a      	add	r1, sp, #424	; 0x1a8
 8008b60:	f103 0208 	add.w	r2, r3, #8
 8008b64:	1888      	adds	r0, r1, r2
 8008b66:	4659      	mov	r1, fp
 8008b68:	2900      	cmp	r1, #0
 8008b6a:	f280 80b7 	bge.w	8008cdc <__kernel_rem_pio2+0x38c>
 8008b6e:	4659      	mov	r1, fp
 8008b70:	2900      	cmp	r1, #0
 8008b72:	f2c0 80d5 	blt.w	8008d20 <__kernel_rem_pio2+0x3d0>
 8008b76:	a86a      	add	r0, sp, #424	; 0x1a8
 8008b78:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8008b7c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8008c60 <__kernel_rem_pio2+0x310>
 8008b80:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8008c7c <__kernel_rem_pio2+0x32c>
 8008b84:	2400      	movs	r4, #0
 8008b86:	ebab 0001 	sub.w	r0, fp, r1
 8008b8a:	e0be      	b.n	8008d0a <__kernel_rem_pio2+0x3ba>
 8008b8c:	2602      	movs	r6, #2
 8008b8e:	e787      	b.n	8008aa0 <__kernel_rem_pio2+0x150>
 8008b90:	f8db 2000 	ldr.w	r2, [fp]
 8008b94:	b958      	cbnz	r0, 8008bae <__kernel_rem_pio2+0x25e>
 8008b96:	b122      	cbz	r2, 8008ba2 <__kernel_rem_pio2+0x252>
 8008b98:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008b9c:	f8cb 2000 	str.w	r2, [fp]
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	f10c 0c01 	add.w	ip, ip, #1
 8008ba6:	f10b 0b04 	add.w	fp, fp, #4
 8008baa:	4610      	mov	r0, r2
 8008bac:	e77f      	b.n	8008aae <__kernel_rem_pio2+0x15e>
 8008bae:	ebae 0202 	sub.w	r2, lr, r2
 8008bb2:	f8cb 2000 	str.w	r2, [fp]
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	e7f3      	b.n	8008ba2 <__kernel_rem_pio2+0x252>
 8008bba:	f105 3cff 	add.w	ip, r5, #4294967295
 8008bbe:	ab06      	add	r3, sp, #24
 8008bc0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008bc4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008bc8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8008bcc:	e778      	b.n	8008ac0 <__kernel_rem_pio2+0x170>
 8008bce:	f105 3cff 	add.w	ip, r5, #4294967295
 8008bd2:	ab06      	add	r3, sp, #24
 8008bd4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008bd8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8008bdc:	e7f4      	b.n	8008bc8 <__kernel_rem_pio2+0x278>
 8008bde:	ab06      	add	r3, sp, #24
 8008be0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008be4:	3801      	subs	r0, #1
 8008be6:	431a      	orrs	r2, r3
 8008be8:	e7a4      	b.n	8008b34 <__kernel_rem_pio2+0x1e4>
 8008bea:	f10c 0c01 	add.w	ip, ip, #1
 8008bee:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0f9      	beq.n	8008bea <__kernel_rem_pio2+0x29a>
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008bfc:	eb0d 0203 	add.w	r2, sp, r3
 8008c00:	9b01      	ldr	r3, [sp, #4]
 8008c02:	18e8      	adds	r0, r5, r3
 8008c04:	ab1a      	add	r3, sp, #104	; 0x68
 8008c06:	1c6e      	adds	r6, r5, #1
 8008c08:	3a98      	subs	r2, #152	; 0x98
 8008c0a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008c0e:	4465      	add	r5, ip
 8008c10:	42b5      	cmp	r5, r6
 8008c12:	f6ff af05 	blt.w	8008a20 <__kernel_rem_pio2+0xd0>
 8008c16:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8008c1a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008c26:	f04f 0c00 	mov.w	ip, #0
 8008c2a:	eca0 7b02 	vstmia	r0!, {d7}
 8008c2e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8008c60 <__kernel_rem_pio2+0x310>
 8008c32:	4680      	mov	r8, r0
 8008c34:	458c      	cmp	ip, r1
 8008c36:	dd07      	ble.n	8008c48 <__kernel_rem_pio2+0x2f8>
 8008c38:	eca2 7b02 	vstmia	r2!, {d7}
 8008c3c:	3601      	adds	r6, #1
 8008c3e:	e7e7      	b.n	8008c10 <__kernel_rem_pio2+0x2c0>
 8008c40:	9a03      	ldr	r2, [sp, #12]
 8008c42:	f04f 0c01 	mov.w	ip, #1
 8008c46:	e7d2      	b.n	8008bee <__kernel_rem_pio2+0x29e>
 8008c48:	ecbe 5b02 	vldmia	lr!, {d5}
 8008c4c:	ed38 6b02 	vldmdb	r8!, {d6}
 8008c50:	f10c 0c01 	add.w	ip, ip, #1
 8008c54:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008c58:	e7ec      	b.n	8008c34 <__kernel_rem_pio2+0x2e4>
 8008c5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c5e:	e76e      	b.n	8008b3e <__kernel_rem_pio2+0x1ee>
	...
 8008c6c:	3e700000 	.word	0x3e700000
 8008c70:	00000000 	.word	0x00000000
 8008c74:	41700000 	.word	0x41700000
 8008c78:	08009768 	.word	0x08009768
 8008c7c:	08009728 	.word	0x08009728
 8008c80:	4260      	negs	r0, r4
 8008c82:	eeb0 0b48 	vmov.f64	d0, d8
 8008c86:	f000 f9d3 	bl	8009030 <scalbn>
 8008c8a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8008e68 <__kernel_rem_pio2+0x518>
 8008c8e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c96:	db18      	blt.n	8008cca <__kernel_rem_pio2+0x37a>
 8008c98:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8008e70 <__kernel_rem_pio2+0x520>
 8008c9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008ca0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008ca4:	aa06      	add	r2, sp, #24
 8008ca6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008caa:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008cae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008cb2:	f105 0b01 	add.w	fp, r5, #1
 8008cb6:	ee10 3a10 	vmov	r3, s0
 8008cba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008cbe:	ee17 3a10 	vmov	r3, s14
 8008cc2:	3418      	adds	r4, #24
 8008cc4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8008cc8:	e740      	b.n	8008b4c <__kernel_rem_pio2+0x1fc>
 8008cca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008cce:	aa06      	add	r2, sp, #24
 8008cd0:	ee10 3a10 	vmov	r3, s0
 8008cd4:	46ab      	mov	fp, r5
 8008cd6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008cda:	e737      	b.n	8008b4c <__kernel_rem_pio2+0x1fc>
 8008cdc:	ac06      	add	r4, sp, #24
 8008cde:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8008ce2:	9401      	str	r4, [sp, #4]
 8008ce4:	ee07 4a90 	vmov	s15, r4
 8008ce8:	3901      	subs	r1, #1
 8008cea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008cee:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008cf2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008cf6:	ed20 7b02 	vstmdb	r0!, {d7}
 8008cfa:	e735      	b.n	8008b68 <__kernel_rem_pio2+0x218>
 8008cfc:	ecbc 5b02 	vldmia	ip!, {d5}
 8008d00:	ecb5 6b02 	vldmia	r5!, {d6}
 8008d04:	3401      	adds	r4, #1
 8008d06:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008d0a:	454c      	cmp	r4, r9
 8008d0c:	dc01      	bgt.n	8008d12 <__kernel_rem_pio2+0x3c2>
 8008d0e:	4284      	cmp	r4, r0
 8008d10:	ddf4      	ble.n	8008cfc <__kernel_rem_pio2+0x3ac>
 8008d12:	ac42      	add	r4, sp, #264	; 0x108
 8008d14:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8008d18:	ed80 7b00 	vstr	d7, [r0]
 8008d1c:	3901      	subs	r1, #1
 8008d1e:	e727      	b.n	8008b70 <__kernel_rem_pio2+0x220>
 8008d20:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008d22:	2902      	cmp	r1, #2
 8008d24:	dc0a      	bgt.n	8008d3c <__kernel_rem_pio2+0x3ec>
 8008d26:	2900      	cmp	r1, #0
 8008d28:	dc2c      	bgt.n	8008d84 <__kernel_rem_pio2+0x434>
 8008d2a:	d045      	beq.n	8008db8 <__kernel_rem_pio2+0x468>
 8008d2c:	f008 0007 	and.w	r0, r8, #7
 8008d30:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8008d34:	ecbd 8b06 	vpop	{d8-d10}
 8008d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8008d3e:	2a03      	cmp	r2, #3
 8008d40:	d1f4      	bne.n	8008d2c <__kernel_rem_pio2+0x3dc>
 8008d42:	aa42      	add	r2, sp, #264	; 0x108
 8008d44:	4413      	add	r3, r2
 8008d46:	461a      	mov	r2, r3
 8008d48:	4619      	mov	r1, r3
 8008d4a:	4658      	mov	r0, fp
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	f1a1 0108 	sub.w	r1, r1, #8
 8008d52:	dc54      	bgt.n	8008dfe <__kernel_rem_pio2+0x4ae>
 8008d54:	4659      	mov	r1, fp
 8008d56:	2901      	cmp	r1, #1
 8008d58:	f1a2 0208 	sub.w	r2, r2, #8
 8008d5c:	dc5f      	bgt.n	8008e1e <__kernel_rem_pio2+0x4ce>
 8008d5e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8008e78 <__kernel_rem_pio2+0x528>
 8008d62:	3308      	adds	r3, #8
 8008d64:	f1bb 0f01 	cmp.w	fp, #1
 8008d68:	dc69      	bgt.n	8008e3e <__kernel_rem_pio2+0x4ee>
 8008d6a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8008d6e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8008d72:	2e00      	cmp	r6, #0
 8008d74:	d16a      	bne.n	8008e4c <__kernel_rem_pio2+0x4fc>
 8008d76:	ed87 5b00 	vstr	d5, [r7]
 8008d7a:	ed87 6b02 	vstr	d6, [r7, #8]
 8008d7e:	ed87 7b04 	vstr	d7, [r7, #16]
 8008d82:	e7d3      	b.n	8008d2c <__kernel_rem_pio2+0x3dc>
 8008d84:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008e78 <__kernel_rem_pio2+0x528>
 8008d88:	ab42      	add	r3, sp, #264	; 0x108
 8008d8a:	441a      	add	r2, r3
 8008d8c:	465b      	mov	r3, fp
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	da26      	bge.n	8008de0 <__kernel_rem_pio2+0x490>
 8008d92:	b35e      	cbz	r6, 8008dec <__kernel_rem_pio2+0x49c>
 8008d94:	eeb1 7b46 	vneg.f64	d7, d6
 8008d98:	ed87 7b00 	vstr	d7, [r7]
 8008d9c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8008da0:	aa44      	add	r2, sp, #272	; 0x110
 8008da2:	2301      	movs	r3, #1
 8008da4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008da8:	459b      	cmp	fp, r3
 8008daa:	da22      	bge.n	8008df2 <__kernel_rem_pio2+0x4a2>
 8008dac:	b10e      	cbz	r6, 8008db2 <__kernel_rem_pio2+0x462>
 8008dae:	eeb1 7b47 	vneg.f64	d7, d7
 8008db2:	ed87 7b02 	vstr	d7, [r7, #8]
 8008db6:	e7b9      	b.n	8008d2c <__kernel_rem_pio2+0x3dc>
 8008db8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008e78 <__kernel_rem_pio2+0x528>
 8008dbc:	ab42      	add	r3, sp, #264	; 0x108
 8008dbe:	441a      	add	r2, r3
 8008dc0:	f1bb 0f00 	cmp.w	fp, #0
 8008dc4:	da05      	bge.n	8008dd2 <__kernel_rem_pio2+0x482>
 8008dc6:	b10e      	cbz	r6, 8008dcc <__kernel_rem_pio2+0x47c>
 8008dc8:	eeb1 7b47 	vneg.f64	d7, d7
 8008dcc:	ed87 7b00 	vstr	d7, [r7]
 8008dd0:	e7ac      	b.n	8008d2c <__kernel_rem_pio2+0x3dc>
 8008dd2:	ed32 6b02 	vldmdb	r2!, {d6}
 8008dd6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008dde:	e7ef      	b.n	8008dc0 <__kernel_rem_pio2+0x470>
 8008de0:	ed32 7b02 	vldmdb	r2!, {d7}
 8008de4:	3b01      	subs	r3, #1
 8008de6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008dea:	e7d0      	b.n	8008d8e <__kernel_rem_pio2+0x43e>
 8008dec:	eeb0 7b46 	vmov.f64	d7, d6
 8008df0:	e7d2      	b.n	8008d98 <__kernel_rem_pio2+0x448>
 8008df2:	ecb2 6b02 	vldmia	r2!, {d6}
 8008df6:	3301      	adds	r3, #1
 8008df8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008dfc:	e7d4      	b.n	8008da8 <__kernel_rem_pio2+0x458>
 8008dfe:	ed91 7b00 	vldr	d7, [r1]
 8008e02:	ed91 5b02 	vldr	d5, [r1, #8]
 8008e06:	3801      	subs	r0, #1
 8008e08:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008e0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e10:	ed81 6b00 	vstr	d6, [r1]
 8008e14:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008e18:	ed81 7b02 	vstr	d7, [r1, #8]
 8008e1c:	e796      	b.n	8008d4c <__kernel_rem_pio2+0x3fc>
 8008e1e:	ed92 7b00 	vldr	d7, [r2]
 8008e22:	ed92 5b02 	vldr	d5, [r2, #8]
 8008e26:	3901      	subs	r1, #1
 8008e28:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008e2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e30:	ed82 6b00 	vstr	d6, [r2]
 8008e34:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008e38:	ed82 7b02 	vstr	d7, [r2, #8]
 8008e3c:	e78b      	b.n	8008d56 <__kernel_rem_pio2+0x406>
 8008e3e:	ed33 6b02 	vldmdb	r3!, {d6}
 8008e42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008e4a:	e78b      	b.n	8008d64 <__kernel_rem_pio2+0x414>
 8008e4c:	eeb1 5b45 	vneg.f64	d5, d5
 8008e50:	eeb1 6b46 	vneg.f64	d6, d6
 8008e54:	ed87 5b00 	vstr	d5, [r7]
 8008e58:	eeb1 7b47 	vneg.f64	d7, d7
 8008e5c:	ed87 6b02 	vstr	d6, [r7, #8]
 8008e60:	e78d      	b.n	8008d7e <__kernel_rem_pio2+0x42e>
 8008e62:	bf00      	nop
 8008e64:	f3af 8000 	nop.w
 8008e68:	00000000 	.word	0x00000000
 8008e6c:	41700000 	.word	0x41700000
 8008e70:	00000000 	.word	0x00000000
 8008e74:	3e700000 	.word	0x3e700000
	...

08008e80 <__kernel_sin>:
 8008e80:	ee10 3a90 	vmov	r3, s1
 8008e84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e88:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008e8c:	da04      	bge.n	8008e98 <__kernel_sin+0x18>
 8008e8e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008e92:	ee17 3a90 	vmov	r3, s15
 8008e96:	b35b      	cbz	r3, 8008ef0 <__kernel_sin+0x70>
 8008e98:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008e9c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008ea0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008ef8 <__kernel_sin+0x78>
 8008ea4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008f00 <__kernel_sin+0x80>
 8008ea8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008eac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008f08 <__kernel_sin+0x88>
 8008eb0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008eb4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008f10 <__kernel_sin+0x90>
 8008eb8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008ebc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008f18 <__kernel_sin+0x98>
 8008ec0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008ec4:	b930      	cbnz	r0, 8008ed4 <__kernel_sin+0x54>
 8008ec6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008f20 <__kernel_sin+0xa0>
 8008eca:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008ece:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008ed2:	4770      	bx	lr
 8008ed4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008ed8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008edc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008ee0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008ee4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008f28 <__kernel_sin+0xa8>
 8008ee8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008eec:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	f3af 8000 	nop.w
 8008ef8:	5acfd57c 	.word	0x5acfd57c
 8008efc:	3de5d93a 	.word	0x3de5d93a
 8008f00:	8a2b9ceb 	.word	0x8a2b9ceb
 8008f04:	be5ae5e6 	.word	0xbe5ae5e6
 8008f08:	57b1fe7d 	.word	0x57b1fe7d
 8008f0c:	3ec71de3 	.word	0x3ec71de3
 8008f10:	19c161d5 	.word	0x19c161d5
 8008f14:	bf2a01a0 	.word	0xbf2a01a0
 8008f18:	1110f8a6 	.word	0x1110f8a6
 8008f1c:	3f811111 	.word	0x3f811111
 8008f20:	55555549 	.word	0x55555549
 8008f24:	bfc55555 	.word	0xbfc55555
 8008f28:	55555549 	.word	0x55555549
 8008f2c:	3fc55555 	.word	0x3fc55555

08008f30 <fabs>:
 8008f30:	ec51 0b10 	vmov	r0, r1, d0
 8008f34:	ee10 2a10 	vmov	r2, s0
 8008f38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f3c:	ec43 2b10 	vmov	d0, r2, r3
 8008f40:	4770      	bx	lr
 8008f42:	0000      	movs	r0, r0
 8008f44:	0000      	movs	r0, r0
	...

08008f48 <floor>:
 8008f48:	ee10 1a90 	vmov	r1, s1
 8008f4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f50:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008f54:	2b13      	cmp	r3, #19
 8008f56:	b530      	push	{r4, r5, lr}
 8008f58:	ee10 0a10 	vmov	r0, s0
 8008f5c:	ee10 5a10 	vmov	r5, s0
 8008f60:	dc31      	bgt.n	8008fc6 <floor+0x7e>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da15      	bge.n	8008f92 <floor+0x4a>
 8008f66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009020 <floor+0xd8>
 8008f6a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008f6e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	dd07      	ble.n	8008f88 <floor+0x40>
 8008f78:	2900      	cmp	r1, #0
 8008f7a:	da4e      	bge.n	800901a <floor+0xd2>
 8008f7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f80:	4318      	orrs	r0, r3
 8008f82:	d001      	beq.n	8008f88 <floor+0x40>
 8008f84:	4928      	ldr	r1, [pc, #160]	; (8009028 <floor+0xe0>)
 8008f86:	2000      	movs	r0, #0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	ec43 2b10 	vmov	d0, r2, r3
 8008f90:	e020      	b.n	8008fd4 <floor+0x8c>
 8008f92:	4a26      	ldr	r2, [pc, #152]	; (800902c <floor+0xe4>)
 8008f94:	411a      	asrs	r2, r3
 8008f96:	ea01 0402 	and.w	r4, r1, r2
 8008f9a:	4304      	orrs	r4, r0
 8008f9c:	d01a      	beq.n	8008fd4 <floor+0x8c>
 8008f9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009020 <floor+0xd8>
 8008fa2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008fa6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fae:	ddeb      	ble.n	8008f88 <floor+0x40>
 8008fb0:	2900      	cmp	r1, #0
 8008fb2:	bfbe      	ittt	lt
 8008fb4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8008fb8:	fa40 f303 	asrlt.w	r3, r0, r3
 8008fbc:	18c9      	addlt	r1, r1, r3
 8008fbe:	ea21 0102 	bic.w	r1, r1, r2
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	e7e0      	b.n	8008f88 <floor+0x40>
 8008fc6:	2b33      	cmp	r3, #51	; 0x33
 8008fc8:	dd05      	ble.n	8008fd6 <floor+0x8e>
 8008fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fce:	d101      	bne.n	8008fd4 <floor+0x8c>
 8008fd0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008fd4:	bd30      	pop	{r4, r5, pc}
 8008fd6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008fda:	f04f 32ff 	mov.w	r2, #4294967295
 8008fde:	40e2      	lsrs	r2, r4
 8008fe0:	4202      	tst	r2, r0
 8008fe2:	d0f7      	beq.n	8008fd4 <floor+0x8c>
 8008fe4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009020 <floor+0xd8>
 8008fe8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008fec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff4:	ddc8      	ble.n	8008f88 <floor+0x40>
 8008ff6:	2900      	cmp	r1, #0
 8008ff8:	da02      	bge.n	8009000 <floor+0xb8>
 8008ffa:	2b14      	cmp	r3, #20
 8008ffc:	d103      	bne.n	8009006 <floor+0xbe>
 8008ffe:	3101      	adds	r1, #1
 8009000:	ea20 0002 	bic.w	r0, r0, r2
 8009004:	e7c0      	b.n	8008f88 <floor+0x40>
 8009006:	2401      	movs	r4, #1
 8009008:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800900c:	fa04 f303 	lsl.w	r3, r4, r3
 8009010:	4418      	add	r0, r3
 8009012:	42a8      	cmp	r0, r5
 8009014:	bf38      	it	cc
 8009016:	1909      	addcc	r1, r1, r4
 8009018:	e7f2      	b.n	8009000 <floor+0xb8>
 800901a:	2000      	movs	r0, #0
 800901c:	4601      	mov	r1, r0
 800901e:	e7b3      	b.n	8008f88 <floor+0x40>
 8009020:	8800759c 	.word	0x8800759c
 8009024:	7e37e43c 	.word	0x7e37e43c
 8009028:	bff00000 	.word	0xbff00000
 800902c:	000fffff 	.word	0x000fffff

08009030 <scalbn>:
 8009030:	ee10 1a90 	vmov	r1, s1
 8009034:	b510      	push	{r4, lr}
 8009036:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800903a:	b98c      	cbnz	r4, 8009060 <scalbn+0x30>
 800903c:	ee10 3a10 	vmov	r3, s0
 8009040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009044:	430b      	orrs	r3, r1
 8009046:	d011      	beq.n	800906c <scalbn+0x3c>
 8009048:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8009110 <scalbn+0xe0>
 800904c:	4b3c      	ldr	r3, [pc, #240]	; (8009140 <scalbn+0x110>)
 800904e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009052:	4298      	cmp	r0, r3
 8009054:	da0b      	bge.n	800906e <scalbn+0x3e>
 8009056:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009118 <scalbn+0xe8>
 800905a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800905e:	e005      	b.n	800906c <scalbn+0x3c>
 8009060:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009064:	429c      	cmp	r4, r3
 8009066:	d107      	bne.n	8009078 <scalbn+0x48>
 8009068:	ee30 0b00 	vadd.f64	d0, d0, d0
 800906c:	bd10      	pop	{r4, pc}
 800906e:	ee10 1a90 	vmov	r1, s1
 8009072:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009076:	3c36      	subs	r4, #54	; 0x36
 8009078:	4404      	add	r4, r0
 800907a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800907e:	429c      	cmp	r4, r3
 8009080:	dd0d      	ble.n	800909e <scalbn+0x6e>
 8009082:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8009120 <scalbn+0xf0>
 8009086:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8009128 <scalbn+0xf8>
 800908a:	eeb0 6b47 	vmov.f64	d6, d7
 800908e:	ee10 3a90 	vmov	r3, s1
 8009092:	2b00      	cmp	r3, #0
 8009094:	fe27 7b05 	vselge.f64	d7, d7, d5
 8009098:	ee27 0b06 	vmul.f64	d0, d7, d6
 800909c:	e7e6      	b.n	800906c <scalbn+0x3c>
 800909e:	2c00      	cmp	r4, #0
 80090a0:	dd0a      	ble.n	80090b8 <scalbn+0x88>
 80090a2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80090a6:	ec53 2b10 	vmov	r2, r3, d0
 80090aa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80090ae:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80090b2:	ec43 2b10 	vmov	d0, r2, r3
 80090b6:	e7d9      	b.n	800906c <scalbn+0x3c>
 80090b8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80090bc:	da19      	bge.n	80090f2 <scalbn+0xc2>
 80090be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80090c2:	4298      	cmp	r0, r3
 80090c4:	ee10 3a90 	vmov	r3, s1
 80090c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090cc:	dd09      	ble.n	80090e2 <scalbn+0xb2>
 80090ce:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8009120 <scalbn+0xf0>
 80090d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009128 <scalbn+0xf8>
 80090d6:	eeb0 7b40 	vmov.f64	d7, d0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80090e0:	e7bb      	b.n	800905a <scalbn+0x2a>
 80090e2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8009118 <scalbn+0xe8>
 80090e6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8009130 <scalbn+0x100>
 80090ea:	eeb0 7b40 	vmov.f64	d7, d0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	e7f4      	b.n	80090dc <scalbn+0xac>
 80090f2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80090f6:	ec53 2b10 	vmov	r2, r3, d0
 80090fa:	3436      	adds	r4, #54	; 0x36
 80090fc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009100:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8009104:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009138 <scalbn+0x108>
 8009108:	ec43 2b10 	vmov	d0, r2, r3
 800910c:	e7a5      	b.n	800905a <scalbn+0x2a>
 800910e:	bf00      	nop
 8009110:	00000000 	.word	0x00000000
 8009114:	43500000 	.word	0x43500000
 8009118:	c2f8f359 	.word	0xc2f8f359
 800911c:	01a56e1f 	.word	0x01a56e1f
 8009120:	8800759c 	.word	0x8800759c
 8009124:	7e37e43c 	.word	0x7e37e43c
 8009128:	8800759c 	.word	0x8800759c
 800912c:	fe37e43c 	.word	0xfe37e43c
 8009130:	c2f8f359 	.word	0xc2f8f359
 8009134:	81a56e1f 	.word	0x81a56e1f
 8009138:	00000000 	.word	0x00000000
 800913c:	3c900000 	.word	0x3c900000
 8009140:	ffff3cb0 	.word	0xffff3cb0

08009144 <_init>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr

08009150 <_fini>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	bf00      	nop
 8009154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009156:	bc08      	pop	{r3}
 8009158:	469e      	mov	lr, r3
 800915a:	4770      	bx	lr
