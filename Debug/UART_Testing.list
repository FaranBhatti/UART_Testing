
UART_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e84  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08009138  08009138  00019138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009758  08009758  00019758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009760  08009760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009764  08009764  00019764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  08009768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  240001e0  08009948  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400033c  08009948  0002033c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fccc  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e76  00000000  00000000  0002feda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b08  00000000  00000000  00031d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a50  00000000  00000000  00032858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002fbf6  00000000  00000000  000332a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e80b  00000000  00000000  00062e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013464d  00000000  00000000  000716a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a5cf6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003cc8  00000000  00000000  001a5d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800911c 	.word	0x0800911c

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	0800911c 	.word	0x0800911c

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006ac:	1d39      	adds	r1, r7, #4
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	2201      	movs	r2, #1
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <__io_putchar+0x20>)
 80006b6:	f004 f80b 	bl	80046d0 <HAL_UART_Transmit>
  return ch;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	24000290 	.word	0x24000290

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	ed2d 8b02 	vpush	{d8}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 fdf9 	bl	80012c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t tx_data = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f957 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f000 fa6d 	bl	8000bbc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006e2:	f000 fa17 	bl	8000b14 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006e6:	f000 fa61 	bl	8000bac <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 80006ea:	f000 f9c5 	bl	8000a78 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  uint16_t SAMPLE_RATE = 8000;		//samples/second
 80006ee:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80006f2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t AUDIO_DURATION = 15;		//seconds
 80006f4:	230f      	movs	r3, #15
 80006f6:	843b      	strh	r3, [r7, #32]
  float PI = 3.14159;
 80006f8:	4b9f      	ldr	r3, [pc, #636]	; (8000978 <main+0x2b0>)
 80006fa:	61fb      	str	r3, [r7, #28]

  double AMPLITUDE = 0X2000;
 80006fc:	f04f 0200 	mov.w	r2, #0
 8000700:	4b9e      	ldr	r3, [pc, #632]	; (800097c <main+0x2b4>)
 8000702:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const double ONE_HZ = 2 * PI / SAMPLE_RATE; //Digital frequency equivalent to 1 Hz -- units of cycles/sample
 8000706:	edd7 7a07 	vldr	s15, [r7, #28]
 800070a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800070e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000710:	ee07 3a90 	vmov	s15, r3
 8000714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800071c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000720:	ed87 7b02 	vstr	d7, [r7, #8]
  volatile int16_t sample; //actually 32 bits long, not sure why
  int i = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  int i_max = SAMPLE_RATE * AUDIO_DURATION; //number of samples to be generated in file
 8000728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800072a:	8c3a      	ldrh	r2, [r7, #32]
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	607b      	str	r3, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  if (i == 0) {
 8000732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000734:	2b00      	cmp	r3, #0
 8000736:	d122      	bne.n	800077e <main+0xb6>
	  printf("Starting data transmission.\r\n");
 8000738:	4891      	ldr	r0, [pc, #580]	; (8000980 <main+0x2b8>)
 800073a:	f005 fec5 	bl	80064c8 <puts>

	  //send start character
	  tx_data = 0xFF;
 800073e:	23ff      	movs	r3, #255	; 0xff
 8000740:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000742:	1cf9      	adds	r1, r7, #3
 8000744:	f04f 33ff 	mov.w	r3, #4294967295
 8000748:	2201      	movs	r2, #1
 800074a:	488e      	ldr	r0, [pc, #568]	; (8000984 <main+0x2bc>)
 800074c:	f003 ffc0 	bl	80046d0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000750:	1cf9      	adds	r1, r7, #3
 8000752:	f04f 33ff 	mov.w	r3, #4294967295
 8000756:	2201      	movs	r2, #1
 8000758:	488a      	ldr	r0, [pc, #552]	; (8000984 <main+0x2bc>)
 800075a:	f003 ffb9 	bl	80046d0 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 800075e:	1cf9      	adds	r1, r7, #3
 8000760:	f04f 33ff 	mov.w	r3, #4294967295
 8000764:	2201      	movs	r2, #1
 8000766:	4887      	ldr	r0, [pc, #540]	; (8000984 <main+0x2bc>)
 8000768:	f003 ffb2 	bl	80046d0 <HAL_UART_Transmit>
	  tx_data = 0xEE;
 800076c:	23ee      	movs	r3, #238	; 0xee
 800076e:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000770:	1cf9      	adds	r1, r7, #3
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	2201      	movs	r2, #1
 8000778:	4882      	ldr	r0, [pc, #520]	; (8000984 <main+0x2bc>)
 800077a:	f003 ffa9 	bl	80046d0 <HAL_UART_Transmit>

  }

  i++;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	3301      	adds	r3, #1
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  //i = i_max+1;
  if (i <= i_max && i != 0) {
 8000784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	429a      	cmp	r2, r3
 800078a:	f300 80b9 	bgt.w	8000900 <main+0x238>
 800078e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000790:	2b00      	cmp	r3, #0
 8000792:	f000 80b5 	beq.w	8000900 <main+0x238>

	  //sine waves at 262, 330, 392Hz
	  //values of sample must be between -0x8000 and 0x7999
	  sample = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	803b      	strh	r3, [r7, #0]
	  sample += AMPLITUDE * sin(i * ONE_HZ * 262 * 2);
 800079a:	883b      	ldrh	r3, [r7, #0]
 800079c:	b21b      	sxth	r3, r3
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80007a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007b0:	ed97 7b02 	vldr	d7, [r7, #8]
 80007b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007b8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8000960 <main+0x298>
 80007bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80007c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80007c4:	eeb0 0b47 	vmov.f64	d0, d7
 80007c8:	f007 feb2 	bl	8008530 <sin>
 80007cc:	eeb0 6b40 	vmov.f64	d6, d0
 80007d0:	ed97 7b04 	vldr	d7, [r7, #16]
 80007d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007d8:	ee38 7b07 	vadd.f64	d7, d8, d7
 80007dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007e0:	ee17 3a90 	vmov	r3, s15
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	803b      	strh	r3, [r7, #0]
	  sample += AMPLITUDE * sin(i * ONE_HZ * 330 * 2);
 80007e8:	883b      	ldrh	r3, [r7, #0]
 80007ea:	b21b      	sxth	r3, r3
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	ee07 3a90 	vmov	s15, r3
 80007fa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8000802:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000806:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8000968 <main+0x2a0>
 800080a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800080e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000812:	eeb0 0b47 	vmov.f64	d0, d7
 8000816:	f007 fe8b 	bl	8008530 <sin>
 800081a:	eeb0 6b40 	vmov.f64	d6, d0
 800081e:	ed97 7b04 	vldr	d7, [r7, #16]
 8000822:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000826:	ee38 7b07 	vadd.f64	d7, d8, d7
 800082a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800082e:	ee17 3a90 	vmov	r3, s15
 8000832:	b21b      	sxth	r3, r3
 8000834:	803b      	strh	r3, [r7, #0]
	  sample += AMPLITUDE * sin(i * ONE_HZ * 392 * 2);
 8000836:	883b      	ldrh	r3, [r7, #0]
 8000838:	b21b      	sxth	r3, r3
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	ee07 3a90 	vmov	s15, r3
 8000848:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800084c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000850:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000854:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8000970 <main+0x2a8>
 8000858:	ee27 7b06 	vmul.f64	d7, d7, d6
 800085c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000860:	eeb0 0b47 	vmov.f64	d0, d7
 8000864:	f007 fe64 	bl	8008530 <sin>
 8000868:	eeb0 6b40 	vmov.f64	d6, d0
 800086c:	ed97 7b04 	vldr	d7, [r7, #16]
 8000870:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000874:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000878:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800087c:	ee17 3a90 	vmov	r3, s15
 8000880:	b21b      	sxth	r3, r3
 8000882:	803b      	strh	r3, [r7, #0]
	  //printf("sample is: 0x%x\r\n", sample);
	  //printf("last 16 bits: 0x%x\r\n", sample & 0xFFFF);
	  //printf("checked against mask: 0x%x\r\n", (sample & 0xFFFF) ^ 0xFFFF);

	  //send escape char twice to indicate escape char value is being sent
	  if (!((sample & 0xFFFF) ^ 0xFFFF)) {
 8000884:	883b      	ldrh	r3, [r7, #0]
 8000886:	b21b      	sxth	r3, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	b29b      	uxth	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d11e      	bne.n	80008ce <main+0x206>

		  //send 0xFFFF twice to
		  tx_data = 0xFF;
 8000890:	23ff      	movs	r3, #255	; 0xff
 8000892:	70fb      	strb	r3, [r7, #3]
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000894:	1cf9      	adds	r1, r7, #3
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	2201      	movs	r2, #1
 800089c:	4839      	ldr	r0, [pc, #228]	; (8000984 <main+0x2bc>)
 800089e:	f003 ff17 	bl	80046d0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008a2:	1cf9      	adds	r1, r7, #3
 80008a4:	f04f 33ff 	mov.w	r3, #4294967295
 80008a8:	2201      	movs	r2, #1
 80008aa:	4836      	ldr	r0, [pc, #216]	; (8000984 <main+0x2bc>)
 80008ac:	f003 ff10 	bl	80046d0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008b0:	1cf9      	adds	r1, r7, #3
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2201      	movs	r2, #1
 80008b8:	4832      	ldr	r0, [pc, #200]	; (8000984 <main+0x2bc>)
 80008ba:	f003 ff09 	bl	80046d0 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008be:	1cf9      	adds	r1, r7, #3
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	2201      	movs	r2, #1
 80008c6:	482f      	ldr	r0, [pc, #188]	; (8000984 <main+0x2bc>)
 80008c8:	f003 ff02 	bl	80046d0 <HAL_UART_Transmit>
	  if (!((sample & 0xFFFF) ^ 0xFFFF)) {
 80008cc:	e045      	b.n	800095a <main+0x292>
	  else { //send data normally

		  //say sample = 0x1234;

		  //transmit first 8 bits
		  tx_data = sample >> 8;     // high byte (0x12)
 80008ce:	883b      	ldrh	r3, [r7, #0]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	121b      	asrs	r3, r3, #8
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	70fb      	strb	r3, [r7, #3]
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008da:	1cf9      	adds	r1, r7, #3
 80008dc:	f04f 33ff 	mov.w	r3, #4294967295
 80008e0:	2201      	movs	r2, #1
 80008e2:	4828      	ldr	r0, [pc, #160]	; (8000984 <main+0x2bc>)
 80008e4:	f003 fef4 	bl	80046d0 <HAL_UART_Transmit>
		  //printf("Sent as: %x\t", tx_data); //debug only

		  //transmit last 8 bits
		  tx_data = sample & 0x00FF; // low byte (0x34)
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	70fb      	strb	r3, [r7, #3]
		  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80008f0:	1cf9      	adds	r1, r7, #3
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	2201      	movs	r2, #1
 80008f8:	4822      	ldr	r0, [pc, #136]	; (8000984 <main+0x2bc>)
 80008fa:	f003 fee9 	bl	80046d0 <HAL_UART_Transmit>
	  if (!((sample & 0xFFFF) ^ 0xFFFF)) {
 80008fe:	e02c      	b.n	800095a <main+0x292>
	  //HAL_Delay(1000); //debug only
  }
  else { //end of file, send end of file char after escape char

	  //send escape character (0xFFFF)
	  tx_data = 0xFF;
 8000900:	23ff      	movs	r3, #255	; 0xff
 8000902:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000904:	1cf9      	adds	r1, r7, #3
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	2201      	movs	r2, #1
 800090c:	481d      	ldr	r0, [pc, #116]	; (8000984 <main+0x2bc>)
 800090e:	f003 fedf 	bl	80046d0 <HAL_UART_Transmit>
	  tx_data = 0xFF;
 8000912:	23ff      	movs	r3, #255	; 0xff
 8000914:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000916:	1cf9      	adds	r1, r7, #3
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	2201      	movs	r2, #1
 800091e:	4819      	ldr	r0, [pc, #100]	; (8000984 <main+0x2bc>)
 8000920:	f003 fed6 	bl	80046d0 <HAL_UART_Transmit>

	  //send end of file character (0xFFFE)
	  tx_data = 0xFF;
 8000924:	23ff      	movs	r3, #255	; 0xff
 8000926:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000928:	1cf9      	adds	r1, r7, #3
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	2201      	movs	r2, #1
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <main+0x2bc>)
 8000932:	f003 fecd 	bl	80046d0 <HAL_UART_Transmit>
	  tx_data = 0xFE;
 8000936:	23fe      	movs	r3, #254	; 0xfe
 8000938:	70fb      	strb	r3, [r7, #3]
	  HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 800093a:	1cf9      	adds	r1, r7, #3
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	2201      	movs	r2, #1
 8000942:	4810      	ldr	r0, [pc, #64]	; (8000984 <main+0x2bc>)
 8000944:	f003 fec4 	bl	80046d0 <HAL_UART_Transmit>

	  //reset counter
	  i = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24

	  //delay for viewing
	  printf("All data sent.\r\n");
 800094c:	480e      	ldr	r0, [pc, #56]	; (8000988 <main+0x2c0>)
 800094e:	f005 fdbb 	bl	80064c8 <puts>
	  HAL_Delay(1000);
 8000952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000956:	f000 fd49 	bl	80013ec <HAL_Delay>
  if (i == 0) {
 800095a:	e6ea      	b.n	8000732 <main+0x6a>
 800095c:	f3af 8000 	nop.w
 8000960:	00000000 	.word	0x00000000
 8000964:	40706000 	.word	0x40706000
 8000968:	00000000 	.word	0x00000000
 800096c:	4074a000 	.word	0x4074a000
 8000970:	00000000 	.word	0x00000000
 8000974:	40788000 	.word	0x40788000
 8000978:	40490fd0 	.word	0x40490fd0
 800097c:	40c00000 	.word	0x40c00000
 8000980:	08009138 	.word	0x08009138
 8000984:	240001fc 	.word	0x240001fc
 8000988:	08009158 	.word	0x08009158

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b09c      	sub	sp, #112	; 0x70
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	224c      	movs	r2, #76	; 0x4c
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f005 f8da 	bl	8005b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2220      	movs	r2, #32
 80009a4:	2100      	movs	r1, #0
 80009a6:	4618      	mov	r0, r3
 80009a8:	f005 f8d4 	bl	8005b54 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80009ac:	4b30      	ldr	r3, [pc, #192]	; (8000a70 <SystemClock_Config+0xe4>)
 80009ae:	f04f 32ff 	mov.w	r2, #4294967295
 80009b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009b6:	2004      	movs	r0, #4
 80009b8:	f000 ffea 	bl	8001990 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <SystemClock_Config+0xe8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a2b      	ldr	r2, [pc, #172]	; (8000a74 <SystemClock_Config+0xe8>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <SystemClock_Config+0xe8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d8:	bf00      	nop
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <SystemClock_Config+0xe8>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009e6:	d1f8      	bne.n	80009da <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009e8:	2321      	movs	r3, #33	; 0x21
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009f2:	2301      	movs	r3, #1
 80009f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000a02:	2318      	movs	r3, #24
 8000a04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a12:	230c      	movs	r3, #12
 8000a14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f80e 	bl	8001a44 <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2e:	f000 f9df 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	233f      	movs	r3, #63	; 0x3f
 8000a34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2303      	movs	r3, #3
 8000a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	2102      	movs	r1, #2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fc26 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000a62:	f000 f9c5 	bl	8000df0 <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3770      	adds	r7, #112	; 0x70
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	58024400 	.word	0x58024400
 8000a74:	58024800 	.word	0x58024800

08000a78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <MX_UART4_Init+0x94>)
 8000a80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 430000;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a84:	4a22      	ldr	r2, [pc, #136]	; (8000b10 <MX_UART4_Init+0x98>)
 8000a86:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_UART4_Init+0x90>)
 8000a9c:	220c      	movs	r2, #12
 8000a9e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_UART4_Init+0x90>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_UART4_Init+0x90>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_UART4_Init+0x90>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_UART4_Init+0x90>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ac0:	f003 fdae 	bl	8004620 <HAL_HalfDuplex_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_UART4_Init+0x56>
  {
    Error_Handler();
 8000aca:	f000 f991 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ace:	2100      	movs	r1, #0
 8000ad0:	480d      	ldr	r0, [pc, #52]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ad2:	f004 ff4a 	bl	800596a <HAL_UARTEx_SetTxFifoThreshold>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 8000adc:	f000 f988 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_UART4_Init+0x90>)
 8000ae4:	f004 ff7f 	bl	80059e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 8000aee:	f000 f97f 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_UART4_Init+0x90>)
 8000af4:	f004 ff00 	bl	80058f8 <HAL_UARTEx_DisableFifoMode>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_UART4_Init+0x8a>
  {
    Error_Handler();
 8000afe:	f000 f977 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	240001fc 	.word	0x240001fc
 8000b0c:	40004c00 	.word	0x40004c00
 8000b10:	00068fb0 	.word	0x00068fb0

08000b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b1a:	4a23      	ldr	r2, [pc, #140]	; (8000ba8 <MX_USART3_UART_Init+0x94>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5c:	4811      	ldr	r0, [pc, #68]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b5e:	f003 fd0f 	bl	8004580 <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b68:	f000 f942 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b70:	f004 fefb 	bl	800596a <HAL_UARTEx_SetTxFifoThreshold>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b7a:	f000 f939 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b82:	f004 ff30 	bl	80059e6 <HAL_UARTEx_SetRxFifoThreshold>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b8c:	f000 f930 	bl	8000df0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_USART3_UART_Init+0x90>)
 8000b92:	f004 feb1 	bl	80058f8 <HAL_UARTEx_DisableFifoMode>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 f928 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000290 	.word	0x24000290
 8000ba8:	40004800 	.word	0x40004800

08000bac <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b80      	ldr	r3, [pc, #512]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000bd4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bd8:	4a7e      	ldr	r2, [pc, #504]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000be2:	4b7c      	ldr	r3, [pc, #496]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000be4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	623b      	str	r3, [r7, #32]
 8000bee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf0:	4b78      	ldr	r3, [pc, #480]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000bf6:	4a77      	ldr	r2, [pc, #476]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c00:	4b74      	ldr	r3, [pc, #464]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c06:	f003 0320 	and.w	r3, r3, #32
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0e:	4b71      	ldr	r3, [pc, #452]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c14:	4a6f      	ldr	r2, [pc, #444]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c1e:	4b6d      	ldr	r3, [pc, #436]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b69      	ldr	r3, [pc, #420]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c32:	4a68      	ldr	r2, [pc, #416]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c3c:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b62      	ldr	r3, [pc, #392]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c50:	4a60      	ldr	r2, [pc, #384]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c5a:	4b5e      	ldr	r3, [pc, #376]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c68:	4b5a      	ldr	r3, [pc, #360]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c6e:	4a59      	ldr	r2, [pc, #356]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c78:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c7a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c86:	4b53      	ldr	r3, [pc, #332]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c8c:	4a51      	ldr	r2, [pc, #324]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c92:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c96:	4b4f      	ldr	r3, [pc, #316]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000c98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca4:	4b4b      	ldr	r3, [pc, #300]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000ca6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000caa:	4a4a      	ldr	r2, [pc, #296]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cb4:	4b47      	ldr	r3, [pc, #284]	; (8000dd4 <MX_GPIO_Init+0x218>)
 8000cb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cba:	f003 0310 	and.w	r3, r3, #16
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc8:	4843      	ldr	r0, [pc, #268]	; (8000dd8 <MX_GPIO_Init+0x21c>)
 8000cca:	f000 fe47 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cd4:	4841      	ldr	r0, [pc, #260]	; (8000ddc <MX_GPIO_Init+0x220>)
 8000cd6:	f000 fe41 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4840      	ldr	r0, [pc, #256]	; (8000de0 <MX_GPIO_Init+0x224>)
 8000ce0:	f000 fe3c 	bl	800195c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	483a      	ldr	r0, [pc, #232]	; (8000de4 <MX_GPIO_Init+0x228>)
 8000cfa:	f000 fc7f 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4830      	ldr	r0, [pc, #192]	; (8000dd8 <MX_GPIO_Init+0x21c>)
 8000d18:	f000 fc70 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d1c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	4829      	ldr	r0, [pc, #164]	; (8000ddc <MX_GPIO_Init+0x220>)
 8000d36:	f000 fc61 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4826      	ldr	r0, [pc, #152]	; (8000de8 <MX_GPIO_Init+0x22c>)
 8000d50:	f000 fc54 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4820      	ldr	r0, [pc, #128]	; (8000dec <MX_GPIO_Init+0x230>)
 8000d6a:	f000 fc47 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d80:	230a      	movs	r3, #10
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <MX_GPIO_Init+0x230>)
 8000d8c:	f000 fc36 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000d90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	4810      	ldr	r0, [pc, #64]	; (8000dec <MX_GPIO_Init+0x230>)
 8000daa:	f000 fc27 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dae:	2302      	movs	r3, #2
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_GPIO_Init+0x224>)
 8000dc6:	f000 fc19 	bl	80015fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	3738      	adds	r7, #56	; 0x38
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58021400 	.word	0x58021400
 8000ddc:	58020400 	.word	0x58020400
 8000de0:	58021000 	.word	0x58021000
 8000de4:	58020800 	.word	0x58020800
 8000de8:	58021800 	.word	0x58021800
 8000dec:	58020000 	.word	0x58020000

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <Error_Handler+0x8>
	...

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_MspInit+0x30>)
 8000e04:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_MspInit+0x30>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_MspInit+0x30>)
 8000e14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000e18:	f003 0302 	and.w	r3, r3, #2
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	58024400 	.word	0x58024400

08000e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b0bc      	sub	sp, #240	; 0xf0
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	22c0      	movs	r2, #192	; 0xc0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f004 fe7f 	bl	8005b54 <memset>
  if(huart->Instance==UART4)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a4d      	ldr	r2, [pc, #308]	; (8000f90 <HAL_UART_MspInit+0x160>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d146      	bne.n	8000eee <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000e60:	f04f 0202 	mov.w	r2, #2
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fda2 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e82:	f7ff ffb5 	bl	8000df0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000e88:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e8c:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e92:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000e98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000e9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b3b      	ldr	r3, [pc, #236]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000ea6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eaa:	4a3a      	ldr	r2, [pc, #232]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb4:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000eb6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec8:	2312      	movs	r3, #18
 8000eca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000eda:	2308      	movs	r3, #8
 8000edc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	482c      	ldr	r0, [pc, #176]	; (8000f98 <HAL_UART_MspInit+0x168>)
 8000ee8:	f000 fb88 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eec:	e04b      	b.n	8000f86 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a2a      	ldr	r2, [pc, #168]	; (8000f9c <HAL_UART_MspInit+0x16c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d146      	bne.n	8000f86 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ef8:	f04f 0202 	mov.w	r2, #2
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 fd56 	bl	80029c0 <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000f1a:	f7ff ff69 	bl	8000df0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000f20:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f2a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f2e:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000f30:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000f3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f42:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <HAL_UART_MspInit+0x164>)
 8000f4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <HAL_UART_MspInit+0x170>)
 8000f82:	f000 fb3b 	bl	80015fc <HAL_GPIO_Init>
}
 8000f86:	bf00      	nop
 8000f88:	37f0      	adds	r7, #240	; 0xf0
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004c00 	.word	0x40004c00
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020000 	.word	0x58020000
 8000f9c:	40004800 	.word	0x40004800
 8000fa0:	58020c00 	.word	0x58020c00

08000fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <NMI_Handler+0x4>

08000faa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <HardFault_Handler+0x4>

08000fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <MemManage_Handler+0x4>

08000fb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fba:	e7fe      	b.n	8000fba <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff0:	f000 f9dc 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return 1;
 8000ffc:	2301      	movs	r3, #1
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_kill>:

int _kill(int pid, int sig)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001012:	f004 fd75 	bl	8005b00 <__errno>
 8001016:	4603      	mov	r3, r0
 8001018:	2216      	movs	r2, #22
 800101a:	601a      	str	r2, [r3, #0]
  return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_exit>:

void _exit (int status)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffe7 	bl	8001008 <_kill>
  while (1) {}    /* Make sure we hang here */
 800103a:	e7fe      	b.n	800103a <_exit+0x12>

0800103c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	e00a      	b.n	8001064 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104e:	f3af 8000 	nop.w
 8001052:	4601      	mov	r1, r0
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	60ba      	str	r2, [r7, #8]
 800105a:	b2ca      	uxtb	r2, r1
 800105c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf0      	blt.n	800104e <_read+0x12>
  }

  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	e009      	b.n	800109c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fb07 	bl	80006a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbf1      	blt.n	8001088 <_write+0x12>
  }
  return len;
 80010a4:	687b      	ldr	r3, [r7, #4]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_close>:

int _close(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d6:	605a      	str	r2, [r3, #4]
  return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_isatty>:

int _isatty(int file)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d207      	bcs.n	8001158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001148:	f004 fcda 	bl	8005b00 <__errno>
 800114c:	4603      	mov	r3, r0
 800114e:	220c      	movs	r2, #12
 8001150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e009      	b.n	800116c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <_sbrk+0x64>)
 8001168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	24100000 	.word	0x24100000
 8001178:	00000400 	.word	0x00000400
 800117c:	24000324 	.word	0x24000324
 8001180:	24000340 	.word	0x24000340

08001184 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001188:	4b32      	ldr	r3, [pc, #200]	; (8001254 <SystemInit+0xd0>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a31      	ldr	r2, [pc, #196]	; (8001254 <SystemInit+0xd0>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001198:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <SystemInit+0xd4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 030f 	and.w	r3, r3, #15
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d807      	bhi.n	80011b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <SystemInit+0xd4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 030f 	bic.w	r3, r3, #15
 80011ac:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <SystemInit+0xd4>)
 80011ae:	f043 0303 	orr.w	r3, r3, #3
 80011b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011b4:	4b29      	ldr	r3, [pc, #164]	; (800125c <SystemInit+0xd8>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a28      	ldr	r2, [pc, #160]	; (800125c <SystemInit+0xd8>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <SystemInit+0xd8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <SystemInit+0xd8>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4924      	ldr	r1, [pc, #144]	; (800125c <SystemInit+0xd8>)
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <SystemInit+0xdc>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <SystemInit+0xd4>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d007      	beq.n	80011ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <SystemInit+0xd4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 030f 	bic.w	r3, r3, #15
 80011e6:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <SystemInit+0xd4>)
 80011e8:	f043 0303 	orr.w	r3, r3, #3
 80011ec:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <SystemInit+0xd8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <SystemInit+0xd8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <SystemInit+0xd8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <SystemInit+0xd8>)
 8001202:	4a18      	ldr	r2, [pc, #96]	; (8001264 <SystemInit+0xe0>)
 8001204:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <SystemInit+0xd8>)
 8001208:	4a17      	ldr	r2, [pc, #92]	; (8001268 <SystemInit+0xe4>)
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <SystemInit+0xd8>)
 800120e:	4a17      	ldr	r2, [pc, #92]	; (800126c <SystemInit+0xe8>)
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <SystemInit+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001218:	4b10      	ldr	r3, [pc, #64]	; (800125c <SystemInit+0xd8>)
 800121a:	4a14      	ldr	r2, [pc, #80]	; (800126c <SystemInit+0xe8>)
 800121c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <SystemInit+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <SystemInit+0xd8>)
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <SystemInit+0xe8>)
 8001228:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <SystemInit+0xd8>)
 800122c:	2200      	movs	r2, #0
 800122e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <SystemInit+0xd8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <SystemInit+0xd8>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <SystemInit+0xd8>)
 800123e:	2200      	movs	r2, #0
 8001240:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <SystemInit+0xec>)
 8001244:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001248:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	52002000 	.word	0x52002000
 800125c:	58024400 	.word	0x58024400
 8001260:	eaf6ed7f 	.word	0xeaf6ed7f
 8001264:	02020200 	.word	0x02020200
 8001268:	01ff0000 	.word	0x01ff0000
 800126c:	01010280 	.word	0x01010280
 8001270:	52004000 	.word	0x52004000

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001278:	f7ff ff84 	bl	8001184 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800127e:	490d      	ldr	r1, [pc, #52]	; (80012b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001280:	4a0d      	ldr	r2, [pc, #52]	; (80012b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001284:	e002      	b.n	800128c <LoopCopyDataInit>

08001286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128a:	3304      	adds	r3, #4

0800128c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800128c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001290:	d3f9      	bcc.n	8001286 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001294:	4c0a      	ldr	r4, [pc, #40]	; (80012c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001298:	e001      	b.n	800129e <LoopFillZerobss>

0800129a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800129c:	3204      	adds	r2, #4

0800129e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a0:	d3fb      	bcc.n	800129a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f004 fc33 	bl	8005b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff fa0f 	bl	80006c8 <main>
  bx  lr
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012b0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012b4:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80012b8:	08009768 	.word	0x08009768
  ldr r2, =_sbss
 80012bc:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80012c0:	2400033c 	.word	0x2400033c

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ce:	2003      	movs	r0, #3
 80012d0:	f000 f962 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012d4:	f001 f99e 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80012d8:	4602      	mov	r2, r0
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	0a1b      	lsrs	r3, r3, #8
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	4913      	ldr	r1, [pc, #76]	; (8001334 <HAL_Init+0x6c>)
 80012e6:	5ccb      	ldrb	r3, [r1, r3]
 80012e8:	f003 031f 	and.w	r3, r3, #31
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_Init+0x68>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_Init+0x6c>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_Init+0x70>)
 800130a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <HAL_Init+0x74>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001312:	2000      	movs	r0, #0
 8001314:	f000 f814 	bl	8001340 <HAL_InitTick>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e002      	b.n	8001328 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001322:	f7ff fd6b 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	58024400 	.word	0x58024400
 8001334:	08009168 	.word	0x08009168
 8001338:	24000004 	.word	0x24000004
 800133c:	24000000 	.word	0x24000000

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_InitTick+0x60>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e021      	b.n	8001398 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_InitTick+0x64>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <HAL_InitTick+0x60>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f939 	bl	80015e2 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f000 f911 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x68>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2400000c 	.word	0x2400000c
 80013a4:	24000000 	.word	0x24000000
 80013a8:	24000008 	.word	0x24000008

080013ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	2400000c 	.word	0x2400000c
 80013d0:	24000328 	.word	0x24000328

080013d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	24000328 	.word	0x24000328

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff ffee 	bl	80013d4 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffde 	bl	80013d4 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2400000c 	.word	0x2400000c

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	4313      	orrs	r3, r2
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	05fa0000 	.word	0x05fa0000

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff47 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015bc:	f7ff ff5e 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6978      	ldr	r0, [r7, #20]
 80015c8:	f7ff ff90 	bl	80014ec <NVIC_EncodePriority>
 80015cc:	4602      	mov	r2, r0
 80015ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff5f 	bl	8001498 <__NVIC_SetPriority>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffb2 	bl	8001554 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800160a:	4b89      	ldr	r3, [pc, #548]	; (8001830 <HAL_GPIO_Init+0x234>)
 800160c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800160e:	e194      	b.n	800193a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8186 	beq.w	8001934 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x44>
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	f003 0307 	and.w	r3, r3, #7
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	69b9      	ldr	r1, [r7, #24]
 800172e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0203 	and.w	r2, r3, #3
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 80e0 	beq.w	8001934 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_GPIO_Init+0x238>)
 8001776:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800177a:	4a2e      	ldr	r2, [pc, #184]	; (8001834 <HAL_GPIO_Init+0x238>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_GPIO_Init+0x238>)
 8001786:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001792:	4a29      	ldr	r2, [pc, #164]	; (8001838 <HAL_GPIO_Init+0x23c>)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a20      	ldr	r2, [pc, #128]	; (800183c <HAL_GPIO_Init+0x240>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d052      	beq.n	8001864 <HAL_GPIO_Init+0x268>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_GPIO_Init+0x244>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d031      	beq.n	800182a <HAL_GPIO_Init+0x22e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_GPIO_Init+0x248>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02b      	beq.n	8001826 <HAL_GPIO_Init+0x22a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_GPIO_Init+0x24c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x226>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1c      	ldr	r2, [pc, #112]	; (800184c <HAL_GPIO_Init+0x250>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x222>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a1b      	ldr	r2, [pc, #108]	; (8001850 <HAL_GPIO_Init+0x254>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x21e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1a      	ldr	r2, [pc, #104]	; (8001854 <HAL_GPIO_Init+0x258>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x21a>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a19      	ldr	r2, [pc, #100]	; (8001858 <HAL_GPIO_Init+0x25c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x216>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a18      	ldr	r2, [pc, #96]	; (800185c <HAL_GPIO_Init+0x260>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x212>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_GPIO_Init+0x264>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x20e>
 8001806:	2309      	movs	r3, #9
 8001808:	e02d      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 800180a:	230a      	movs	r3, #10
 800180c:	e02b      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 800180e:	2308      	movs	r3, #8
 8001810:	e029      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 8001812:	2307      	movs	r3, #7
 8001814:	e027      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 8001816:	2306      	movs	r3, #6
 8001818:	e025      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 800181a:	2305      	movs	r3, #5
 800181c:	e023      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 800181e:	2304      	movs	r3, #4
 8001820:	e021      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 8001822:	2303      	movs	r3, #3
 8001824:	e01f      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 8001826:	2302      	movs	r3, #2
 8001828:	e01d      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 800182a:	2301      	movs	r3, #1
 800182c:	e01b      	b.n	8001866 <HAL_GPIO_Init+0x26a>
 800182e:	bf00      	nop
 8001830:	58000080 	.word	0x58000080
 8001834:	58024400 	.word	0x58024400
 8001838:	58000400 	.word	0x58000400
 800183c:	58020000 	.word	0x58020000
 8001840:	58020400 	.word	0x58020400
 8001844:	58020800 	.word	0x58020800
 8001848:	58020c00 	.word	0x58020c00
 800184c:	58021000 	.word	0x58021000
 8001850:	58021400 	.word	0x58021400
 8001854:	58021800 	.word	0x58021800
 8001858:	58021c00 	.word	0x58021c00
 800185c:	58022000 	.word	0x58022000
 8001860:	58022400 	.word	0x58022400
 8001864:	2300      	movs	r3, #0
 8001866:	69fa      	ldr	r2, [r7, #28]
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001876:	4938      	ldr	r1, [pc, #224]	; (8001958 <HAL_GPIO_Init+0x35c>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3301      	adds	r3, #1
 8001938:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	f47f ae63 	bne.w	8001610 <HAL_GPIO_Init+0x14>
  }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3724      	adds	r7, #36	; 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	58000400 	.word	0x58000400

0800195c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
 8001968:	4613      	mov	r3, r2
 800196a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001978:	e003      	b.n	8001982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001998:	4b29      	ldr	r3, [pc, #164]	; (8001a40 <HAL_PWREx_ConfigSupply+0xb0>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	2b06      	cmp	r3, #6
 80019a2:	d00a      	beq.n	80019ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d001      	beq.n	80019b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e040      	b.n	8001a38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e03e      	b.n	8001a38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80019c2:	491f      	ldr	r1, [pc, #124]	; (8001a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019ca:	f7ff fd03 	bl	80013d4 <HAL_GetTick>
 80019ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019d0:	e009      	b.n	80019e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019d2:	f7ff fcff 	bl	80013d4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019e0:	d901      	bls.n	80019e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e028      	b.n	8001a38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f2:	d1ee      	bne.n	80019d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b1e      	cmp	r3, #30
 80019f8:	d008      	beq.n	8001a0c <HAL_PWREx_ConfigSupply+0x7c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b2e      	cmp	r3, #46	; 0x2e
 80019fe:	d005      	beq.n	8001a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b1d      	cmp	r3, #29
 8001a04:	d002      	beq.n	8001a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b2d      	cmp	r3, #45	; 0x2d
 8001a0a:	d114      	bne.n	8001a36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001a0c:	f7ff fce2 	bl	80013d4 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a12:	e009      	b.n	8001a28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a14:	f7ff fcde 	bl	80013d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a22:	d901      	bls.n	8001a28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e007      	b.n	8001a38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a34:	d1ee      	bne.n	8001a14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	58024800 	.word	0x58024800

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f000 bc1f 	b.w	8002296 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80b3 	beq.w	8001bcc <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a66:	4b95      	ldr	r3, [pc, #596]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a70:	4b92      	ldr	r3, [pc, #584]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	2b10      	cmp	r3, #16
 8001a7a:	d007      	beq.n	8001a8c <HAL_RCC_OscConfig+0x48>
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	2b18      	cmp	r3, #24
 8001a80:	d112      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x64>
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8098 	beq.w	8001bca <HAL_RCC_OscConfig+0x186>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 8093 	bne.w	8001bca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e3f6      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab0:	d106      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x7c>
 8001ab2:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a81      	ldr	r2, [pc, #516]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e058      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_OscConfig+0xaa>
 8001ac8:	4b7c      	ldr	r3, [pc, #496]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a7b      	ldr	r2, [pc, #492]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b79      	ldr	r3, [pc, #484]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a78      	ldr	r2, [pc, #480]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b76      	ldr	r3, [pc, #472]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a75      	ldr	r2, [pc, #468]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e041      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001af6:	d112      	bne.n	8001b1e <HAL_RCC_OscConfig+0xda>
 8001af8:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a6f      	ldr	r2, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b6d      	ldr	r3, [pc, #436]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6c      	ldr	r2, [pc, #432]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a69      	ldr	r2, [pc, #420]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	e029      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001b26:	d112      	bne.n	8001b4e <HAL_RCC_OscConfig+0x10a>
 8001b28:	4b64      	ldr	r3, [pc, #400]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a63      	ldr	r2, [pc, #396]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a60      	ldr	r2, [pc, #384]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5d      	ldr	r2, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e011      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a5a      	ldr	r2, [pc, #360]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b58      	ldr	r3, [pc, #352]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a57      	ldr	r2, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b6c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001b70:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d013      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fc2b 	bl	80013d4 <HAL_GetTick>
 8001b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b82:	f7ff fc27 	bl	80013d4 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b64      	cmp	r3, #100	; 0x64
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e380      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b94:	4b49      	ldr	r3, [pc, #292]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x13e>
 8001ba0:	e014      	b.n	8001bcc <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff fc17 	bl	80013d4 <HAL_GetTick>
 8001ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001baa:	f7ff fc13 	bl	80013d4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b64      	cmp	r3, #100	; 0x64
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e36c      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x166>
 8001bc8:	e000      	b.n	8001bcc <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 808c 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bda:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001be2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001be4:	4b35      	ldr	r3, [pc, #212]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_RCC_OscConfig+0x1bc>
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	2b18      	cmp	r3, #24
 8001bf4:	d137      	bne.n	8001c66 <HAL_RCC_OscConfig+0x222>
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d132      	bne.n	8001c66 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c00:	4b2e      	ldr	r3, [pc, #184]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_OscConfig+0x1d4>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e33e      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c18:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 0219 	bic.w	r2, r3, #25
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4925      	ldr	r1, [pc, #148]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fbd3 	bl	80013d4 <HAL_GetTick>
 8001c2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c32:	f7ff fbcf 	bl	80013d4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e328      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	4917      	ldr	r1, [pc, #92]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c64:	e045      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d028      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 0219 	bic.w	r2, r3, #25
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	4910      	ldr	r1, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fba8 	bl	80013d4 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fba4 	bl	80013d4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e2fd      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	4901      	ldr	r1, [pc, #4]	; (8001cbc <HAL_RCC_OscConfig+0x278>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2ae>
 8001cbc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc0:	4b97      	ldr	r3, [pc, #604]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a96      	ldr	r2, [pc, #600]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fb82 	bl	80013d4 <HAL_GetTick>
 8001cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fb7e 	bl	80013d4 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e2d7      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ce6:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06a      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfe:	4b88      	ldr	r3, [pc, #544]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d08:	4b85      	ldr	r3, [pc, #532]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d007      	beq.n	8001d24 <HAL_RCC_OscConfig+0x2e0>
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b18      	cmp	r3, #24
 8001d18:	d11b      	bne.n	8001d52 <HAL_RCC_OscConfig+0x30e>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d116      	bne.n	8001d52 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d24:	4b7e      	ldr	r3, [pc, #504]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2f8>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	2b80      	cmp	r3, #128	; 0x80
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e2ac      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d3c:	4b78      	ldr	r3, [pc, #480]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	4975      	ldr	r1, [pc, #468]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d50:	e040      	b.n	8001dd4 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d023      	beq.n	8001da2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d5a:	4b71      	ldr	r3, [pc, #452]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a70      	ldr	r2, [pc, #448]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb35 	bl	80013d4 <HAL_GetTick>
 8001d6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fb31 	bl	80013d4 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e28a      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d80:	4b67      	ldr	r3, [pc, #412]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d8c:	4b64      	ldr	r3, [pc, #400]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	4961      	ldr	r1, [pc, #388]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
 8001da0:	e018      	b.n	8001dd4 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001da2:	4b5f      	ldr	r3, [pc, #380]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5e      	ldr	r2, [pc, #376]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7ff fb11 	bl	80013d4 <HAL_GetTick>
 8001db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001db6:	f7ff fb0d 	bl	80013d4 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e266      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dc8:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d036      	beq.n	8001e4e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d019      	beq.n	8001e1c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de8:	4b4d      	ldr	r3, [pc, #308]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dec:	4a4c      	ldr	r2, [pc, #304]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff faee 	bl	80013d4 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff faea 	bl	80013d4 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e243      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e0e:	4b44      	ldr	r3, [pc, #272]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x3b8>
 8001e1a:	e018      	b.n	8001e4e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e20:	4a3f      	ldr	r2, [pc, #252]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e28:	f7ff fad4 	bl	80013d4 <HAL_GetTick>
 8001e2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff fad0 	bl	80013d4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e229      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e42:	4b37      	ldr	r3, [pc, #220]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d036      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e6e:	f7ff fab1 	bl	80013d4 <HAL_GetTick>
 8001e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e76:	f7ff faad 	bl	80013d4 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e206      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e88:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x432>
 8001e94:	e018      	b.n	8001ec8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001e9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fa97 	bl	80013d4 <HAL_GetTick>
 8001ea6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001eaa:	f7ff fa93 	bl	80013d4 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e1ec      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80af 	beq.w	8002034 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ed6:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <HAL_RCC_OscConfig+0x4e0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <HAL_RCC_OscConfig+0x4e0>)
 8001edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ee2:	f7ff fa77 	bl	80013d4 <HAL_GetTick>
 8001ee6:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eea:	f7ff fa73 	bl	80013d4 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	; 0x64
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1cc      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_OscConfig+0x4e0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d10b      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4e4>
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f14:	4a02      	ldr	r2, [pc, #8]	; (8001f20 <HAL_RCC_OscConfig+0x4dc>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f1c:	e05b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x592>
 8001f1e:	bf00      	nop
 8001f20:	58024400 	.word	0x58024400
 8001f24:	58024800 	.word	0x58024800
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d112      	bne.n	8001f56 <HAL_RCC_OscConfig+0x512>
 8001f30:	4b9d      	ldr	r3, [pc, #628]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f34:	4a9c      	ldr	r2, [pc, #624]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f3c:	4b9a      	ldr	r3, [pc, #616]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f40:	4a99      	ldr	r2, [pc, #612]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f46:	6713      	str	r3, [r2, #112]	; 0x70
 8001f48:	4b97      	ldr	r3, [pc, #604]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a96      	ldr	r2, [pc, #600]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f4e:	f023 0304 	bic.w	r3, r3, #4
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	e03f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x592>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d112      	bne.n	8001f84 <HAL_RCC_OscConfig+0x540>
 8001f5e:	4b92      	ldr	r3, [pc, #584]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a91      	ldr	r2, [pc, #580]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	4b8f      	ldr	r3, [pc, #572]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a8e      	ldr	r2, [pc, #568]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	4b8c      	ldr	r3, [pc, #560]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a8b      	ldr	r2, [pc, #556]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	e028      	b.n	8001fd6 <HAL_RCC_OscConfig+0x592>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b85      	cmp	r3, #133	; 0x85
 8001f8a:	d112      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x56e>
 8001f8c:	4b86      	ldr	r3, [pc, #536]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a85      	ldr	r2, [pc, #532]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9c:	4a82      	ldr	r2, [pc, #520]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa4:	4b80      	ldr	r3, [pc, #512]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4a7f      	ldr	r2, [pc, #508]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb0:	e011      	b.n	8001fd6 <HAL_RCC_OscConfig+0x592>
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	4a7c      	ldr	r2, [pc, #496]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbe:	4b7a      	ldr	r3, [pc, #488]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	4a79      	ldr	r2, [pc, #484]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fca:	4b77      	ldr	r3, [pc, #476]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	4a76      	ldr	r2, [pc, #472]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d015      	beq.n	800200a <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fde:	f7ff f9f9 	bl	80013d4 <HAL_GetTick>
 8001fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f7ff f9f5 	bl	80013d4 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e14c      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ee      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x5a2>
 8002008:	e014      	b.n	8002034 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff f9e3 	bl	80013d4 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff f9df 	bl	80013d4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e136      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002028:	4b5f      	ldr	r3, [pc, #380]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1ee      	bne.n	8002012 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 812b 	beq.w	8002294 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800203e:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002046:	2b18      	cmp	r3, #24
 8002048:	f000 80bb 	beq.w	80021c2 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	2b02      	cmp	r3, #2
 8002052:	f040 8095 	bne.w	8002180 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b54      	ldr	r3, [pc, #336]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a53      	ldr	r2, [pc, #332]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800205c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff f9b7 	bl	80013d4 <HAL_GetTick>
 8002066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7ff f9b3 	bl	80013d4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e10c      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207c:	4b4a      	ldr	r3, [pc, #296]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002088:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800208a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800208c:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_OscConfig+0x768>)
 800208e:	4013      	ands	r3, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002098:	0112      	lsls	r2, r2, #4
 800209a:	430a      	orrs	r2, r1
 800209c:	4942      	ldr	r1, [pc, #264]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	628b      	str	r3, [r1, #40]	; 0x28
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	3b01      	subs	r3, #1
 80020a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	3b01      	subs	r3, #1
 80020b2:	025b      	lsls	r3, r3, #9
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	3b01      	subs	r3, #1
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ca:	3b01      	subs	r3, #1
 80020cc:	061b      	lsls	r3, r3, #24
 80020ce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80020d2:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020d8:	4b33      	ldr	r3, [pc, #204]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	4a32      	ldr	r2, [pc, #200]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020e4:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <HAL_RCC_OscConfig+0x76c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020f0:	00d2      	lsls	r2, r2, #3
 80020f2:	492d      	ldr	r1, [pc, #180]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f023 020c 	bic.w	r2, r3, #12
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	4928      	ldr	r1, [pc, #160]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002106:	4313      	orrs	r3, r2
 8002108:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800210a:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	f023 0202 	bic.w	r2, r3, #2
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4924      	ldr	r1, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002118:	4313      	orrs	r3, r2
 800211a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	4a21      	ldr	r2, [pc, #132]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	4a1e      	ldr	r2, [pc, #120]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800212e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800213a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	4a18      	ldr	r2, [pc, #96]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002158:	f7ff f93c 	bl	80013d4 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002160:	f7ff f938 	bl	80013d4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e091      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x71c>
 800217e:	e089      	b.n	8002294 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <HAL_RCC_OscConfig+0x764>)
 8002186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff f922 	bl	80013d4 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002192:	e00f      	b.n	80021b4 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7ff f91e 	bl	80013d4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d908      	bls.n	80021b4 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e077      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
 80021a6:	bf00      	nop
 80021a8:	58024400 	.word	0x58024400
 80021ac:	fffffc0c 	.word	0xfffffc0c
 80021b0:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1e9      	bne.n	8002194 <HAL_RCC_OscConfig+0x750>
 80021c0:	e068      	b.n	8002294 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021c8:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021cc:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d031      	beq.n	800223a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d12a      	bne.n	800223a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d122      	bne.n	800223a <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d11a      	bne.n	800223a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0a5b      	lsrs	r3, r3, #9
 8002208:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002210:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d111      	bne.n	800223a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d108      	bne.n	800223a <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002236:	429a      	cmp	r2, r3
 8002238:	d001      	beq.n	800223e <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e02b      	b.n	8002296 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800223e:	4b18      	ldr	r3, [pc, #96]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002248:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	429a      	cmp	r2, r3
 8002252:	d01f      	beq.n	8002294 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	4a11      	ldr	r2, [pc, #68]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002260:	f7ff f8b8 	bl	80013d4 <HAL_GetTick>
 8002264:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002266:	bf00      	nop
 8002268:	f7ff f8b4 	bl	80013d4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	4293      	cmp	r3, r2
 8002272:	d0f9      	beq.n	8002268 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 8002276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_RCC_OscConfig+0x860>)
 800227a:	4013      	ands	r3, r2
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002280:	00d2      	lsls	r2, r2, #3
 8002282:	4907      	ldr	r1, [pc, #28]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_RCC_OscConfig+0x85c>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3730      	adds	r7, #48	; 0x30
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	58024400 	.word	0x58024400
 80022a4:	ffff0007 	.word	0xffff0007

080022a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e19c      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022bc:	4b8a      	ldr	r3, [pc, #552]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d910      	bls.n	80022ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	4985      	ldr	r1, [pc, #532]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b83      	ldr	r3, [pc, #524]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e184      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d010      	beq.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	4b7b      	ldr	r3, [pc, #492]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002304:	429a      	cmp	r2, r3
 8002306:	d908      	bls.n	800231a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002308:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	4975      	ldr	r1, [pc, #468]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002316:	4313      	orrs	r3, r2
 8002318:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d010      	beq.n	8002348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	4b70      	ldr	r3, [pc, #448]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002332:	429a      	cmp	r2, r3
 8002334:	d908      	bls.n	8002348 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002336:	4b6d      	ldr	r3, [pc, #436]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	496a      	ldr	r1, [pc, #424]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002344:	4313      	orrs	r3, r2
 8002346:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	2b00      	cmp	r3, #0
 8002352:	d010      	beq.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	4b64      	ldr	r3, [pc, #400]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002360:	429a      	cmp	r2, r3
 8002362:	d908      	bls.n	8002376 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	495e      	ldr	r1, [pc, #376]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002372:	4313      	orrs	r3, r2
 8002374:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0320 	and.w	r3, r3, #32
 800237e:	2b00      	cmp	r3, #0
 8002380:	d010      	beq.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	4b59      	ldr	r3, [pc, #356]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800238e:	429a      	cmp	r2, r3
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4953      	ldr	r1, [pc, #332]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d010      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	429a      	cmp	r2, r3
 80023be:	d908      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	f023 020f 	bic.w	r2, r3, #15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4947      	ldr	r1, [pc, #284]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d055      	beq.n	800248a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023de:	4b43      	ldr	r3, [pc, #268]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4940      	ldr	r1, [pc, #256]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d107      	bne.n	8002408 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023f8:	4b3c      	ldr	r3, [pc, #240]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d121      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0f6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d115      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0ea      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002428:	4b30      	ldr	r3, [pc, #192]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d109      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0de      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0d6      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f023 0207 	bic.w	r2, r3, #7
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4925      	ldr	r1, [pc, #148]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 8002456:	4313      	orrs	r3, r2
 8002458:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245a:	f7fe ffbb 	bl	80013d4 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002460:	e00a      	b.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002462:	f7fe ffb7 	bl	80013d4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0be      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	429a      	cmp	r2, r3
 8002488:	d1eb      	bne.n	8002462 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d208      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	490e      	ldr	r1, [pc, #56]	; (80024ec <HAL_RCC_ClockConfig+0x244>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d214      	bcs.n	80024f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 020f 	bic.w	r2, r3, #15
 80024ce:	4906      	ldr	r1, [pc, #24]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <HAL_RCC_ClockConfig+0x240>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e086      	b.n	80025f6 <HAL_RCC_ClockConfig+0x34e>
 80024e8:	52002000 	.word	0x52002000
 80024ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d010      	beq.n	800251e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691a      	ldr	r2, [r3, #16]
 8002500:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002508:	429a      	cmp	r2, r3
 800250a:	d208      	bcs.n	800251e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800250c:	4b3c      	ldr	r3, [pc, #240]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4939      	ldr	r1, [pc, #228]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800251a:	4313      	orrs	r3, r2
 800251c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	4b34      	ldr	r3, [pc, #208]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002536:	429a      	cmp	r2, r3
 8002538:	d208      	bcs.n	800254c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800253a:	4b31      	ldr	r3, [pc, #196]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	492e      	ldr	r1, [pc, #184]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002548:	4313      	orrs	r3, r2
 800254a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d010      	beq.n	800257a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002564:	429a      	cmp	r2, r3
 8002566:	d208      	bcs.n	800257a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4922      	ldr	r1, [pc, #136]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002576:	4313      	orrs	r3, r2
 8002578:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	2b00      	cmp	r3, #0
 8002584:	d010      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002592:	429a      	cmp	r2, r3
 8002594:	d208      	bcs.n	80025a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	4917      	ldr	r1, [pc, #92]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80025a8:	f000 f834 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	0a1b      	lsrs	r3, r3, #8
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	4912      	ldr	r1, [pc, #72]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	f003 031f 	and.w	r3, r3, #31
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <HAL_RCC_ClockConfig+0x358>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	4a0d      	ldr	r2, [pc, #52]	; (8002604 <HAL_RCC_ClockConfig+0x35c>)
 80025d0:	5cd3      	ldrb	r3, [r2, r3]
 80025d2:	f003 031f 	and.w	r3, r3, #31
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <HAL_RCC_ClockConfig+0x360>)
 80025de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_RCC_ClockConfig+0x364>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025e6:	4b0a      	ldr	r3, [pc, #40]	; (8002610 <HAL_RCC_ClockConfig+0x368>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fe fea8 	bl	8001340 <HAL_InitTick>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	58024400 	.word	0x58024400
 8002604:	08009168 	.word	0x08009168
 8002608:	24000004 	.word	0x24000004
 800260c:	24000000 	.word	0x24000000
 8002610:	24000008 	.word	0x24000008

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261a:	4bb3      	ldr	r3, [pc, #716]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002622:	2b18      	cmp	r3, #24
 8002624:	f200 8155 	bhi.w	80028d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <HAL_RCC_GetSysClockFreq+0x1c>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002695 	.word	0x08002695
 8002634:	080028d3 	.word	0x080028d3
 8002638:	080028d3 	.word	0x080028d3
 800263c:	080028d3 	.word	0x080028d3
 8002640:	080028d3 	.word	0x080028d3
 8002644:	080028d3 	.word	0x080028d3
 8002648:	080028d3 	.word	0x080028d3
 800264c:	080028d3 	.word	0x080028d3
 8002650:	080026bb 	.word	0x080026bb
 8002654:	080028d3 	.word	0x080028d3
 8002658:	080028d3 	.word	0x080028d3
 800265c:	080028d3 	.word	0x080028d3
 8002660:	080028d3 	.word	0x080028d3
 8002664:	080028d3 	.word	0x080028d3
 8002668:	080028d3 	.word	0x080028d3
 800266c:	080028d3 	.word	0x080028d3
 8002670:	080026c1 	.word	0x080026c1
 8002674:	080028d3 	.word	0x080028d3
 8002678:	080028d3 	.word	0x080028d3
 800267c:	080028d3 	.word	0x080028d3
 8002680:	080028d3 	.word	0x080028d3
 8002684:	080028d3 	.word	0x080028d3
 8002688:	080028d3 	.word	0x080028d3
 800268c:	080028d3 	.word	0x080028d3
 8002690:	080026c7 	.word	0x080026c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002694:	4b94      	ldr	r3, [pc, #592]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026a0:	4b91      	ldr	r3, [pc, #580]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	4a90      	ldr	r2, [pc, #576]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026b2:	e111      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026b4:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b6:	61bb      	str	r3, [r7, #24]
      break;
 80026b8:	e10e      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026bc:	61bb      	str	r3, [r7, #24]
      break;
 80026be:	e10b      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026c0:	4b8c      	ldr	r3, [pc, #560]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026c2:	61bb      	str	r3, [r7, #24]
      break;
 80026c4:	e108      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026c6:	4b88      	ldr	r3, [pc, #544]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026d0:	4b85      	ldr	r3, [pc, #532]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026dc:	4b82      	ldr	r3, [pc, #520]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026e6:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	08db      	lsrs	r3, r3, #3
 80026ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	fb02 f303 	mul.w	r3, r2, r3
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80e1 	beq.w	80028cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b02      	cmp	r3, #2
 800270e:	f000 8083 	beq.w	8002818 <HAL_RCC_GetSysClockFreq+0x204>
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b02      	cmp	r3, #2
 8002716:	f200 80a1 	bhi.w	800285c <HAL_RCC_GetSysClockFreq+0x248>
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x114>
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d056      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002726:	e099      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002728:	4b6f      	ldr	r3, [pc, #444]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d02d      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002734:	4b6c      	ldr	r3, [pc, #432]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	4a6b      	ldr	r2, [pc, #428]	; (80028ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	ee07 3a90 	vmov	s15, r3
 800274c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800275e:	4b62      	ldr	r3, [pc, #392]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800276e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002772:	eddf 5a61 	vldr	s11, [pc, #388]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800277e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800278e:	e087      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	ee07 3a90 	vmov	s15, r3
 8002796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800279a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80028fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800279e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a2:	4b51      	ldr	r3, [pc, #324]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027d2:	e065      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800280a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002816:	e043      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002904 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800282a:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800283a:	ed97 6a02 	vldr	s12, [r7, #8]
 800283e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800284a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800284e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800285a:	e021      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002866:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002900 <HAL_RCC_GetSysClockFreq+0x2ec>
 800286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800287e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002882:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80028f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800288a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800288e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800289e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	0a5b      	lsrs	r3, r3, #9
 80028a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028aa:	3301      	adds	r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80028bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c4:	ee17 3a90 	vmov	r3, s15
 80028c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028ca:	e005      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
      break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028d4:	61bb      	str	r3, [r7, #24]
      break;
 80028d6:	bf00      	nop
  }

  return sysclockfreq;
 80028d8:	69bb      	ldr	r3, [r7, #24]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	03d09000 	.word	0x03d09000
 80028f0:	003d0900 	.word	0x003d0900
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	46000000 	.word	0x46000000
 80028fc:	4c742400 	.word	0x4c742400
 8002900:	4a742400 	.word	0x4a742400
 8002904:	4af42400 	.word	0x4af42400

08002908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800290e:	f7ff fe81 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490f      	ldr	r1, [pc, #60]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_GetHCLKFreq+0x50>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RCC_GetHCLKFreq+0x54>)
 8002936:	5cd3      	ldrb	r3, [r2, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a07      	ldr	r2, [pc, #28]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 8002944:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <HAL_RCC_GetHCLKFreq+0x58>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024400 	.word	0x58024400
 800295c:	08009168 	.word	0x08009168
 8002960:	24000004 	.word	0x24000004
 8002964:	24000000 	.word	0x24000000

08002968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800296c:	f7ff ffcc 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002970:	4602      	mov	r2, r0
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	4904      	ldr	r1, [pc, #16]	; (8002990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800297e:	5ccb      	ldrb	r3, [r1, r3]
 8002980:	f003 031f 	and.w	r3, r3, #31
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002988:	4618      	mov	r0, r3
 800298a:	bd80      	pop	{r7, pc}
 800298c:	58024400 	.word	0x58024400
 8002990:	08009168 	.word	0x08009168

08002994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002998:	f7ff ffb6 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4904      	ldr	r1, [pc, #16]	; (80029bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	58024400 	.word	0x58024400
 80029bc:	08009168 	.word	0x08009168

080029c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b0c8      	sub	sp, #288	; 0x120
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d2:	2300      	movs	r3, #0
 80029d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80029e4:	2500      	movs	r5, #0
 80029e6:	ea54 0305 	orrs.w	r3, r4, r5
 80029ea:	d049      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029f6:	d02f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029fc:	d828      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a02:	d01a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a08:	d822      	bhi.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a12:	d007      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a14:	e01c      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a16:	4ba7      	ldr	r3, [pc, #668]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	4aa6      	ldr	r2, [pc, #664]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a22:	e01a      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 fc43 	bl	80042b8 <RCCEx_PLL2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a38:	e00f      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a3e:	3328      	adds	r3, #40	; 0x28
 8002a40:	2102      	movs	r1, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 fcea 	bl	800441c <RCCEx_PLL3_Config>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a4e:	e004      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a56:	e000      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a62:	4b94      	ldr	r3, [pc, #592]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a70:	4a90      	ldr	r2, [pc, #576]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	6513      	str	r3, [r2, #80]	; 0x50
 8002a76:	e003      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002a8c:	f04f 0900 	mov.w	r9, #0
 8002a90:	ea58 0309 	orrs.w	r3, r8, r9
 8002a94:	d047      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d82a      	bhi.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002aa0:	a201      	add	r2, pc, #4	; (adr r2, 8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa6:	bf00      	nop
 8002aa8:	08002abd 	.word	0x08002abd
 8002aac:	08002acb 	.word	0x08002acb
 8002ab0:	08002ae1 	.word	0x08002ae1
 8002ab4:	08002aff 	.word	0x08002aff
 8002ab8:	08002aff 	.word	0x08002aff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002abc:	4b7d      	ldr	r3, [pc, #500]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	4a7c      	ldr	r2, [pc, #496]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac8:	e01a      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ace:	3308      	adds	r3, #8
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f001 fbf0 	bl	80042b8 <RCCEx_PLL2_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ade:	e00f      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ae0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ae4:	3328      	adds	r3, #40	; 0x28
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 fc97 	bl	800441c <RCCEx_PLL3_Config>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af4:	e004      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002afc:	e000      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b08:	4b6a      	ldr	r3, [pc, #424]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	f023 0107 	bic.w	r1, r3, #7
 8002b10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b16:	4a67      	ldr	r2, [pc, #412]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002b32:	f04f 0b00 	mov.w	fp, #0
 8002b36:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b3a:	d054      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8002b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b46:	d036      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002b48:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b4c:	d82f      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b52:	d032      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	d829      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b5c:	d02f      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8002b60:	d825      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d018      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8002b66:	2b80      	cmp	r3, #128	; 0x80
 8002b68:	d821      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d007      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8002b72:	e01c      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b74:	4b4f      	ldr	r3, [pc, #316]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	4a4e      	ldr	r2, [pc, #312]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b80:	e01e      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b86:	3308      	adds	r3, #8
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fb94 	bl	80042b8 <RCCEx_PLL2_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002b96:	e013      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b9c:	3328      	adds	r3, #40	; 0x28
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f001 fc3b 	bl	800441c <RCCEx_PLL3_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002bac:	e008      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002bb4:	e004      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002bb6:	bf00      	nop
 8002bb8:	e002      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002bba:	bf00      	nop
 8002bbc:	e000      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd6:	4a37      	ldr	r2, [pc, #220]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6513      	str	r3, [r2, #80]	; 0x50
 8002bdc:	e003      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bde:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002be2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002bf2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bfc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002c00:	460b      	mov	r3, r1
 8002c02:	4313      	orrs	r3, r2
 8002c04:	d05c      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c10:	d03b      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002c12:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c16:	d834      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c1c:	d037      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8002c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c22:	d82e      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c28:	d033      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002c2a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c2e:	d828      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c34:	d01a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d822      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d003      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8002c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c44:	d007      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002c46:	e01c      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c54:	e01e      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5a:	3308      	adds	r3, #8
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 fb2a 	bl	80042b8 <RCCEx_PLL2_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c6a:	e013      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c70:	3328      	adds	r3, #40	; 0x28
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f001 fbd1 	bl	800441c <RCCEx_PLL3_Config>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002c80:	e008      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c88:	e004      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c8a:	bf00      	nop
 8002c8c:	e002      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c8e:	bf00      	nop
 8002c90:	e000      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10d      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002caa:	4a02      	ldr	r2, [pc, #8]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6513      	str	r3, [r2, #80]	; 0x50
 8002cb0:	e006      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002cb2:	bf00      	nop
 8002cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002cbc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002ccc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002cd6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	d03a      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	2b30      	cmp	r3, #48	; 0x30
 8002ce8:	d01f      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002cea:	2b30      	cmp	r3, #48	; 0x30
 8002cec:	d819      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002cee:	2b20      	cmp	r3, #32
 8002cf0:	d00c      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d815      	bhi.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d019      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d111      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cfe:	4bae      	ldr	r3, [pc, #696]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	4aad      	ldr	r2, [pc, #692]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002d0a:	e011      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d10:	3308      	adds	r3, #8
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f001 facf 	bl	80042b8 <RCCEx_PLL2_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002d20:	e006      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d28:	e002      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002d2a:	bf00      	nop
 8002d2c:	e000      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002d2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002d38:	4b9f      	ldr	r3, [pc, #636]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002d40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	4a9c      	ldr	r2, [pc, #624]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d48:	430b      	orrs	r3, r1
 8002d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d4c:	e003      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d52:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002d62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4313      	orrs	r3, r2
 8002d74:	d051      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d80:	d035      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d86:	d82e      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d8c:	d031      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002d8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d92:	d828      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002d94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d98:	d01a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9e:	d822      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da8:	d007      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002daa:	e01c      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dac:	4b82      	ldr	r3, [pc, #520]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	4a81      	ldr	r2, [pc, #516]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002db8:	e01c      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 fa78 	bl	80042b8 <RCCEx_PLL2_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002dd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dd4:	3328      	adds	r3, #40	; 0x28
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fb1f 	bl	800441c <RCCEx_PLL3_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002dfc:	4b6e      	ldr	r3, [pc, #440]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e00:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e0a:	4a6b      	ldr	r2, [pc, #428]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6513      	str	r3, [r2, #80]	; 0x50
 8002e10:	e003      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e12:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e16:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002e30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002e34:	460b      	mov	r3, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	d053      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002e3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e44:	d033      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002e46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e4a:	d82c      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e50:	d02f      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002e52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e56:	d826      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e5c:	d02b      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002e5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e62:	d820      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e68:	d012      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002e6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e6e:	d81a      	bhi.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d022      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e7e:	3308      	adds	r3, #8
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fa18 	bl	80042b8 <RCCEx_PLL2_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002e8e:	e015      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e94:	3328      	adds	r3, #40	; 0x28
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 fabf 	bl	800441c <RCCEx_PLL3_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002eac:	e006      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e004      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ebc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10a      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002ecc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ed2:	4a39      	ldr	r2, [pc, #228]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ed4:	430b      	orrs	r3, r1
 8002ed6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ed8:	e003      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eda:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ede:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eea:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002eee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ef8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4313      	orrs	r3, r2
 8002f00:	d060      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f0a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f0e:	d039      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002f10:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f14:	d832      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1a:	d035      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f20:	d82c      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f26:	d031      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d826      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f32:	d02d      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002f34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f38:	d820      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f3e:	d012      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f44:	d81a      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d024      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f4e:	d115      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f54:	3308      	adds	r3, #8
 8002f56:	2101      	movs	r1, #1
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f001 f9ad 	bl	80042b8 <RCCEx_PLL2_Config>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f64:	e017      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f6a:	3328      	adds	r3, #40	; 0x28
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 fa54 	bl	800441c <RCCEx_PLL3_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002f7a:	e00c      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002f82:	e008      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f84:	bf00      	nop
 8002f86:	e006      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f88:	bf00      	nop
 8002f8a:	e004      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e002      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f90:	bf00      	nop
 8002f92:	e000      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f96:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10e      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f9e:	4b06      	ldr	r3, [pc, #24]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002faa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fae:	4a02      	ldr	r2, [pc, #8]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb4:	e006      	b.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002fb6:	bf00      	nop
 8002fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fbc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fc0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	d037      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fee:	d00e      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff4:	d816      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d018      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ffe:	d111      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003000:	4bc4      	ldr	r3, [pc, #784]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	4ac3      	ldr	r2, [pc, #780]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800300a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800300c:	e00f      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800300e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003012:	3308      	adds	r3, #8
 8003014:	2101      	movs	r1, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f001 f94e 	bl	80042b8 <RCCEx_PLL2_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003022:	e004      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800302a:	e000      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800302c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003036:	4bb7      	ldr	r3, [pc, #732]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800303a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800303e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003044:	4ab3      	ldr	r2, [pc, #716]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003046:	430b      	orrs	r3, r1
 8003048:	6513      	str	r3, [r2, #80]	; 0x50
 800304a:	e003      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003050:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800306a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800306e:	460b      	mov	r3, r1
 8003070:	4313      	orrs	r3, r2
 8003072:	d039      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307a:	2b03      	cmp	r3, #3
 800307c:	d81c      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	080030c1 	.word	0x080030c1
 8003088:	08003095 	.word	0x08003095
 800308c:	080030a3 	.word	0x080030a3
 8003090:	080030c1 	.word	0x080030c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003094:	4b9f      	ldr	r3, [pc, #636]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	4a9e      	ldr	r2, [pc, #632]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800309a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030a0:	e00f      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030a6:	3308      	adds	r3, #8
 80030a8:	2102      	movs	r1, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 f904 	bl	80042b8 <RCCEx_PLL2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80030b6:	e004      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80030c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80030ca:	4b92      	ldr	r3, [pc, #584]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ce:	f023 0103 	bic.w	r1, r3, #3
 80030d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d8:	4a8e      	ldr	r2, [pc, #568]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80030da:	430b      	orrs	r3, r1
 80030dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030de:	e003      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80030f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030f8:	2300      	movs	r3, #0
 80030fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003102:	460b      	mov	r3, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	f000 8099 	beq.w	800323c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800310a:	4b83      	ldr	r3, [pc, #524]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a82      	ldr	r2, [pc, #520]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003114:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003116:	f7fe f95d 	bl	80013d4 <HAL_GetTick>
 800311a:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800311e:	e00b      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe f958 	bl	80013d4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b64      	cmp	r3, #100	; 0x64
 800312e:	d903      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003136:	e005      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003138:	4b77      	ldr	r3, [pc, #476]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0ed      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003144:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d173      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800314c:	4b71      	ldr	r3, [pc, #452]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800314e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003154:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003158:	4053      	eors	r3, r2
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d015      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003162:	4b6c      	ldr	r3, [pc, #432]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800316e:	4b69      	ldr	r3, [pc, #420]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a68      	ldr	r2, [pc, #416]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800317a:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a65      	ldr	r2, [pc, #404]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003186:	4a63      	ldr	r2, [pc, #396]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800318e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003192:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319a:	d118      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe f91a 	bl	80013d4 <HAL_GetTick>
 80031a0:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a4:	e00d      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe f915 	bl	80013d4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d903      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80031c0:	e005      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c2:	4b54      	ldr	r3, [pc, #336]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0eb      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80031ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d129      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e6:	d10e      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80031e8:	4b4a      	ldr	r3, [pc, #296]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80031f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031f8:	091a      	lsrs	r2, r3, #4
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	4a45      	ldr	r2, [pc, #276]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003200:	430b      	orrs	r3, r1
 8003202:	6113      	str	r3, [r2, #16]
 8003204:	e005      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003206:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	4a42      	ldr	r2, [pc, #264]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800320c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003210:	6113      	str	r3, [r2, #16]
 8003212:	4b40      	ldr	r3, [pc, #256]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003214:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800321a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800321e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003224:	430b      	orrs	r3, r1
 8003226:	6713      	str	r3, [r2, #112]	; 0x70
 8003228:	e008      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800322a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800322e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003238:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800323c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f002 0301 	and.w	r3, r2, #1
 8003248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003252:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003256:	460b      	mov	r3, r1
 8003258:	4313      	orrs	r3, r2
 800325a:	f000 8090 	beq.w	800337e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800325e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003266:	2b28      	cmp	r3, #40	; 0x28
 8003268:	d870      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	08003355 	.word	0x08003355
 8003274:	0800334d 	.word	0x0800334d
 8003278:	0800334d 	.word	0x0800334d
 800327c:	0800334d 	.word	0x0800334d
 8003280:	0800334d 	.word	0x0800334d
 8003284:	0800334d 	.word	0x0800334d
 8003288:	0800334d 	.word	0x0800334d
 800328c:	0800334d 	.word	0x0800334d
 8003290:	08003321 	.word	0x08003321
 8003294:	0800334d 	.word	0x0800334d
 8003298:	0800334d 	.word	0x0800334d
 800329c:	0800334d 	.word	0x0800334d
 80032a0:	0800334d 	.word	0x0800334d
 80032a4:	0800334d 	.word	0x0800334d
 80032a8:	0800334d 	.word	0x0800334d
 80032ac:	0800334d 	.word	0x0800334d
 80032b0:	08003337 	.word	0x08003337
 80032b4:	0800334d 	.word	0x0800334d
 80032b8:	0800334d 	.word	0x0800334d
 80032bc:	0800334d 	.word	0x0800334d
 80032c0:	0800334d 	.word	0x0800334d
 80032c4:	0800334d 	.word	0x0800334d
 80032c8:	0800334d 	.word	0x0800334d
 80032cc:	0800334d 	.word	0x0800334d
 80032d0:	08003355 	.word	0x08003355
 80032d4:	0800334d 	.word	0x0800334d
 80032d8:	0800334d 	.word	0x0800334d
 80032dc:	0800334d 	.word	0x0800334d
 80032e0:	0800334d 	.word	0x0800334d
 80032e4:	0800334d 	.word	0x0800334d
 80032e8:	0800334d 	.word	0x0800334d
 80032ec:	0800334d 	.word	0x0800334d
 80032f0:	08003355 	.word	0x08003355
 80032f4:	0800334d 	.word	0x0800334d
 80032f8:	0800334d 	.word	0x0800334d
 80032fc:	0800334d 	.word	0x0800334d
 8003300:	0800334d 	.word	0x0800334d
 8003304:	0800334d 	.word	0x0800334d
 8003308:	0800334d 	.word	0x0800334d
 800330c:	0800334d 	.word	0x0800334d
 8003310:	08003355 	.word	0x08003355
 8003314:	58024400 	.word	0x58024400
 8003318:	58024800 	.word	0x58024800
 800331c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003320:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003324:	3308      	adds	r3, #8
 8003326:	2101      	movs	r1, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f000 ffc5 	bl	80042b8 <RCCEx_PLL2_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003334:	e00f      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003336:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800333a:	3328      	adds	r3, #40	; 0x28
 800333c:	2101      	movs	r1, #1
 800333e:	4618      	mov	r0, r3
 8003340:	f001 f86c 	bl	800441c <RCCEx_PLL3_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800334a:	e004      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003352:	e000      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003354:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003356:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10b      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800335e:	4bc0      	ldr	r3, [pc, #768]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003366:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800336a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336e:	4abc      	ldr	r2, [pc, #752]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003370:	430b      	orrs	r3, r1
 8003372:	6553      	str	r3, [r2, #84]	; 0x54
 8003374:	e003      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003376:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800337a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800337e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f002 0302 	and.w	r3, r2, #2
 800338a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003394:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003398:	460b      	mov	r3, r1
 800339a:	4313      	orrs	r3, r2
 800339c:	d043      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800339e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d824      	bhi.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033fd 	.word	0x080033fd
 80033b4:	080033c9 	.word	0x080033c9
 80033b8:	080033df 	.word	0x080033df
 80033bc:	080033fd 	.word	0x080033fd
 80033c0:	080033fd 	.word	0x080033fd
 80033c4:	080033fd 	.word	0x080033fd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033cc:	3308      	adds	r3, #8
 80033ce:	2101      	movs	r1, #1
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 ff71 	bl	80042b8 <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033dc:	e00f      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033e2:	3328      	adds	r3, #40	; 0x28
 80033e4:	2101      	movs	r1, #1
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f818 	bl	800441c <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80033f2:	e004      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80033fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10b      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003406:	4b96      	ldr	r3, [pc, #600]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	f023 0107 	bic.w	r1, r3, #7
 800340e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003416:	4a92      	ldr	r2, [pc, #584]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003418:	430b      	orrs	r3, r1
 800341a:	6553      	str	r3, [r2, #84]	; 0x54
 800341c:	e003      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003422:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f002 0304 	and.w	r3, r2, #4
 8003432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800343c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d043      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800344a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344e:	2b05      	cmp	r3, #5
 8003450:	d824      	bhi.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8003452:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8003454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003458:	080034a5 	.word	0x080034a5
 800345c:	08003471 	.word	0x08003471
 8003460:	08003487 	.word	0x08003487
 8003464:	080034a5 	.word	0x080034a5
 8003468:	080034a5 	.word	0x080034a5
 800346c:	080034a5 	.word	0x080034a5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003474:	3308      	adds	r3, #8
 8003476:	2101      	movs	r1, #1
 8003478:	4618      	mov	r0, r3
 800347a:	f000 ff1d 	bl	80042b8 <RCCEx_PLL2_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003484:	e00f      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800348a:	3328      	adds	r3, #40	; 0x28
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 ffc4 	bl	800441c <RCCEx_PLL3_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800349a:	e004      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80034a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	f023 0107 	bic.w	r1, r3, #7
 80034b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034be:	4a68      	ldr	r2, [pc, #416]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6593      	str	r3, [r2, #88]	; 0x58
 80034c4:	e003      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f002 0320 	and.w	r3, r2, #32
 80034da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034e8:	460b      	mov	r3, r1
 80034ea:	4313      	orrs	r3, r2
 80034ec:	d055      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80034ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034fa:	d033      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80034fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003500:	d82c      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800350c:	d826      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800350e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003512:	d02b      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003514:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003518:	d820      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800351a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351e:	d012      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d81a      	bhi.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d022      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800352a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800352e:	d115      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003530:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003534:	3308      	adds	r3, #8
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 febd 	bl	80042b8 <RCCEx_PLL2_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003544:	e015      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800354a:	3328      	adds	r3, #40	; 0x28
 800354c:	2102      	movs	r1, #2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 ff64 	bl	800441c <RCCEx_PLL3_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800355a:	e00a      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003562:	e006      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003564:	bf00      	nop
 8003566:	e004      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003568:	bf00      	nop
 800356a:	e002      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8003570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003572:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800357a:	4b39      	ldr	r3, [pc, #228]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800357c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003586:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800358a:	4a35      	ldr	r2, [pc, #212]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6553      	str	r3, [r2, #84]	; 0x54
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003596:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800359a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80035a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80035b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4313      	orrs	r3, r2
 80035b8:	d058      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80035ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035c6:	d033      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80035c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80035cc:	d82c      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d2:	d02f      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80035d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d8:	d826      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035de:	d02b      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80035e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e4:	d820      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ea:	d012      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f0:	d81a      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d022      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d115      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003600:	3308      	adds	r3, #8
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fe57 	bl	80042b8 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003610:	e015      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003616:	3328      	adds	r3, #40	; 0x28
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fefe 	bl	800441c <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003626:	e00a      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800362e:	e006      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003630:	bf00      	nop
 8003632:	e004      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003634:	bf00      	nop
 8003636:	e002      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8003638:	bf00      	nop
 800363a:	e000      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800363c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003646:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003652:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003656:	4a02      	ldr	r2, [pc, #8]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003658:	430b      	orrs	r3, r1
 800365a:	6593      	str	r3, [r2, #88]	; 0x58
 800365c:	e006      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003668:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800366c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800367c:	2300      	movs	r3, #0
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003682:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003686:	460b      	mov	r3, r1
 8003688:	4313      	orrs	r3, r2
 800368a:	d055      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800368c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003690:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003694:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003698:	d033      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800369a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800369e:	d82c      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80036a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036a4:	d02f      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036aa:	d826      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80036ac:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036b0:	d02b      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80036b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80036b6:	d820      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80036b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036bc:	d012      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80036be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036c2:	d81a      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d022      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80036c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036cc:	d115      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d2:	3308      	adds	r3, #8
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fdee 	bl	80042b8 <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036e2:	e015      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e8:	3328      	adds	r3, #40	; 0x28
 80036ea:	2102      	movs	r1, #2
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fe95 	bl	800441c <RCCEx_PLL3_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80036f8:	e00a      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003702:	bf00      	nop
 8003704:	e004      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800370e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003710:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003718:	4ba1      	ldr	r3, [pc, #644]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003724:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003728:	4a9d      	ldr	r2, [pc, #628]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800372a:	430b      	orrs	r3, r1
 800372c:	6593      	str	r3, [r2, #88]	; 0x58
 800372e:	e003      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003734:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 0308 	and.w	r3, r2, #8
 8003744:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800374e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d01e      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800375c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800376a:	3328      	adds	r3, #40	; 0x28
 800376c:	2102      	movs	r1, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fe54 	bl	800441c <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003780:	4b87      	ldr	r3, [pc, #540]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003784:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003790:	4a83      	ldr	r2, [pc, #524]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f002 0310 	and.w	r3, r2, #16
 80037a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d01e      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80037b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c2:	d10c      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037c8:	3328      	adds	r3, #40	; 0x28
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fe25 	bl	800441c <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037de:	4b70      	ldr	r3, [pc, #448]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037ee:	4a6c      	ldr	r2, [pc, #432]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003804:	2300      	movs	r3, #0
 8003806:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800380a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800380e:	460b      	mov	r3, r1
 8003810:	4313      	orrs	r3, r2
 8003812:	d03e      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003818:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800381c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003820:	d022      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8003822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003826:	d81b      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800382c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003830:	d00b      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003838:	3308      	adds	r3, #8
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fd3b 	bl	80042b8 <RCCEx_PLL2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003848:	e00f      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800384a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800384e:	3328      	adds	r3, #40	; 0x28
 8003850:	2102      	movs	r1, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fde2 	bl	800441c <RCCEx_PLL3_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800385e:	e004      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8003868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003872:	4b4b      	ldr	r3, [pc, #300]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800387a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003882:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6593      	str	r3, [r2, #88]	; 0x58
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800388e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003892:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800389e:	67bb      	str	r3, [r7, #120]	; 0x78
 80038a0:	2300      	movs	r3, #0
 80038a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80038a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d03b      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80038ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ba:	d01f      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80038bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038c0:	d818      	bhi.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80038c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c6:	d003      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80038c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038cc:	d007      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80038ce:	e011      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	4a32      	ldr	r2, [pc, #200]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80038d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80038dc:	e00f      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e2:	3328      	adds	r3, #40	; 0x28
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fd98 	bl	800441c <RCCEx_PLL3_Config>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80038f2:	e004      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80038fa:	e000      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80038fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10b      	bne.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800390e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003918:	430b      	orrs	r3, r1
 800391a:	6553      	str	r3, [r2, #84]	; 0x54
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003922:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003926:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003932:	673b      	str	r3, [r7, #112]	; 0x70
 8003934:	2300      	movs	r3, #0
 8003936:	677b      	str	r3, [r7, #116]	; 0x74
 8003938:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800393c:	460b      	mov	r3, r1
 800393e:	4313      	orrs	r3, r2
 8003940:	d034      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d007      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8003952:	e011      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a11      	ldr	r2, [pc, #68]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003960:	e00e      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003966:	3308      	adds	r3, #8
 8003968:	2102      	movs	r1, #2
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fca4 	bl	80042b8 <RCCEx_PLL2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003976:	e003      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800397e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003980:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10d      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003996:	4a02      	ldr	r2, [pc, #8]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003998:	430b      	orrs	r3, r1
 800399a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800399e:	bf00      	nop
 80039a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80039b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ba:	2300      	movs	r3, #0
 80039bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80039c2:	460b      	mov	r3, r1
 80039c4:	4313      	orrs	r3, r2
 80039c6:	d00c      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80039c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039cc:	3328      	adds	r3, #40	; 0x28
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fd23 	bl	800441c <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80039e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80039ee:	663b      	str	r3, [r7, #96]	; 0x60
 80039f0:	2300      	movs	r3, #0
 80039f2:	667b      	str	r3, [r7, #100]	; 0x64
 80039f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d038      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80039fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0a:	d018      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a10:	d811      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a16:	d014      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8003a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1c:	d80b      	bhi.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d011      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8003a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a26:	d106      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a28:	4bc3      	ldr	r3, [pc, #780]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	4ac2      	ldr	r2, [pc, #776]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a34:	e008      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a50:	4bb9      	ldr	r3, [pc, #740]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a54:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a60:	4ab5      	ldr	r2, [pc, #724]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a62:	430b      	orrs	r3, r1
 8003a64:	6553      	str	r3, [r2, #84]	; 0x54
 8003a66:	e003      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003a7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a7e:	2300      	movs	r3, #0
 8003a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a82:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003a86:	460b      	mov	r3, r1
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a8c:	4baa      	ldr	r3, [pc, #680]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a90:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9a:	4aa7      	ldr	r2, [pc, #668]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003aac:	653b      	str	r3, [r7, #80]	; 0x50
 8003aae:	2300      	movs	r3, #0
 8003ab0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ab2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003abc:	4b9e      	ldr	r3, [pc, #632]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003ac4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a9b      	ldr	r2, [pc, #620]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ade:	2300      	movs	r3, #0
 8003ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	d009      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003aec:	4b92      	ldr	r3, [pc, #584]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afa:	4a8f      	ldr	r2, [pc, #572]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b0e:	2300      	movs	r3, #0
 8003b10:	647b      	str	r3, [r7, #68]	; 0x44
 8003b12:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003b16:	460b      	mov	r3, r1
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b1c:	4b86      	ldr	r3, [pc, #536]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	4a85      	ldr	r2, [pc, #532]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b26:	6113      	str	r3, [r2, #16]
 8003b28:	4b83      	ldr	r3, [pc, #524]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b2a:	6919      	ldr	r1, [r3, #16]
 8003b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b34:	4a80      	ldr	r2, [pc, #512]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b36:	430b      	orrs	r3, r1
 8003b38:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b48:	2300      	movs	r3, #0
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003b50:	460b      	mov	r3, r1
 8003b52:	4313      	orrs	r3, r2
 8003b54:	d009      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b56:	4b78      	ldr	r3, [pc, #480]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	4a74      	ldr	r2, [pc, #464]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003b76:	633b      	str	r3, [r7, #48]	; 0x30
 8003b78:	2300      	movs	r3, #0
 8003b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003b80:	460b      	mov	r3, r1
 8003b82:	4313      	orrs	r3, r2
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b86:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b96:	4a68      	ldr	r2, [pc, #416]	; (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	d011      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fb79 	bl	80042b8 <RCCEx_PLL2_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003bcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	2100      	movs	r1, #0
 8003be6:	6239      	str	r1, [r7, #32]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
 8003bee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d011      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	2101      	movs	r1, #1
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fb59 	bl	80042b8 <RCCEx_PLL2_Config>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	2100      	movs	r1, #0
 8003c26:	61b9      	str	r1, [r7, #24]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d011      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	2102      	movs	r1, #2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fb39 	bl	80042b8 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003c4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c58:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	2100      	movs	r1, #0
 8003c66:	6139      	str	r1, [r7, #16]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	d011      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7c:	3328      	adds	r3, #40	; 0x28
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fbcb 	bl	800441c <RCCEx_PLL3_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c98:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d011      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbc:	3328      	adds	r3, #40	; 0x28
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fbab 	bl	800441c <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	6039      	str	r1, [r7, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d011      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfc:	3328      	adds	r3, #40	; 0x28
 8003cfe:	2102      	movs	r1, #2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb8b 	bl	800441c <RCCEx_PLL3_Config>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003d1c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d36:	bf00      	nop
 8003d38:	58024400 	.word	0x58024400

08003d3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003d40:	f7fe fde2 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	091b      	lsrs	r3, r3, #4
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	4904      	ldr	r1, [pc, #16]	; (8003d64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003d52:	5ccb      	ldrb	r3, [r1, r3]
 8003d54:	f003 031f 	and.w	r3, r3, #31
 8003d58:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	58024400 	.word	0x58024400
 8003d64:	08009168 	.word	0x08009168

08003d68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d70:	4ba1      	ldr	r3, [pc, #644]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003d7a:	4b9f      	ldr	r3, [pc, #636]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	0b1b      	lsrs	r3, r3, #12
 8003d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d86:	4b9c      	ldr	r3, [pc, #624]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003d92:	4b99      	ldr	r3, [pc, #612]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d96:	08db      	lsrs	r3, r3, #3
 8003d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8111 	beq.w	8003fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	f000 8083 	beq.w	8003ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	f200 80a1 	bhi.w	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d056      	beq.n	8003e80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003dd2:	e099      	b.n	8003f08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dd4:	4b88      	ldr	r3, [pc, #544]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0320 	and.w	r3, r3, #32
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d02d      	beq.n	8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003de0:	4b85      	ldr	r3, [pc, #532]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	4a84      	ldr	r2, [pc, #528]	; (8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	ee07 3a90 	vmov	s15, r3
 8003df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e36:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e3a:	e087      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004004 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e56:	ee07 3a90 	vmov	s15, r3
 8003e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e7e:	e065      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e92:	4b59      	ldr	r3, [pc, #356]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9a:	ee07 3a90 	vmov	s15, r3
 8003e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ec2:	e043      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800400c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ed6:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ede:	ee07 3a90 	vmov	s15, r3
 8003ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f06:	e021      	b.n	8003f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	ee07 3a90 	vmov	s15, r3
 8003f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004008 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f1a:	4b37      	ldr	r3, [pc, #220]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	ee07 3a90 	vmov	s15, r3
 8003f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004000 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	0a5b      	lsrs	r3, r3, #9
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 2a90 	vmov	r2, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	0c1b      	lsrs	r3, r3, #16
 8003f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa0:	ee17 2a90 	vmov	r2, s15
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003fa8:	4b13      	ldr	r3, [pc, #76]	; (8003ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	0e1b      	lsrs	r3, r3, #24
 8003fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fce:	ee17 2a90 	vmov	r2, s15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003fd6:	e008      	b.n	8003fea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
}
 8003fea:	bf00      	nop
 8003fec:	3724      	adds	r7, #36	; 0x24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	03d09000 	.word	0x03d09000
 8004000:	46000000 	.word	0x46000000
 8004004:	4c742400 	.word	0x4c742400
 8004008:	4a742400 	.word	0x4a742400
 800400c:	4af42400 	.word	0x4af42400

08004010 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004010:	b480      	push	{r7}
 8004012:	b089      	sub	sp, #36	; 0x24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004018:	4ba1      	ldr	r3, [pc, #644]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004022:	4b9f      	ldr	r3, [pc, #636]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	0d1b      	lsrs	r3, r3, #20
 8004028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800402c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800402e:	4b9c      	ldr	r3, [pc, #624]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800403a:	4b99      	ldr	r3, [pc, #612]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	08db      	lsrs	r3, r3, #3
 8004040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	fb02 f303 	mul.w	r3, r2, r3
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8111 	beq.w	8004280 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b02      	cmp	r3, #2
 8004062:	f000 8083 	beq.w	800416c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b02      	cmp	r3, #2
 800406a:	f200 80a1 	bhi.w	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d056      	beq.n	8004128 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800407a:	e099      	b.n	80041b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800407c:	4b88      	ldr	r3, [pc, #544]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d02d      	beq.n	80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004088:	4b85      	ldr	r3, [pc, #532]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	08db      	lsrs	r3, r3, #3
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	4a84      	ldr	r2, [pc, #528]	; (80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
 8004098:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	ee07 3a90 	vmov	s15, r3
 80040aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040b2:	4b7b      	ldr	r3, [pc, #492]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80040e2:	e087      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80042ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80040f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040f6:	4b6a      	ldr	r3, [pc, #424]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004106:	ed97 6a03 	vldr	s12, [r7, #12]
 800410a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800410e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800411a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800411e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004126:	e065      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004132:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800413a:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800414a:	ed97 6a03 	vldr	s12, [r7, #12]
 800414e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800415a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800415e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800416a:	e043      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004176:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80042b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b48      	ldr	r3, [pc, #288]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004192:	eddf 5a45 	vldr	s11, [pc, #276]	; 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ae:	e021      	b.n	80041f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80042b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80042a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80041f4:	4b2a      	ldr	r3, [pc, #168]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	0a5b      	lsrs	r3, r3, #9
 80041fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800420a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800420e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421a:	ee17 2a90 	vmov	r2, s15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004222:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	0c1b      	lsrs	r3, r3, #16
 8004228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422c:	ee07 3a90 	vmov	s15, r3
 8004230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004234:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004238:	ee37 7a87 	vadd.f32	s14, s15, s14
 800423c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004248:	ee17 2a90 	vmov	r2, s15
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004250:	4b13      	ldr	r3, [pc, #76]	; (80042a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800425a:	ee07 3a90 	vmov	s15, r3
 800425e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004262:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800426a:	edd7 6a07 	vldr	s13, [r7, #28]
 800426e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004276:	ee17 2a90 	vmov	r2, s15
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800427e:	e008      	b.n	8004292 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	bf00      	nop
 8004294:	3724      	adds	r7, #36	; 0x24
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	58024400 	.word	0x58024400
 80042a4:	03d09000 	.word	0x03d09000
 80042a8:	46000000 	.word	0x46000000
 80042ac:	4c742400 	.word	0x4c742400
 80042b0:	4a742400 	.word	0x4a742400
 80042b4:	4af42400 	.word	0x4af42400

080042b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80042c6:	4b53      	ldr	r3, [pc, #332]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d101      	bne.n	80042d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e099      	b.n	800440a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80042d6:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a4e      	ldr	r2, [pc, #312]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e2:	f7fd f877 	bl	80013d4 <HAL_GetTick>
 80042e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042e8:	e008      	b.n	80042fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80042ea:	f7fd f873 	bl	80013d4 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e086      	b.n	800440a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042fc:	4b45      	ldr	r3, [pc, #276]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1f0      	bne.n	80042ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004308:	4b42      	ldr	r3, [pc, #264]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	031b      	lsls	r3, r3, #12
 8004316:	493f      	ldr	r1, [pc, #252]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004318:	4313      	orrs	r3, r2
 800431a:	628b      	str	r3, [r1, #40]	; 0x28
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	3b01      	subs	r3, #1
 8004322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	3b01      	subs	r3, #1
 800432c:	025b      	lsls	r3, r3, #9
 800432e:	b29b      	uxth	r3, r3
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	3b01      	subs	r3, #1
 8004338:	041b      	lsls	r3, r3, #16
 800433a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	3b01      	subs	r3, #1
 8004346:	061b      	lsls	r3, r3, #24
 8004348:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800434c:	4931      	ldr	r1, [pc, #196]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004352:	4b30      	ldr	r3, [pc, #192]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	492d      	ldr	r1, [pc, #180]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004360:	4313      	orrs	r3, r2
 8004362:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004364:	4b2b      	ldr	r3, [pc, #172]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	f023 0220 	bic.w	r2, r3, #32
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	4928      	ldr	r1, [pc, #160]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004372:	4313      	orrs	r3, r2
 8004374:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004376:	4b27      	ldr	r3, [pc, #156]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	4a26      	ldr	r2, [pc, #152]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 800437c:	f023 0310 	bic.w	r3, r3, #16
 8004380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004386:	4b24      	ldr	r3, [pc, #144]	; (8004418 <RCCEx_PLL2_Config+0x160>)
 8004388:	4013      	ands	r3, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	69d2      	ldr	r2, [r2, #28]
 800438e:	00d2      	lsls	r2, r2, #3
 8004390:	4920      	ldr	r1, [pc, #128]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004392:	4313      	orrs	r3, r2
 8004394:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 8004398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439a:	4a1e      	ldr	r2, [pc, #120]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 800439c:	f043 0310 	orr.w	r3, r3, #16
 80043a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80043a8:	4b1a      	ldr	r3, [pc, #104]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	4a19      	ldr	r2, [pc, #100]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043b4:	e00f      	b.n	80043d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d106      	bne.n	80043ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80043bc:	4b15      	ldr	r3, [pc, #84]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c0:	4a14      	ldr	r2, [pc, #80]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80043c8:	e005      	b.n	80043d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ce:	4a11      	ldr	r2, [pc, #68]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e2:	f7fc fff7 	bl	80013d4 <HAL_GetTick>
 80043e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043e8:	e008      	b.n	80043fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80043ea:	f7fc fff3 	bl	80013d4 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d901      	bls.n	80043fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e006      	b.n	800440a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <RCCEx_PLL2_Config+0x15c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0f0      	beq.n	80043ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004408:	7bfb      	ldrb	r3, [r7, #15]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	58024400 	.word	0x58024400
 8004418:	ffff0007 	.word	0xffff0007

0800441c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800442a:	4b53      	ldr	r3, [pc, #332]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b03      	cmp	r3, #3
 8004434:	d101      	bne.n	800443a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e099      	b.n	800456e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800443a:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a4e      	ldr	r2, [pc, #312]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004446:	f7fc ffc5 	bl	80013d4 <HAL_GetTick>
 800444a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800444c:	e008      	b.n	8004460 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800444e:	f7fc ffc1 	bl	80013d4 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e086      	b.n	800456e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004460:	4b45      	ldr	r3, [pc, #276]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800446c:	4b42      	ldr	r3, [pc, #264]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	051b      	lsls	r3, r3, #20
 800447a:	493f      	ldr	r1, [pc, #252]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 800447c:	4313      	orrs	r3, r2
 800447e:	628b      	str	r3, [r1, #40]	; 0x28
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	3b01      	subs	r3, #1
 8004486:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	3b01      	subs	r3, #1
 8004490:	025b      	lsls	r3, r3, #9
 8004492:	b29b      	uxth	r3, r3
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	3b01      	subs	r3, #1
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	3b01      	subs	r3, #1
 80044aa:	061b      	lsls	r3, r3, #24
 80044ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044b0:	4931      	ldr	r1, [pc, #196]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80044b6:	4b30      	ldr	r3, [pc, #192]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	492d      	ldr	r1, [pc, #180]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80044c8:	4b2b      	ldr	r3, [pc, #172]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	4928      	ldr	r1, [pc, #160]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80044da:	4b27      	ldr	r3, [pc, #156]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	4a26      	ldr	r2, [pc, #152]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <RCCEx_PLL3_Config+0x160>)
 80044ec:	4013      	ands	r3, r2
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	69d2      	ldr	r2, [r2, #28]
 80044f2:	00d2      	lsls	r2, r2, #3
 80044f4:	4920      	ldr	r1, [pc, #128]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800450c:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004518:	e00f      	b.n	800453a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d106      	bne.n	800452e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004520:	4b15      	ldr	r3, [pc, #84]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004524:	4a14      	ldr	r2, [pc, #80]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004526:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800452a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800452c:	e005      	b.n	800453a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	4a11      	ldr	r2, [pc, #68]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004534:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004538:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800453a:	4b0f      	ldr	r3, [pc, #60]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a0e      	ldr	r2, [pc, #56]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004546:	f7fc ff45 	bl	80013d4 <HAL_GetTick>
 800454a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800454c:	e008      	b.n	8004560 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800454e:	f7fc ff41 	bl	80013d4 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e006      	b.n	800456e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <RCCEx_PLL3_Config+0x15c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
 800457c:	ffff0007 	.word	0xffff0007

08004580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e042      	b.n	8004618 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7fc fc43 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2224      	movs	r2, #36	; 0x24
 80045ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f912 	bl	80047ec <UART_SetConfig>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e022      	b.n	8004618 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 ff72 	bl	80054c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fff9 	bl	8005608 <UART_CheckIdleState>
 8004616:	4603      	mov	r3, r0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3708      	adds	r7, #8
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e04a      	b.n	80046c8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fc fbf3 	bl	8000e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2224      	movs	r2, #36	; 0x24
 800464e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0201 	bic.w	r2, r2, #1
 8004660:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f8c2 	bl	80047ec <UART_SetConfig>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e02a      	b.n	80046c8 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 ff22 	bl	80054c4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800468e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800469e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0208 	orr.w	r2, r2, #8
 80046ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 ffa1 	bl	8005608 <UART_CheckIdleState>
 80046c6:	4603      	mov	r3, r0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3708      	adds	r7, #8
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d17b      	bne.n	80047e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_UART_Transmit+0x26>
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e074      	b.n	80047e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2221      	movs	r2, #33	; 0x21
 8004706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800470a:	f7fc fe63 	bl	80013d4 <HAL_GetTick>
 800470e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d108      	bne.n	800473c <HAL_UART_Transmit+0x6c>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d104      	bne.n	800473c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	e003      	b.n	8004744 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004744:	e030      	b.n	80047a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	9300      	str	r3, [sp, #0]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	2200      	movs	r2, #0
 800474e:	2180      	movs	r1, #128	; 0x80
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f001 f803 	bl	800575c <UART_WaitOnFlagUntilTimeout>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e03d      	b.n	80047e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800477c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	3302      	adds	r3, #2
 8004782:	61bb      	str	r3, [r7, #24]
 8004784:	e007      	b.n	8004796 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	781a      	ldrb	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	3301      	adds	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1c8      	bne.n	8004746 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	2140      	movs	r1, #64	; 0x40
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 ffcc 	bl	800575c <UART_WaitOnFlagUntilTimeout>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e006      	b.n	80047e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3720      	adds	r7, #32
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f0:	b092      	sub	sp, #72	; 0x48
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	431a      	orrs	r2, r3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	431a      	orrs	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4313      	orrs	r3, r2
 8004812:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4bbe      	ldr	r3, [pc, #760]	; (8004b14 <UART_SetConfig+0x328>)
 800481c:	4013      	ands	r3, r2
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004824:	430b      	orrs	r3, r1
 8004826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4ab3      	ldr	r2, [pc, #716]	; (8004b18 <UART_SetConfig+0x32c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004854:	4313      	orrs	r3, r2
 8004856:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	4baf      	ldr	r3, [pc, #700]	; (8004b1c <UART_SetConfig+0x330>)
 8004860:	4013      	ands	r3, r2
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	6812      	ldr	r2, [r2, #0]
 8004866:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004868:	430b      	orrs	r3, r1
 800486a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004872:	f023 010f 	bic.w	r1, r3, #15
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4aa6      	ldr	r2, [pc, #664]	; (8004b20 <UART_SetConfig+0x334>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d177      	bne.n	800497c <UART_SetConfig+0x190>
 800488c:	4ba5      	ldr	r3, [pc, #660]	; (8004b24 <UART_SetConfig+0x338>)
 800488e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004894:	2b28      	cmp	r3, #40	; 0x28
 8004896:	d86d      	bhi.n	8004974 <UART_SetConfig+0x188>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <UART_SetConfig+0xb4>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	08004945 	.word	0x08004945
 80048a4:	08004975 	.word	0x08004975
 80048a8:	08004975 	.word	0x08004975
 80048ac:	08004975 	.word	0x08004975
 80048b0:	08004975 	.word	0x08004975
 80048b4:	08004975 	.word	0x08004975
 80048b8:	08004975 	.word	0x08004975
 80048bc:	08004975 	.word	0x08004975
 80048c0:	0800494d 	.word	0x0800494d
 80048c4:	08004975 	.word	0x08004975
 80048c8:	08004975 	.word	0x08004975
 80048cc:	08004975 	.word	0x08004975
 80048d0:	08004975 	.word	0x08004975
 80048d4:	08004975 	.word	0x08004975
 80048d8:	08004975 	.word	0x08004975
 80048dc:	08004975 	.word	0x08004975
 80048e0:	08004955 	.word	0x08004955
 80048e4:	08004975 	.word	0x08004975
 80048e8:	08004975 	.word	0x08004975
 80048ec:	08004975 	.word	0x08004975
 80048f0:	08004975 	.word	0x08004975
 80048f4:	08004975 	.word	0x08004975
 80048f8:	08004975 	.word	0x08004975
 80048fc:	08004975 	.word	0x08004975
 8004900:	0800495d 	.word	0x0800495d
 8004904:	08004975 	.word	0x08004975
 8004908:	08004975 	.word	0x08004975
 800490c:	08004975 	.word	0x08004975
 8004910:	08004975 	.word	0x08004975
 8004914:	08004975 	.word	0x08004975
 8004918:	08004975 	.word	0x08004975
 800491c:	08004975 	.word	0x08004975
 8004920:	08004965 	.word	0x08004965
 8004924:	08004975 	.word	0x08004975
 8004928:	08004975 	.word	0x08004975
 800492c:	08004975 	.word	0x08004975
 8004930:	08004975 	.word	0x08004975
 8004934:	08004975 	.word	0x08004975
 8004938:	08004975 	.word	0x08004975
 800493c:	08004975 	.word	0x08004975
 8004940:	0800496d 	.word	0x0800496d
 8004944:	2301      	movs	r3, #1
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800494a:	e326      	b.n	8004f9a <UART_SetConfig+0x7ae>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004952:	e322      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800495a:	e31e      	b.n	8004f9a <UART_SetConfig+0x7ae>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004962:	e31a      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004964:	2320      	movs	r3, #32
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496a:	e316      	b.n	8004f9a <UART_SetConfig+0x7ae>
 800496c:	2340      	movs	r3, #64	; 0x40
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004972:	e312      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004974:	2380      	movs	r3, #128	; 0x80
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497a:	e30e      	b.n	8004f9a <UART_SetConfig+0x7ae>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a69      	ldr	r2, [pc, #420]	; (8004b28 <UART_SetConfig+0x33c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d130      	bne.n	80049e8 <UART_SetConfig+0x1fc>
 8004986:	4b67      	ldr	r3, [pc, #412]	; (8004b24 <UART_SetConfig+0x338>)
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b05      	cmp	r3, #5
 8004990:	d826      	bhi.n	80049e0 <UART_SetConfig+0x1f4>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x1ac>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049b1 	.word	0x080049b1
 800499c:	080049b9 	.word	0x080049b9
 80049a0:	080049c1 	.word	0x080049c1
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	2300      	movs	r3, #0
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b6:	e2f0      	b.n	8004f9a <UART_SetConfig+0x7ae>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049be:	e2ec      	b.n	8004f9a <UART_SetConfig+0x7ae>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c6:	e2e8      	b.n	8004f9a <UART_SetConfig+0x7ae>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ce:	e2e4      	b.n	8004f9a <UART_SetConfig+0x7ae>
 80049d0:	2320      	movs	r3, #32
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d6:	e2e0      	b.n	8004f9a <UART_SetConfig+0x7ae>
 80049d8:	2340      	movs	r3, #64	; 0x40
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049de:	e2dc      	b.n	8004f9a <UART_SetConfig+0x7ae>
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e6:	e2d8      	b.n	8004f9a <UART_SetConfig+0x7ae>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a4f      	ldr	r2, [pc, #316]	; (8004b2c <UART_SetConfig+0x340>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d130      	bne.n	8004a54 <UART_SetConfig+0x268>
 80049f2:	4b4c      	ldr	r3, [pc, #304]	; (8004b24 <UART_SetConfig+0x338>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	2b05      	cmp	r3, #5
 80049fc:	d826      	bhi.n	8004a4c <UART_SetConfig+0x260>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x218>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a1d 	.word	0x08004a1d
 8004a08:	08004a25 	.word	0x08004a25
 8004a0c:	08004a2d 	.word	0x08004a2d
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a3d 	.word	0x08004a3d
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a22:	e2ba      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a24:	2304      	movs	r3, #4
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2a:	e2b6      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a2c:	2308      	movs	r3, #8
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a32:	e2b2      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a34:	2310      	movs	r3, #16
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e2ae      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a42:	e2aa      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a44:	2340      	movs	r3, #64	; 0x40
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4a:	e2a6      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a52:	e2a2      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a35      	ldr	r2, [pc, #212]	; (8004b30 <UART_SetConfig+0x344>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d130      	bne.n	8004ac0 <UART_SetConfig+0x2d4>
 8004a5e:	4b31      	ldr	r3, [pc, #196]	; (8004b24 <UART_SetConfig+0x338>)
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	2b05      	cmp	r3, #5
 8004a68:	d826      	bhi.n	8004ab8 <UART_SetConfig+0x2cc>
 8004a6a:	a201      	add	r2, pc, #4	; (adr r2, 8004a70 <UART_SetConfig+0x284>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004a91 	.word	0x08004a91
 8004a78:	08004a99 	.word	0x08004a99
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8e:	e284      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a90:	2304      	movs	r3, #4
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a96:	e280      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004a98:	2308      	movs	r3, #8
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9e:	e27c      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e278      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004aa8:	2320      	movs	r3, #32
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e274      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004ab0:	2340      	movs	r3, #64	; 0x40
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab6:	e270      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004abe:	e26c      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1b      	ldr	r2, [pc, #108]	; (8004b34 <UART_SetConfig+0x348>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d142      	bne.n	8004b50 <UART_SetConfig+0x364>
 8004aca:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <UART_SetConfig+0x338>)
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d838      	bhi.n	8004b48 <UART_SetConfig+0x35c>
 8004ad6:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x2f0>)
 8004ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004adc:	08004af5 	.word	0x08004af5
 8004ae0:	08004afd 	.word	0x08004afd
 8004ae4:	08004b05 	.word	0x08004b05
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b39 	.word	0x08004b39
 8004af0:	08004b41 	.word	0x08004b41
 8004af4:	2300      	movs	r3, #0
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004afa:	e24e      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004afc:	2304      	movs	r3, #4
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b02:	e24a      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004b04:	2308      	movs	r3, #8
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b0a:	e246      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004b0c:	2310      	movs	r3, #16
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b12:	e242      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004b14:	cfff69f3 	.word	0xcfff69f3
 8004b18:	58000c00 	.word	0x58000c00
 8004b1c:	11fff4ff 	.word	0x11fff4ff
 8004b20:	40011000 	.word	0x40011000
 8004b24:	58024400 	.word	0x58024400
 8004b28:	40004400 	.word	0x40004400
 8004b2c:	40004800 	.word	0x40004800
 8004b30:	40004c00 	.word	0x40004c00
 8004b34:	40005000 	.word	0x40005000
 8004b38:	2320      	movs	r3, #32
 8004b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b3e:	e22c      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004b40:	2340      	movs	r3, #64	; 0x40
 8004b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b46:	e228      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b4e:	e224      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4ab1      	ldr	r2, [pc, #708]	; (8004e1c <UART_SetConfig+0x630>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d176      	bne.n	8004c48 <UART_SetConfig+0x45c>
 8004b5a:	4bb1      	ldr	r3, [pc, #708]	; (8004e20 <UART_SetConfig+0x634>)
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b62:	2b28      	cmp	r3, #40	; 0x28
 8004b64:	d86c      	bhi.n	8004c40 <UART_SetConfig+0x454>
 8004b66:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <UART_SetConfig+0x380>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004c11 	.word	0x08004c11
 8004b70:	08004c41 	.word	0x08004c41
 8004b74:	08004c41 	.word	0x08004c41
 8004b78:	08004c41 	.word	0x08004c41
 8004b7c:	08004c41 	.word	0x08004c41
 8004b80:	08004c41 	.word	0x08004c41
 8004b84:	08004c41 	.word	0x08004c41
 8004b88:	08004c41 	.word	0x08004c41
 8004b8c:	08004c19 	.word	0x08004c19
 8004b90:	08004c41 	.word	0x08004c41
 8004b94:	08004c41 	.word	0x08004c41
 8004b98:	08004c41 	.word	0x08004c41
 8004b9c:	08004c41 	.word	0x08004c41
 8004ba0:	08004c41 	.word	0x08004c41
 8004ba4:	08004c41 	.word	0x08004c41
 8004ba8:	08004c41 	.word	0x08004c41
 8004bac:	08004c21 	.word	0x08004c21
 8004bb0:	08004c41 	.word	0x08004c41
 8004bb4:	08004c41 	.word	0x08004c41
 8004bb8:	08004c41 	.word	0x08004c41
 8004bbc:	08004c41 	.word	0x08004c41
 8004bc0:	08004c41 	.word	0x08004c41
 8004bc4:	08004c41 	.word	0x08004c41
 8004bc8:	08004c41 	.word	0x08004c41
 8004bcc:	08004c29 	.word	0x08004c29
 8004bd0:	08004c41 	.word	0x08004c41
 8004bd4:	08004c41 	.word	0x08004c41
 8004bd8:	08004c41 	.word	0x08004c41
 8004bdc:	08004c41 	.word	0x08004c41
 8004be0:	08004c41 	.word	0x08004c41
 8004be4:	08004c41 	.word	0x08004c41
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c31 	.word	0x08004c31
 8004bf0:	08004c41 	.word	0x08004c41
 8004bf4:	08004c41 	.word	0x08004c41
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c41 	.word	0x08004c41
 8004c00:	08004c41 	.word	0x08004c41
 8004c04:	08004c41 	.word	0x08004c41
 8004c08:	08004c41 	.word	0x08004c41
 8004c0c:	08004c39 	.word	0x08004c39
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c16:	e1c0      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c1e:	e1bc      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c26:	e1b8      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c2e:	e1b4      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c30:	2320      	movs	r3, #32
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c36:	e1b0      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c3e:	e1ac      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c46:	e1a8      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a75      	ldr	r2, [pc, #468]	; (8004e24 <UART_SetConfig+0x638>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d130      	bne.n	8004cb4 <UART_SetConfig+0x4c8>
 8004c52:	4b73      	ldr	r3, [pc, #460]	; (8004e20 <UART_SetConfig+0x634>)
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	2b05      	cmp	r3, #5
 8004c5c:	d826      	bhi.n	8004cac <UART_SetConfig+0x4c0>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0x478>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c7d 	.word	0x08004c7d
 8004c68:	08004c85 	.word	0x08004c85
 8004c6c:	08004c8d 	.word	0x08004c8d
 8004c70:	08004c95 	.word	0x08004c95
 8004c74:	08004c9d 	.word	0x08004c9d
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e18a      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e186      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e182      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9a:	e17e      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca2:	e17a      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004caa:	e176      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cb2:	e172      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a5b      	ldr	r2, [pc, #364]	; (8004e28 <UART_SetConfig+0x63c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d130      	bne.n	8004d20 <UART_SetConfig+0x534>
 8004cbe:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <UART_SetConfig+0x634>)
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d826      	bhi.n	8004d18 <UART_SetConfig+0x52c>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0x4e4>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce9 	.word	0x08004ce9
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004cf9 	.word	0x08004cf9
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	2300      	movs	r3, #0
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e154      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e150      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e14c      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e148      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004d08:	2320      	movs	r3, #32
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0e:	e144      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004d10:	2340      	movs	r3, #64	; 0x40
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d16:	e140      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1e:	e13c      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a41      	ldr	r2, [pc, #260]	; (8004e2c <UART_SetConfig+0x640>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	f040 8082 	bne.w	8004e30 <UART_SetConfig+0x644>
 8004d2c:	4b3c      	ldr	r3, [pc, #240]	; (8004e20 <UART_SetConfig+0x634>)
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d34:	2b28      	cmp	r3, #40	; 0x28
 8004d36:	d86d      	bhi.n	8004e14 <UART_SetConfig+0x628>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x554>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004de5 	.word	0x08004de5
 8004d44:	08004e15 	.word	0x08004e15
 8004d48:	08004e15 	.word	0x08004e15
 8004d4c:	08004e15 	.word	0x08004e15
 8004d50:	08004e15 	.word	0x08004e15
 8004d54:	08004e15 	.word	0x08004e15
 8004d58:	08004e15 	.word	0x08004e15
 8004d5c:	08004e15 	.word	0x08004e15
 8004d60:	08004ded 	.word	0x08004ded
 8004d64:	08004e15 	.word	0x08004e15
 8004d68:	08004e15 	.word	0x08004e15
 8004d6c:	08004e15 	.word	0x08004e15
 8004d70:	08004e15 	.word	0x08004e15
 8004d74:	08004e15 	.word	0x08004e15
 8004d78:	08004e15 	.word	0x08004e15
 8004d7c:	08004e15 	.word	0x08004e15
 8004d80:	08004df5 	.word	0x08004df5
 8004d84:	08004e15 	.word	0x08004e15
 8004d88:	08004e15 	.word	0x08004e15
 8004d8c:	08004e15 	.word	0x08004e15
 8004d90:	08004e15 	.word	0x08004e15
 8004d94:	08004e15 	.word	0x08004e15
 8004d98:	08004e15 	.word	0x08004e15
 8004d9c:	08004e15 	.word	0x08004e15
 8004da0:	08004dfd 	.word	0x08004dfd
 8004da4:	08004e15 	.word	0x08004e15
 8004da8:	08004e15 	.word	0x08004e15
 8004dac:	08004e15 	.word	0x08004e15
 8004db0:	08004e15 	.word	0x08004e15
 8004db4:	08004e15 	.word	0x08004e15
 8004db8:	08004e15 	.word	0x08004e15
 8004dbc:	08004e15 	.word	0x08004e15
 8004dc0:	08004e05 	.word	0x08004e05
 8004dc4:	08004e15 	.word	0x08004e15
 8004dc8:	08004e15 	.word	0x08004e15
 8004dcc:	08004e15 	.word	0x08004e15
 8004dd0:	08004e15 	.word	0x08004e15
 8004dd4:	08004e15 	.word	0x08004e15
 8004dd8:	08004e15 	.word	0x08004e15
 8004ddc:	08004e15 	.word	0x08004e15
 8004de0:	08004e0d 	.word	0x08004e0d
 8004de4:	2301      	movs	r3, #1
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dea:	e0d6      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004dec:	2304      	movs	r3, #4
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004df2:	e0d2      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004df4:	2308      	movs	r3, #8
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004dfa:	e0ce      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e02:	e0ca      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004e04:	2320      	movs	r3, #32
 8004e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e0a:	e0c6      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004e0c:	2340      	movs	r3, #64	; 0x40
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e12:	e0c2      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e1a:	e0be      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004e1c:	40011400 	.word	0x40011400
 8004e20:	58024400 	.word	0x58024400
 8004e24:	40007800 	.word	0x40007800
 8004e28:	40007c00 	.word	0x40007c00
 8004e2c:	40011800 	.word	0x40011800
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4aad      	ldr	r2, [pc, #692]	; (80050ec <UART_SetConfig+0x900>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d176      	bne.n	8004f28 <UART_SetConfig+0x73c>
 8004e3a:	4bad      	ldr	r3, [pc, #692]	; (80050f0 <UART_SetConfig+0x904>)
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e42:	2b28      	cmp	r3, #40	; 0x28
 8004e44:	d86c      	bhi.n	8004f20 <UART_SetConfig+0x734>
 8004e46:	a201      	add	r2, pc, #4	; (adr r2, 8004e4c <UART_SetConfig+0x660>)
 8004e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4c:	08004ef1 	.word	0x08004ef1
 8004e50:	08004f21 	.word	0x08004f21
 8004e54:	08004f21 	.word	0x08004f21
 8004e58:	08004f21 	.word	0x08004f21
 8004e5c:	08004f21 	.word	0x08004f21
 8004e60:	08004f21 	.word	0x08004f21
 8004e64:	08004f21 	.word	0x08004f21
 8004e68:	08004f21 	.word	0x08004f21
 8004e6c:	08004ef9 	.word	0x08004ef9
 8004e70:	08004f21 	.word	0x08004f21
 8004e74:	08004f21 	.word	0x08004f21
 8004e78:	08004f21 	.word	0x08004f21
 8004e7c:	08004f21 	.word	0x08004f21
 8004e80:	08004f21 	.word	0x08004f21
 8004e84:	08004f21 	.word	0x08004f21
 8004e88:	08004f21 	.word	0x08004f21
 8004e8c:	08004f01 	.word	0x08004f01
 8004e90:	08004f21 	.word	0x08004f21
 8004e94:	08004f21 	.word	0x08004f21
 8004e98:	08004f21 	.word	0x08004f21
 8004e9c:	08004f21 	.word	0x08004f21
 8004ea0:	08004f21 	.word	0x08004f21
 8004ea4:	08004f21 	.word	0x08004f21
 8004ea8:	08004f21 	.word	0x08004f21
 8004eac:	08004f09 	.word	0x08004f09
 8004eb0:	08004f21 	.word	0x08004f21
 8004eb4:	08004f21 	.word	0x08004f21
 8004eb8:	08004f21 	.word	0x08004f21
 8004ebc:	08004f21 	.word	0x08004f21
 8004ec0:	08004f21 	.word	0x08004f21
 8004ec4:	08004f21 	.word	0x08004f21
 8004ec8:	08004f21 	.word	0x08004f21
 8004ecc:	08004f11 	.word	0x08004f11
 8004ed0:	08004f21 	.word	0x08004f21
 8004ed4:	08004f21 	.word	0x08004f21
 8004ed8:	08004f21 	.word	0x08004f21
 8004edc:	08004f21 	.word	0x08004f21
 8004ee0:	08004f21 	.word	0x08004f21
 8004ee4:	08004f21 	.word	0x08004f21
 8004ee8:	08004f21 	.word	0x08004f21
 8004eec:	08004f19 	.word	0x08004f19
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef6:	e050      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efe:	e04c      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f00:	2308      	movs	r3, #8
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f06:	e048      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f08:	2310      	movs	r3, #16
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0e:	e044      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f10:	2320      	movs	r3, #32
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f16:	e040      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1e:	e03c      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f20:	2380      	movs	r3, #128	; 0x80
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f26:	e038      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a71      	ldr	r2, [pc, #452]	; (80050f4 <UART_SetConfig+0x908>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d130      	bne.n	8004f94 <UART_SetConfig+0x7a8>
 8004f32:	4b6f      	ldr	r3, [pc, #444]	; (80050f0 <UART_SetConfig+0x904>)
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	2b05      	cmp	r3, #5
 8004f3c:	d826      	bhi.n	8004f8c <UART_SetConfig+0x7a0>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x758>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004f5d 	.word	0x08004f5d
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f6d 	.word	0x08004f6d
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f7d 	.word	0x08004f7d
 8004f58:	08004f85 	.word	0x08004f85
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f62:	e01a      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6a:	e016      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f72:	e012      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7a:	e00e      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f82:	e00a      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8a:	e006      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f8c:	2380      	movs	r3, #128	; 0x80
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f92:	e002      	b.n	8004f9a <UART_SetConfig+0x7ae>
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a55      	ldr	r2, [pc, #340]	; (80050f4 <UART_SetConfig+0x908>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	f040 80f8 	bne.w	8005196 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fa6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004faa:	2b20      	cmp	r3, #32
 8004fac:	dc46      	bgt.n	800503c <UART_SetConfig+0x850>
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	db75      	blt.n	800509e <UART_SetConfig+0x8b2>
 8004fb2:	3b02      	subs	r3, #2
 8004fb4:	2b1e      	cmp	r3, #30
 8004fb6:	d872      	bhi.n	800509e <UART_SetConfig+0x8b2>
 8004fb8:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <UART_SetConfig+0x7d4>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08005043 	.word	0x08005043
 8004fc4:	0800509f 	.word	0x0800509f
 8004fc8:	0800504b 	.word	0x0800504b
 8004fcc:	0800509f 	.word	0x0800509f
 8004fd0:	0800509f 	.word	0x0800509f
 8004fd4:	0800509f 	.word	0x0800509f
 8004fd8:	0800505b 	.word	0x0800505b
 8004fdc:	0800509f 	.word	0x0800509f
 8004fe0:	0800509f 	.word	0x0800509f
 8004fe4:	0800509f 	.word	0x0800509f
 8004fe8:	0800509f 	.word	0x0800509f
 8004fec:	0800509f 	.word	0x0800509f
 8004ff0:	0800509f 	.word	0x0800509f
 8004ff4:	0800509f 	.word	0x0800509f
 8004ff8:	0800506b 	.word	0x0800506b
 8004ffc:	0800509f 	.word	0x0800509f
 8005000:	0800509f 	.word	0x0800509f
 8005004:	0800509f 	.word	0x0800509f
 8005008:	0800509f 	.word	0x0800509f
 800500c:	0800509f 	.word	0x0800509f
 8005010:	0800509f 	.word	0x0800509f
 8005014:	0800509f 	.word	0x0800509f
 8005018:	0800509f 	.word	0x0800509f
 800501c:	0800509f 	.word	0x0800509f
 8005020:	0800509f 	.word	0x0800509f
 8005024:	0800509f 	.word	0x0800509f
 8005028:	0800509f 	.word	0x0800509f
 800502c:	0800509f 	.word	0x0800509f
 8005030:	0800509f 	.word	0x0800509f
 8005034:	0800509f 	.word	0x0800509f
 8005038:	08005091 	.word	0x08005091
 800503c:	2b40      	cmp	r3, #64	; 0x40
 800503e:	d02a      	beq.n	8005096 <UART_SetConfig+0x8aa>
 8005040:	e02d      	b.n	800509e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005042:	f7fe fe7b 	bl	8003d3c <HAL_RCCEx_GetD3PCLK1Freq>
 8005046:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005048:	e02f      	b.n	80050aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800504a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fe8a 	bl	8003d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005058:	e027      	b.n	80050aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800505a:	f107 0318 	add.w	r3, r7, #24
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe ffd6 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005068:	e01f      	b.n	80050aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800506a:	4b21      	ldr	r3, [pc, #132]	; (80050f0 <UART_SetConfig+0x904>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <UART_SetConfig+0x904>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	08db      	lsrs	r3, r3, #3
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <UART_SetConfig+0x90c>)
 8005082:	fa22 f303 	lsr.w	r3, r2, r3
 8005086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005088:	e00f      	b.n	80050aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800508a:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <UART_SetConfig+0x90c>)
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800508e:	e00c      	b.n	80050aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005090:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <UART_SetConfig+0x910>)
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005094:	e009      	b.n	80050aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800509c:	e005      	b.n	80050aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80050a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 81ee 	beq.w	800548e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	4a12      	ldr	r2, [pc, #72]	; (8005100 <UART_SetConfig+0x914>)
 80050b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050bc:	461a      	mov	r2, r3
 80050be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d305      	bcc.n	80050e2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050de:	429a      	cmp	r2, r3
 80050e0:	d910      	bls.n	8005104 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050e8:	e1d1      	b.n	800548e <UART_SetConfig+0xca2>
 80050ea:	bf00      	nop
 80050ec:	40011c00 	.word	0x40011c00
 80050f0:	58024400 	.word	0x58024400
 80050f4:	58000c00 	.word	0x58000c00
 80050f8:	03d09000 	.word	0x03d09000
 80050fc:	003d0900 	.word	0x003d0900
 8005100:	08009178 	.word	0x08009178
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	2200      	movs	r2, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	60fa      	str	r2, [r7, #12]
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	4ac0      	ldr	r2, [pc, #768]	; (8005414 <UART_SetConfig+0xc28>)
 8005112:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005116:	b29b      	uxth	r3, r3
 8005118:	2200      	movs	r2, #0
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	607a      	str	r2, [r7, #4]
 800511e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005122:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005126:	f7fb f93b 	bl	80003a0 <__aeabi_uldivmod>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4610      	mov	r0, r2
 8005130:	4619      	mov	r1, r3
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	020b      	lsls	r3, r1, #8
 800513c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005140:	0202      	lsls	r2, r0, #8
 8005142:	6979      	ldr	r1, [r7, #20]
 8005144:	6849      	ldr	r1, [r1, #4]
 8005146:	0849      	lsrs	r1, r1, #1
 8005148:	2000      	movs	r0, #0
 800514a:	460c      	mov	r4, r1
 800514c:	4605      	mov	r5, r0
 800514e:	eb12 0804 	adds.w	r8, r2, r4
 8005152:	eb43 0905 	adc.w	r9, r3, r5
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	469a      	mov	sl, r3
 800515e:	4693      	mov	fp, r2
 8005160:	4652      	mov	r2, sl
 8005162:	465b      	mov	r3, fp
 8005164:	4640      	mov	r0, r8
 8005166:	4649      	mov	r1, r9
 8005168:	f7fb f91a 	bl	80003a0 <__aeabi_uldivmod>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4613      	mov	r3, r2
 8005172:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800517a:	d308      	bcc.n	800518e <UART_SetConfig+0x9a2>
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005182:	d204      	bcs.n	800518e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800518a:	60da      	str	r2, [r3, #12]
 800518c:	e17f      	b.n	800548e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005194:	e17b      	b.n	800548e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519e:	f040 80bd 	bne.w	800531c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80051a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	dc48      	bgt.n	800523c <UART_SetConfig+0xa50>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	db7b      	blt.n	80052a6 <UART_SetConfig+0xaba>
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d879      	bhi.n	80052a6 <UART_SetConfig+0xaba>
 80051b2:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <UART_SetConfig+0x9cc>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	08005243 	.word	0x08005243
 80051bc:	0800524b 	.word	0x0800524b
 80051c0:	080052a7 	.word	0x080052a7
 80051c4:	080052a7 	.word	0x080052a7
 80051c8:	08005253 	.word	0x08005253
 80051cc:	080052a7 	.word	0x080052a7
 80051d0:	080052a7 	.word	0x080052a7
 80051d4:	080052a7 	.word	0x080052a7
 80051d8:	08005263 	.word	0x08005263
 80051dc:	080052a7 	.word	0x080052a7
 80051e0:	080052a7 	.word	0x080052a7
 80051e4:	080052a7 	.word	0x080052a7
 80051e8:	080052a7 	.word	0x080052a7
 80051ec:	080052a7 	.word	0x080052a7
 80051f0:	080052a7 	.word	0x080052a7
 80051f4:	080052a7 	.word	0x080052a7
 80051f8:	08005273 	.word	0x08005273
 80051fc:	080052a7 	.word	0x080052a7
 8005200:	080052a7 	.word	0x080052a7
 8005204:	080052a7 	.word	0x080052a7
 8005208:	080052a7 	.word	0x080052a7
 800520c:	080052a7 	.word	0x080052a7
 8005210:	080052a7 	.word	0x080052a7
 8005214:	080052a7 	.word	0x080052a7
 8005218:	080052a7 	.word	0x080052a7
 800521c:	080052a7 	.word	0x080052a7
 8005220:	080052a7 	.word	0x080052a7
 8005224:	080052a7 	.word	0x080052a7
 8005228:	080052a7 	.word	0x080052a7
 800522c:	080052a7 	.word	0x080052a7
 8005230:	080052a7 	.word	0x080052a7
 8005234:	080052a7 	.word	0x080052a7
 8005238:	08005299 	.word	0x08005299
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d02e      	beq.n	800529e <UART_SetConfig+0xab2>
 8005240:	e031      	b.n	80052a6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005242:	f7fd fb91 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 8005246:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005248:	e033      	b.n	80052b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800524a:	f7fd fba3 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 800524e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005250:	e02f      	b.n	80052b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe fd86 	bl	8003d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005260:	e027      	b.n	80052b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005262:	f107 0318 	add.w	r3, r7, #24
 8005266:	4618      	mov	r0, r3
 8005268:	f7fe fed2 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005270:	e01f      	b.n	80052b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005272:	4b69      	ldr	r3, [pc, #420]	; (8005418 <UART_SetConfig+0xc2c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0320 	and.w	r3, r3, #32
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800527e:	4b66      	ldr	r3, [pc, #408]	; (8005418 <UART_SetConfig+0xc2c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	08db      	lsrs	r3, r3, #3
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	4a64      	ldr	r2, [pc, #400]	; (800541c <UART_SetConfig+0xc30>)
 800528a:	fa22 f303 	lsr.w	r3, r2, r3
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005290:	e00f      	b.n	80052b2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005292:	4b62      	ldr	r3, [pc, #392]	; (800541c <UART_SetConfig+0xc30>)
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005296:	e00c      	b.n	80052b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005298:	4b61      	ldr	r3, [pc, #388]	; (8005420 <UART_SetConfig+0xc34>)
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800529c:	e009      	b.n	80052b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052a4:	e005      	b.n	80052b2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80052b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 80ea 	beq.w	800548e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	4a55      	ldr	r2, [pc, #340]	; (8005414 <UART_SetConfig+0xc28>)
 80052c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	441a      	add	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	2b0f      	cmp	r3, #15
 80052e4:	d916      	bls.n	8005314 <UART_SetConfig+0xb28>
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ec:	d212      	bcs.n	8005314 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f023 030f 	bic.w	r3, r3, #15
 80052f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	b29a      	uxth	r2, r3
 8005304:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005306:	4313      	orrs	r3, r2
 8005308:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	e0bc      	b.n	800548e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800531a:	e0b8      	b.n	800548e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800531c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005320:	2b20      	cmp	r3, #32
 8005322:	dc4b      	bgt.n	80053bc <UART_SetConfig+0xbd0>
 8005324:	2b00      	cmp	r3, #0
 8005326:	f2c0 8087 	blt.w	8005438 <UART_SetConfig+0xc4c>
 800532a:	2b20      	cmp	r3, #32
 800532c:	f200 8084 	bhi.w	8005438 <UART_SetConfig+0xc4c>
 8005330:	a201      	add	r2, pc, #4	; (adr r2, 8005338 <UART_SetConfig+0xb4c>)
 8005332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005336:	bf00      	nop
 8005338:	080053c3 	.word	0x080053c3
 800533c:	080053cb 	.word	0x080053cb
 8005340:	08005439 	.word	0x08005439
 8005344:	08005439 	.word	0x08005439
 8005348:	080053d3 	.word	0x080053d3
 800534c:	08005439 	.word	0x08005439
 8005350:	08005439 	.word	0x08005439
 8005354:	08005439 	.word	0x08005439
 8005358:	080053e3 	.word	0x080053e3
 800535c:	08005439 	.word	0x08005439
 8005360:	08005439 	.word	0x08005439
 8005364:	08005439 	.word	0x08005439
 8005368:	08005439 	.word	0x08005439
 800536c:	08005439 	.word	0x08005439
 8005370:	08005439 	.word	0x08005439
 8005374:	08005439 	.word	0x08005439
 8005378:	080053f3 	.word	0x080053f3
 800537c:	08005439 	.word	0x08005439
 8005380:	08005439 	.word	0x08005439
 8005384:	08005439 	.word	0x08005439
 8005388:	08005439 	.word	0x08005439
 800538c:	08005439 	.word	0x08005439
 8005390:	08005439 	.word	0x08005439
 8005394:	08005439 	.word	0x08005439
 8005398:	08005439 	.word	0x08005439
 800539c:	08005439 	.word	0x08005439
 80053a0:	08005439 	.word	0x08005439
 80053a4:	08005439 	.word	0x08005439
 80053a8:	08005439 	.word	0x08005439
 80053ac:	08005439 	.word	0x08005439
 80053b0:	08005439 	.word	0x08005439
 80053b4:	08005439 	.word	0x08005439
 80053b8:	0800542b 	.word	0x0800542b
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d037      	beq.n	8005430 <UART_SetConfig+0xc44>
 80053c0:	e03a      	b.n	8005438 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c2:	f7fd fad1 	bl	8002968 <HAL_RCC_GetPCLK1Freq>
 80053c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053c8:	e03c      	b.n	8005444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053ca:	f7fd fae3 	bl	8002994 <HAL_RCC_GetPCLK2Freq>
 80053ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053d0:	e038      	b.n	8005444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fcc6 	bl	8003d68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053e0:	e030      	b.n	8005444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e2:	f107 0318 	add.w	r3, r7, #24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7fe fe12 	bl	8004010 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053f0:	e028      	b.n	8005444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053f2:	4b09      	ldr	r3, [pc, #36]	; (8005418 <UART_SetConfig+0xc2c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d012      	beq.n	8005424 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053fe:	4b06      	ldr	r3, [pc, #24]	; (8005418 <UART_SetConfig+0xc2c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	08db      	lsrs	r3, r3, #3
 8005404:	f003 0303 	and.w	r3, r3, #3
 8005408:	4a04      	ldr	r2, [pc, #16]	; (800541c <UART_SetConfig+0xc30>)
 800540a:	fa22 f303 	lsr.w	r3, r2, r3
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005410:	e018      	b.n	8005444 <UART_SetConfig+0xc58>
 8005412:	bf00      	nop
 8005414:	08009178 	.word	0x08009178
 8005418:	58024400 	.word	0x58024400
 800541c:	03d09000 	.word	0x03d09000
 8005420:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <UART_SetConfig+0xccc>)
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005428:	e00c      	b.n	8005444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800542a:	4b24      	ldr	r3, [pc, #144]	; (80054bc <UART_SetConfig+0xcd0>)
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800542e:	e009      	b.n	8005444 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005436:	e005      	b.n	8005444 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005442:	bf00      	nop
    }

    if (pclk != 0U)
 8005444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005446:	2b00      	cmp	r3, #0
 8005448:	d021      	beq.n	800548e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <UART_SetConfig+0xcd4>)
 8005450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005454:	461a      	mov	r2, r3
 8005456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005458:	fbb3 f2f2 	udiv	r2, r3, r2
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	441a      	add	r2, r3
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	2b0f      	cmp	r3, #15
 8005472:	d909      	bls.n	8005488 <UART_SetConfig+0xc9c>
 8005474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d205      	bcs.n	8005488 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	b29a      	uxth	r2, r3
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	e002      	b.n	800548e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2201      	movs	r2, #1
 8005492:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	2201      	movs	r2, #1
 800549a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2200      	movs	r2, #0
 80054a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054aa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3748      	adds	r7, #72	; 0x48
 80054b2:	46bd      	mov	sp, r7
 80054b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054b8:	03d09000 	.word	0x03d09000
 80054bc:	003d0900 	.word	0x003d0900
 80054c0:	08009178 	.word	0x08009178

080054c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	430a      	orrs	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01a      	beq.n	80055da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c2:	d10a      	bne.n	80055da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	605a      	str	r2, [r3, #4]
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b098      	sub	sp, #96	; 0x60
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005618:	f7fb fedc 	bl	80013d4 <HAL_GetTick>
 800561c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b08      	cmp	r3, #8
 800562a:	d12f      	bne.n	800568c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005634:	2200      	movs	r2, #0
 8005636:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f88e 	bl	800575c <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d022      	beq.n	800568c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	e853 3f00 	ldrex	r3, [r3]
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800565a:	653b      	str	r3, [r7, #80]	; 0x50
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005664:	647b      	str	r3, [r7, #68]	; 0x44
 8005666:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005668:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800566a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800566c:	e841 2300 	strex	r3, r2, [r1]
 8005670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1e6      	bne.n	8005646 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e063      	b.n	8005754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0304 	and.w	r3, r3, #4
 8005696:	2b04      	cmp	r3, #4
 8005698:	d149      	bne.n	800572e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800569a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a2:	2200      	movs	r2, #0
 80056a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f857 	bl	800575c <UART_WaitOnFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d03c      	beq.n	800572e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	623b      	str	r3, [r7, #32]
   return(result);
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	461a      	mov	r2, r3
 80056d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d2:	633b      	str	r3, [r7, #48]	; 0x30
 80056d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e6      	bne.n	80056b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3308      	adds	r3, #8
 8005704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005706:	61fa      	str	r2, [r7, #28]
 8005708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	69b9      	ldr	r1, [r7, #24]
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	617b      	str	r3, [r7, #20]
   return(result);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e5      	bne.n	80056e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2220      	movs	r2, #32
 800571e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e012      	b.n	8005754 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3758      	adds	r7, #88	; 0x58
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576c:	e049      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005774:	d045      	beq.n	8005802 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fb fe2d 	bl	80013d4 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	69ba      	ldr	r2, [r7, #24]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <UART_WaitOnFlagUntilTimeout+0x30>
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e048      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d031      	beq.n	8005802 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d110      	bne.n	80057ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2208      	movs	r2, #8
 80057b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f839 	bl	800582c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2208      	movs	r2, #8
 80057be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e029      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057dc:	d111      	bne.n	8005802 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f81f 	bl	800582c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e00f      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4013      	ands	r3, r2
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	bf0c      	ite	eq
 8005812:	2301      	moveq	r3, #1
 8005814:	2300      	movne	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	429a      	cmp	r2, r3
 800581e:	d0a6      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b095      	sub	sp, #84	; 0x54
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	e853 3f00 	ldrex	r3, [r3]
 8005840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	461a      	mov	r2, r3
 8005850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
 8005854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e6      	bne.n	8005834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3308      	adds	r3, #8
 800586c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	61fb      	str	r3, [r7, #28]
   return(result);
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <UART_EndRxTransfer+0xc8>)
 800587a:	4013      	ands	r3, r2
 800587c:	64bb      	str	r3, [r7, #72]	; 0x48
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3308      	adds	r3, #8
 8005884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588e:	e841 2300 	strex	r3, r2, [r1]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1e5      	bne.n	8005866 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d118      	bne.n	80058d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f023 0310 	bic.w	r3, r3, #16
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6979      	ldr	r1, [r7, #20]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e6      	bne.n	80058a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80058e8:	bf00      	nop
 80058ea:	3754      	adds	r7, #84	; 0x54
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	effffffe 	.word	0xeffffffe

080058f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005906:	2b01      	cmp	r3, #1
 8005908:	d101      	bne.n	800590e <HAL_UARTEx_DisableFifoMode+0x16>
 800590a:	2302      	movs	r3, #2
 800590c:	e027      	b.n	800595e <HAL_UARTEx_DisableFifoMode+0x66>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2224      	movs	r2, #36	; 0x24
 800591a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800593c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800597a:	2b01      	cmp	r3, #1
 800597c:	d101      	bne.n	8005982 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800597e:	2302      	movs	r3, #2
 8005980:	e02d      	b.n	80059de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2224      	movs	r2, #36	; 0x24
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0201 	bic.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f850 	bl	8005a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e02d      	b.n	8005a5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2224      	movs	r2, #36	; 0x24
 8005a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f812 	bl	8005a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a84:	e031      	b.n	8005aea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a86:	2310      	movs	r3, #16
 8005a88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a8a:	2310      	movs	r3, #16
 8005a8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	0e5b      	lsrs	r3, r3, #25
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	0f5b      	lsrs	r3, r3, #29
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	7b3a      	ldrb	r2, [r7, #12]
 8005ab2:	4911      	ldr	r1, [pc, #68]	; (8005af8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ab4:	5c8a      	ldrb	r2, [r1, r2]
 8005ab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005aba:	7b3a      	ldrb	r2, [r7, #12]
 8005abc:	490f      	ldr	r1, [pc, #60]	; (8005afc <UARTEx_SetNbDataToProcess+0x98>)
 8005abe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	7b7a      	ldrb	r2, [r7, #13]
 8005ad0:	4909      	ldr	r1, [pc, #36]	; (8005af8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ad2:	5c8a      	ldrb	r2, [r1, r2]
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ad8:	7b7a      	ldrb	r2, [r7, #13]
 8005ada:	4908      	ldr	r1, [pc, #32]	; (8005afc <UARTEx_SetNbDataToProcess+0x98>)
 8005adc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	08009190 	.word	0x08009190
 8005afc:	08009198 	.word	0x08009198

08005b00 <__errno>:
 8005b00:	4b01      	ldr	r3, [pc, #4]	; (8005b08 <__errno+0x8>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	24000010 	.word	0x24000010

08005b0c <__libc_init_array>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4d0d      	ldr	r5, [pc, #52]	; (8005b44 <__libc_init_array+0x38>)
 8005b10:	4c0d      	ldr	r4, [pc, #52]	; (8005b48 <__libc_init_array+0x3c>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	2600      	movs	r6, #0
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	d109      	bne.n	8005b30 <__libc_init_array+0x24>
 8005b1c:	4d0b      	ldr	r5, [pc, #44]	; (8005b4c <__libc_init_array+0x40>)
 8005b1e:	4c0c      	ldr	r4, [pc, #48]	; (8005b50 <__libc_init_array+0x44>)
 8005b20:	f003 fafc 	bl	800911c <_init>
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	2600      	movs	r6, #0
 8005b2a:	42a6      	cmp	r6, r4
 8005b2c:	d105      	bne.n	8005b3a <__libc_init_array+0x2e>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b34:	4798      	blx	r3
 8005b36:	3601      	adds	r6, #1
 8005b38:	e7ee      	b.n	8005b18 <__libc_init_array+0xc>
 8005b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3e:	4798      	blx	r3
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7f2      	b.n	8005b2a <__libc_init_array+0x1e>
 8005b44:	08009760 	.word	0x08009760
 8005b48:	08009760 	.word	0x08009760
 8005b4c:	08009760 	.word	0x08009760
 8005b50:	08009764 	.word	0x08009764

08005b54 <memset>:
 8005b54:	4402      	add	r2, r0
 8005b56:	4603      	mov	r3, r0
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d100      	bne.n	8005b5e <memset+0xa>
 8005b5c:	4770      	bx	lr
 8005b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b62:	e7f9      	b.n	8005b58 <memset+0x4>

08005b64 <__cvt>:
 8005b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b66:	ed2d 8b02 	vpush	{d8}
 8005b6a:	eeb0 8b40 	vmov.f64	d8, d0
 8005b6e:	b085      	sub	sp, #20
 8005b70:	4617      	mov	r7, r2
 8005b72:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005b74:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005b76:	ee18 2a90 	vmov	r2, s17
 8005b7a:	f025 0520 	bic.w	r5, r5, #32
 8005b7e:	2a00      	cmp	r2, #0
 8005b80:	bfb6      	itet	lt
 8005b82:	222d      	movlt	r2, #45	; 0x2d
 8005b84:	2200      	movge	r2, #0
 8005b86:	eeb1 8b40 	vneglt.f64	d8, d0
 8005b8a:	2d46      	cmp	r5, #70	; 0x46
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	d004      	beq.n	8005b9c <__cvt+0x38>
 8005b92:	2d45      	cmp	r5, #69	; 0x45
 8005b94:	d100      	bne.n	8005b98 <__cvt+0x34>
 8005b96:	3401      	adds	r4, #1
 8005b98:	2102      	movs	r1, #2
 8005b9a:	e000      	b.n	8005b9e <__cvt+0x3a>
 8005b9c:	2103      	movs	r1, #3
 8005b9e:	ab03      	add	r3, sp, #12
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	ab02      	add	r3, sp, #8
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	4622      	mov	r2, r4
 8005ba8:	4633      	mov	r3, r6
 8005baa:	eeb0 0b48 	vmov.f64	d0, d8
 8005bae:	f000 fddf 	bl	8006770 <_dtoa_r>
 8005bb2:	2d47      	cmp	r5, #71	; 0x47
 8005bb4:	d101      	bne.n	8005bba <__cvt+0x56>
 8005bb6:	07fb      	lsls	r3, r7, #31
 8005bb8:	d51a      	bpl.n	8005bf0 <__cvt+0x8c>
 8005bba:	2d46      	cmp	r5, #70	; 0x46
 8005bbc:	eb00 0204 	add.w	r2, r0, r4
 8005bc0:	d10c      	bne.n	8005bdc <__cvt+0x78>
 8005bc2:	7803      	ldrb	r3, [r0, #0]
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d107      	bne.n	8005bd8 <__cvt+0x74>
 8005bc8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd0:	bf1c      	itt	ne
 8005bd2:	f1c4 0401 	rsbne	r4, r4, #1
 8005bd6:	6034      	strne	r4, [r6, #0]
 8005bd8:	6833      	ldr	r3, [r6, #0]
 8005bda:	441a      	add	r2, r3
 8005bdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be4:	bf08      	it	eq
 8005be6:	9203      	streq	r2, [sp, #12]
 8005be8:	2130      	movs	r1, #48	; 0x30
 8005bea:	9b03      	ldr	r3, [sp, #12]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d307      	bcc.n	8005c00 <__cvt+0x9c>
 8005bf0:	9b03      	ldr	r3, [sp, #12]
 8005bf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bf4:	1a1b      	subs	r3, r3, r0
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	b005      	add	sp, #20
 8005bfa:	ecbd 8b02 	vpop	{d8}
 8005bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c00:	1c5c      	adds	r4, r3, #1
 8005c02:	9403      	str	r4, [sp, #12]
 8005c04:	7019      	strb	r1, [r3, #0]
 8005c06:	e7f0      	b.n	8005bea <__cvt+0x86>

08005c08 <__exponent>:
 8005c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2900      	cmp	r1, #0
 8005c0e:	bfb8      	it	lt
 8005c10:	4249      	neglt	r1, r1
 8005c12:	f803 2b02 	strb.w	r2, [r3], #2
 8005c16:	bfb4      	ite	lt
 8005c18:	222d      	movlt	r2, #45	; 0x2d
 8005c1a:	222b      	movge	r2, #43	; 0x2b
 8005c1c:	2909      	cmp	r1, #9
 8005c1e:	7042      	strb	r2, [r0, #1]
 8005c20:	dd2a      	ble.n	8005c78 <__exponent+0x70>
 8005c22:	f10d 0407 	add.w	r4, sp, #7
 8005c26:	46a4      	mov	ip, r4
 8005c28:	270a      	movs	r7, #10
 8005c2a:	46a6      	mov	lr, r4
 8005c2c:	460a      	mov	r2, r1
 8005c2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c32:	fb07 1516 	mls	r5, r7, r6, r1
 8005c36:	3530      	adds	r5, #48	; 0x30
 8005c38:	2a63      	cmp	r2, #99	; 0x63
 8005c3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c42:	4631      	mov	r1, r6
 8005c44:	dcf1      	bgt.n	8005c2a <__exponent+0x22>
 8005c46:	3130      	adds	r1, #48	; 0x30
 8005c48:	f1ae 0502 	sub.w	r5, lr, #2
 8005c4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c50:	1c44      	adds	r4, r0, #1
 8005c52:	4629      	mov	r1, r5
 8005c54:	4561      	cmp	r1, ip
 8005c56:	d30a      	bcc.n	8005c6e <__exponent+0x66>
 8005c58:	f10d 0209 	add.w	r2, sp, #9
 8005c5c:	eba2 020e 	sub.w	r2, r2, lr
 8005c60:	4565      	cmp	r5, ip
 8005c62:	bf88      	it	hi
 8005c64:	2200      	movhi	r2, #0
 8005c66:	4413      	add	r3, r2
 8005c68:	1a18      	subs	r0, r3, r0
 8005c6a:	b003      	add	sp, #12
 8005c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c76:	e7ed      	b.n	8005c54 <__exponent+0x4c>
 8005c78:	2330      	movs	r3, #48	; 0x30
 8005c7a:	3130      	adds	r1, #48	; 0x30
 8005c7c:	7083      	strb	r3, [r0, #2]
 8005c7e:	70c1      	strb	r1, [r0, #3]
 8005c80:	1d03      	adds	r3, r0, #4
 8005c82:	e7f1      	b.n	8005c68 <__exponent+0x60>
 8005c84:	0000      	movs	r0, r0
	...

08005c88 <_printf_float>:
 8005c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c8c:	b08b      	sub	sp, #44	; 0x2c
 8005c8e:	460c      	mov	r4, r1
 8005c90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005c94:	4616      	mov	r6, r2
 8005c96:	461f      	mov	r7, r3
 8005c98:	4605      	mov	r5, r0
 8005c9a:	f001 fc8f 	bl	80075bc <_localeconv_r>
 8005c9e:	f8d0 b000 	ldr.w	fp, [r0]
 8005ca2:	4658      	mov	r0, fp
 8005ca4:	f7fa fb24 	bl	80002f0 <strlen>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9308      	str	r3, [sp, #32]
 8005cac:	f8d8 3000 	ldr.w	r3, [r8]
 8005cb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	3307      	adds	r3, #7
 8005cb8:	f023 0307 	bic.w	r3, r3, #7
 8005cbc:	f103 0108 	add.w	r1, r3, #8
 8005cc0:	f8c8 1000 	str.w	r1, [r8]
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005cca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005cce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005f30 <_printf_float+0x2a8>
 8005cd2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005cd6:	eeb0 6bc0 	vabs.f64	d6, d0
 8005cda:	eeb4 6b47 	vcmp.f64	d6, d7
 8005cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce2:	dd24      	ble.n	8005d2e <_printf_float+0xa6>
 8005ce4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cec:	d502      	bpl.n	8005cf4 <_printf_float+0x6c>
 8005cee:	232d      	movs	r3, #45	; 0x2d
 8005cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf4:	4b90      	ldr	r3, [pc, #576]	; (8005f38 <_printf_float+0x2b0>)
 8005cf6:	4891      	ldr	r0, [pc, #580]	; (8005f3c <_printf_float+0x2b4>)
 8005cf8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cfc:	bf94      	ite	ls
 8005cfe:	4698      	movls	r8, r3
 8005d00:	4680      	movhi	r8, r0
 8005d02:	2303      	movs	r3, #3
 8005d04:	6123      	str	r3, [r4, #16]
 8005d06:	f022 0204 	bic.w	r2, r2, #4
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	6022      	str	r2, [r4, #0]
 8005d0e:	9304      	str	r3, [sp, #16]
 8005d10:	9700      	str	r7, [sp, #0]
 8005d12:	4633      	mov	r3, r6
 8005d14:	aa09      	add	r2, sp, #36	; 0x24
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 f9d3 	bl	80060c4 <_printf_common>
 8005d1e:	3001      	adds	r0, #1
 8005d20:	f040 808a 	bne.w	8005e38 <_printf_float+0x1b0>
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	b00b      	add	sp, #44	; 0x2c
 8005d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	d709      	bvc.n	8005d4c <_printf_float+0xc4>
 8005d38:	ee10 3a90 	vmov	r3, s1
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bfbc      	itt	lt
 8005d40:	232d      	movlt	r3, #45	; 0x2d
 8005d42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d46:	487e      	ldr	r0, [pc, #504]	; (8005f40 <_printf_float+0x2b8>)
 8005d48:	4b7e      	ldr	r3, [pc, #504]	; (8005f44 <_printf_float+0x2bc>)
 8005d4a:	e7d5      	b.n	8005cf8 <_printf_float+0x70>
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d52:	9104      	str	r1, [sp, #16]
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	d13c      	bne.n	8005dd2 <_printf_float+0x14a>
 8005d58:	2306      	movs	r3, #6
 8005d5a:	6063      	str	r3, [r4, #4]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9303      	str	r3, [sp, #12]
 8005d60:	ab08      	add	r3, sp, #32
 8005d62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d6a:	ab07      	add	r3, sp, #28
 8005d6c:	6861      	ldr	r1, [r4, #4]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	6022      	str	r2, [r4, #0]
 8005d72:	f10d 031b 	add.w	r3, sp, #27
 8005d76:	4628      	mov	r0, r5
 8005d78:	f7ff fef4 	bl	8005b64 <__cvt>
 8005d7c:	9b04      	ldr	r3, [sp, #16]
 8005d7e:	9907      	ldr	r1, [sp, #28]
 8005d80:	2b47      	cmp	r3, #71	; 0x47
 8005d82:	4680      	mov	r8, r0
 8005d84:	d108      	bne.n	8005d98 <_printf_float+0x110>
 8005d86:	1cc8      	adds	r0, r1, #3
 8005d88:	db02      	blt.n	8005d90 <_printf_float+0x108>
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	dd41      	ble.n	8005e14 <_printf_float+0x18c>
 8005d90:	f1a9 0902 	sub.w	r9, r9, #2
 8005d94:	fa5f f989 	uxtb.w	r9, r9
 8005d98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d9c:	d820      	bhi.n	8005de0 <_printf_float+0x158>
 8005d9e:	3901      	subs	r1, #1
 8005da0:	464a      	mov	r2, r9
 8005da2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005da6:	9107      	str	r1, [sp, #28]
 8005da8:	f7ff ff2e 	bl	8005c08 <__exponent>
 8005dac:	9a08      	ldr	r2, [sp, #32]
 8005dae:	9004      	str	r0, [sp, #16]
 8005db0:	1813      	adds	r3, r2, r0
 8005db2:	2a01      	cmp	r2, #1
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	dc02      	bgt.n	8005dbe <_printf_float+0x136>
 8005db8:	6822      	ldr	r2, [r4, #0]
 8005dba:	07d2      	lsls	r2, r2, #31
 8005dbc:	d501      	bpl.n	8005dc2 <_printf_float+0x13a>
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	6123      	str	r3, [r4, #16]
 8005dc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0a2      	beq.n	8005d10 <_printf_float+0x88>
 8005dca:	232d      	movs	r3, #45	; 0x2d
 8005dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dd0:	e79e      	b.n	8005d10 <_printf_float+0x88>
 8005dd2:	9904      	ldr	r1, [sp, #16]
 8005dd4:	2947      	cmp	r1, #71	; 0x47
 8005dd6:	d1c1      	bne.n	8005d5c <_printf_float+0xd4>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1bf      	bne.n	8005d5c <_printf_float+0xd4>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e7bc      	b.n	8005d5a <_printf_float+0xd2>
 8005de0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005de4:	d118      	bne.n	8005e18 <_printf_float+0x190>
 8005de6:	2900      	cmp	r1, #0
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	dd0b      	ble.n	8005e04 <_printf_float+0x17c>
 8005dec:	6121      	str	r1, [r4, #16]
 8005dee:	b913      	cbnz	r3, 8005df6 <_printf_float+0x16e>
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	07d0      	lsls	r0, r2, #31
 8005df4:	d502      	bpl.n	8005dfc <_printf_float+0x174>
 8005df6:	3301      	adds	r3, #1
 8005df8:	440b      	add	r3, r1
 8005dfa:	6123      	str	r3, [r4, #16]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	e7de      	b.n	8005dc2 <_printf_float+0x13a>
 8005e04:	b913      	cbnz	r3, 8005e0c <_printf_float+0x184>
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	07d2      	lsls	r2, r2, #31
 8005e0a:	d501      	bpl.n	8005e10 <_printf_float+0x188>
 8005e0c:	3302      	adds	r3, #2
 8005e0e:	e7f4      	b.n	8005dfa <_printf_float+0x172>
 8005e10:	2301      	movs	r3, #1
 8005e12:	e7f2      	b.n	8005dfa <_printf_float+0x172>
 8005e14:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e18:	9b08      	ldr	r3, [sp, #32]
 8005e1a:	4299      	cmp	r1, r3
 8005e1c:	db05      	blt.n	8005e2a <_printf_float+0x1a2>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	6121      	str	r1, [r4, #16]
 8005e22:	07d8      	lsls	r0, r3, #31
 8005e24:	d5ea      	bpl.n	8005dfc <_printf_float+0x174>
 8005e26:	1c4b      	adds	r3, r1, #1
 8005e28:	e7e7      	b.n	8005dfa <_printf_float+0x172>
 8005e2a:	2900      	cmp	r1, #0
 8005e2c:	bfd4      	ite	le
 8005e2e:	f1c1 0202 	rsble	r2, r1, #2
 8005e32:	2201      	movgt	r2, #1
 8005e34:	4413      	add	r3, r2
 8005e36:	e7e0      	b.n	8005dfa <_printf_float+0x172>
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	055a      	lsls	r2, r3, #21
 8005e3c:	d407      	bmi.n	8005e4e <_printf_float+0x1c6>
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	4642      	mov	r2, r8
 8005e42:	4631      	mov	r1, r6
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b8      	blx	r7
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d12a      	bne.n	8005ea2 <_printf_float+0x21a>
 8005e4c:	e76a      	b.n	8005d24 <_printf_float+0x9c>
 8005e4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e52:	f240 80e2 	bls.w	800601a <_printf_float+0x392>
 8005e56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005e5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	d133      	bne.n	8005ecc <_printf_float+0x244>
 8005e64:	4a38      	ldr	r2, [pc, #224]	; (8005f48 <_printf_float+0x2c0>)
 8005e66:	2301      	movs	r3, #1
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f43f af58 	beq.w	8005d24 <_printf_float+0x9c>
 8005e74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	db02      	blt.n	8005e82 <_printf_float+0x1fa>
 8005e7c:	6823      	ldr	r3, [r4, #0]
 8005e7e:	07d8      	lsls	r0, r3, #31
 8005e80:	d50f      	bpl.n	8005ea2 <_printf_float+0x21a>
 8005e82:	4653      	mov	r3, sl
 8005e84:	465a      	mov	r2, fp
 8005e86:	4631      	mov	r1, r6
 8005e88:	4628      	mov	r0, r5
 8005e8a:	47b8      	blx	r7
 8005e8c:	3001      	adds	r0, #1
 8005e8e:	f43f af49 	beq.w	8005d24 <_printf_float+0x9c>
 8005e92:	f04f 0800 	mov.w	r8, #0
 8005e96:	f104 091a 	add.w	r9, r4, #26
 8005e9a:	9b08      	ldr	r3, [sp, #32]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	4543      	cmp	r3, r8
 8005ea0:	dc09      	bgt.n	8005eb6 <_printf_float+0x22e>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	079b      	lsls	r3, r3, #30
 8005ea6:	f100 8108 	bmi.w	80060ba <_printf_float+0x432>
 8005eaa:	68e0      	ldr	r0, [r4, #12]
 8005eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eae:	4298      	cmp	r0, r3
 8005eb0:	bfb8      	it	lt
 8005eb2:	4618      	movlt	r0, r3
 8005eb4:	e738      	b.n	8005d28 <_printf_float+0xa0>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	464a      	mov	r2, r9
 8005eba:	4631      	mov	r1, r6
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f43f af2f 	beq.w	8005d24 <_printf_float+0x9c>
 8005ec6:	f108 0801 	add.w	r8, r8, #1
 8005eca:	e7e6      	b.n	8005e9a <_printf_float+0x212>
 8005ecc:	9b07      	ldr	r3, [sp, #28]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dc3c      	bgt.n	8005f4c <_printf_float+0x2c4>
 8005ed2:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <_printf_float+0x2c0>)
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b8      	blx	r7
 8005edc:	3001      	adds	r0, #1
 8005ede:	f43f af21 	beq.w	8005d24 <_printf_float+0x9c>
 8005ee2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	d102      	bne.n	8005ef0 <_printf_float+0x268>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	07d9      	lsls	r1, r3, #31
 8005eee:	d5d8      	bpl.n	8005ea2 <_printf_float+0x21a>
 8005ef0:	4653      	mov	r3, sl
 8005ef2:	465a      	mov	r2, fp
 8005ef4:	4631      	mov	r1, r6
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	f43f af12 	beq.w	8005d24 <_printf_float+0x9c>
 8005f00:	f04f 0900 	mov.w	r9, #0
 8005f04:	f104 0a1a 	add.w	sl, r4, #26
 8005f08:	9b07      	ldr	r3, [sp, #28]
 8005f0a:	425b      	negs	r3, r3
 8005f0c:	454b      	cmp	r3, r9
 8005f0e:	dc01      	bgt.n	8005f14 <_printf_float+0x28c>
 8005f10:	9b08      	ldr	r3, [sp, #32]
 8005f12:	e795      	b.n	8005e40 <_printf_float+0x1b8>
 8005f14:	2301      	movs	r3, #1
 8005f16:	4652      	mov	r2, sl
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	f43f af00 	beq.w	8005d24 <_printf_float+0x9c>
 8005f24:	f109 0901 	add.w	r9, r9, #1
 8005f28:	e7ee      	b.n	8005f08 <_printf_float+0x280>
 8005f2a:	bf00      	nop
 8005f2c:	f3af 8000 	nop.w
 8005f30:	ffffffff 	.word	0xffffffff
 8005f34:	7fefffff 	.word	0x7fefffff
 8005f38:	080091a4 	.word	0x080091a4
 8005f3c:	080091a8 	.word	0x080091a8
 8005f40:	080091b0 	.word	0x080091b0
 8005f44:	080091ac 	.word	0x080091ac
 8005f48:	080091b4 	.word	0x080091b4
 8005f4c:	9a08      	ldr	r2, [sp, #32]
 8005f4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f50:	429a      	cmp	r2, r3
 8005f52:	bfa8      	it	ge
 8005f54:	461a      	movge	r2, r3
 8005f56:	2a00      	cmp	r2, #0
 8005f58:	4691      	mov	r9, r2
 8005f5a:	dc38      	bgt.n	8005fce <_printf_float+0x346>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9305      	str	r3, [sp, #20]
 8005f60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f64:	f104 021a 	add.w	r2, r4, #26
 8005f68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f6a:	9905      	ldr	r1, [sp, #20]
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	eba3 0309 	sub.w	r3, r3, r9
 8005f72:	428b      	cmp	r3, r1
 8005f74:	dc33      	bgt.n	8005fde <_printf_float+0x356>
 8005f76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	db3c      	blt.n	8005ff8 <_printf_float+0x370>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	07da      	lsls	r2, r3, #31
 8005f82:	d439      	bmi.n	8005ff8 <_printf_float+0x370>
 8005f84:	9b08      	ldr	r3, [sp, #32]
 8005f86:	9a04      	ldr	r2, [sp, #16]
 8005f88:	9907      	ldr	r1, [sp, #28]
 8005f8a:	1a9a      	subs	r2, r3, r2
 8005f8c:	eba3 0901 	sub.w	r9, r3, r1
 8005f90:	4591      	cmp	r9, r2
 8005f92:	bfa8      	it	ge
 8005f94:	4691      	movge	r9, r2
 8005f96:	f1b9 0f00 	cmp.w	r9, #0
 8005f9a:	dc35      	bgt.n	8006008 <_printf_float+0x380>
 8005f9c:	f04f 0800 	mov.w	r8, #0
 8005fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fa4:	f104 0a1a 	add.w	sl, r4, #26
 8005fa8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005fac:	1a9b      	subs	r3, r3, r2
 8005fae:	eba3 0309 	sub.w	r3, r3, r9
 8005fb2:	4543      	cmp	r3, r8
 8005fb4:	f77f af75 	ble.w	8005ea2 <_printf_float+0x21a>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4652      	mov	r2, sl
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f aeae 	beq.w	8005d24 <_printf_float+0x9c>
 8005fc8:	f108 0801 	add.w	r8, r8, #1
 8005fcc:	e7ec      	b.n	8005fa8 <_printf_float+0x320>
 8005fce:	4613      	mov	r3, r2
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4642      	mov	r2, r8
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	47b8      	blx	r7
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d1bf      	bne.n	8005f5c <_printf_float+0x2d4>
 8005fdc:	e6a2      	b.n	8005d24 <_printf_float+0x9c>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	4631      	mov	r1, r6
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	9204      	str	r2, [sp, #16]
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f43f ae9b 	beq.w	8005d24 <_printf_float+0x9c>
 8005fee:	9b05      	ldr	r3, [sp, #20]
 8005ff0:	9a04      	ldr	r2, [sp, #16]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	9305      	str	r3, [sp, #20]
 8005ff6:	e7b7      	b.n	8005f68 <_printf_float+0x2e0>
 8005ff8:	4653      	mov	r3, sl
 8005ffa:	465a      	mov	r2, fp
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	4628      	mov	r0, r5
 8006000:	47b8      	blx	r7
 8006002:	3001      	adds	r0, #1
 8006004:	d1be      	bne.n	8005f84 <_printf_float+0x2fc>
 8006006:	e68d      	b.n	8005d24 <_printf_float+0x9c>
 8006008:	9a04      	ldr	r2, [sp, #16]
 800600a:	464b      	mov	r3, r9
 800600c:	4442      	add	r2, r8
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	d1c1      	bne.n	8005f9c <_printf_float+0x314>
 8006018:	e684      	b.n	8005d24 <_printf_float+0x9c>
 800601a:	9a08      	ldr	r2, [sp, #32]
 800601c:	2a01      	cmp	r2, #1
 800601e:	dc01      	bgt.n	8006024 <_printf_float+0x39c>
 8006020:	07db      	lsls	r3, r3, #31
 8006022:	d537      	bpl.n	8006094 <_printf_float+0x40c>
 8006024:	2301      	movs	r3, #1
 8006026:	4642      	mov	r2, r8
 8006028:	4631      	mov	r1, r6
 800602a:	4628      	mov	r0, r5
 800602c:	47b8      	blx	r7
 800602e:	3001      	adds	r0, #1
 8006030:	f43f ae78 	beq.w	8005d24 <_printf_float+0x9c>
 8006034:	4653      	mov	r3, sl
 8006036:	465a      	mov	r2, fp
 8006038:	4631      	mov	r1, r6
 800603a:	4628      	mov	r0, r5
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	f43f ae70 	beq.w	8005d24 <_printf_float+0x9c>
 8006044:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006048:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800604c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006050:	d01b      	beq.n	800608a <_printf_float+0x402>
 8006052:	9b08      	ldr	r3, [sp, #32]
 8006054:	f108 0201 	add.w	r2, r8, #1
 8006058:	3b01      	subs	r3, #1
 800605a:	4631      	mov	r1, r6
 800605c:	4628      	mov	r0, r5
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	d10e      	bne.n	8006082 <_printf_float+0x3fa>
 8006064:	e65e      	b.n	8005d24 <_printf_float+0x9c>
 8006066:	2301      	movs	r3, #1
 8006068:	464a      	mov	r2, r9
 800606a:	4631      	mov	r1, r6
 800606c:	4628      	mov	r0, r5
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	f43f ae57 	beq.w	8005d24 <_printf_float+0x9c>
 8006076:	f108 0801 	add.w	r8, r8, #1
 800607a:	9b08      	ldr	r3, [sp, #32]
 800607c:	3b01      	subs	r3, #1
 800607e:	4543      	cmp	r3, r8
 8006080:	dcf1      	bgt.n	8006066 <_printf_float+0x3de>
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006088:	e6db      	b.n	8005e42 <_printf_float+0x1ba>
 800608a:	f04f 0800 	mov.w	r8, #0
 800608e:	f104 091a 	add.w	r9, r4, #26
 8006092:	e7f2      	b.n	800607a <_printf_float+0x3f2>
 8006094:	2301      	movs	r3, #1
 8006096:	4642      	mov	r2, r8
 8006098:	e7df      	b.n	800605a <_printf_float+0x3d2>
 800609a:	2301      	movs	r3, #1
 800609c:	464a      	mov	r2, r9
 800609e:	4631      	mov	r1, r6
 80060a0:	4628      	mov	r0, r5
 80060a2:	47b8      	blx	r7
 80060a4:	3001      	adds	r0, #1
 80060a6:	f43f ae3d 	beq.w	8005d24 <_printf_float+0x9c>
 80060aa:	f108 0801 	add.w	r8, r8, #1
 80060ae:	68e3      	ldr	r3, [r4, #12]
 80060b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060b2:	1a5b      	subs	r3, r3, r1
 80060b4:	4543      	cmp	r3, r8
 80060b6:	dcf0      	bgt.n	800609a <_printf_float+0x412>
 80060b8:	e6f7      	b.n	8005eaa <_printf_float+0x222>
 80060ba:	f04f 0800 	mov.w	r8, #0
 80060be:	f104 0919 	add.w	r9, r4, #25
 80060c2:	e7f4      	b.n	80060ae <_printf_float+0x426>

080060c4 <_printf_common>:
 80060c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	4616      	mov	r6, r2
 80060ca:	4699      	mov	r9, r3
 80060cc:	688a      	ldr	r2, [r1, #8]
 80060ce:	690b      	ldr	r3, [r1, #16]
 80060d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bfb8      	it	lt
 80060d8:	4613      	movlt	r3, r2
 80060da:	6033      	str	r3, [r6, #0]
 80060dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060e0:	4607      	mov	r7, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	b10a      	cbz	r2, 80060ea <_printf_common+0x26>
 80060e6:	3301      	adds	r3, #1
 80060e8:	6033      	str	r3, [r6, #0]
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	0699      	lsls	r1, r3, #26
 80060ee:	bf42      	ittt	mi
 80060f0:	6833      	ldrmi	r3, [r6, #0]
 80060f2:	3302      	addmi	r3, #2
 80060f4:	6033      	strmi	r3, [r6, #0]
 80060f6:	6825      	ldr	r5, [r4, #0]
 80060f8:	f015 0506 	ands.w	r5, r5, #6
 80060fc:	d106      	bne.n	800610c <_printf_common+0x48>
 80060fe:	f104 0a19 	add.w	sl, r4, #25
 8006102:	68e3      	ldr	r3, [r4, #12]
 8006104:	6832      	ldr	r2, [r6, #0]
 8006106:	1a9b      	subs	r3, r3, r2
 8006108:	42ab      	cmp	r3, r5
 800610a:	dc26      	bgt.n	800615a <_printf_common+0x96>
 800610c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006110:	1e13      	subs	r3, r2, #0
 8006112:	6822      	ldr	r2, [r4, #0]
 8006114:	bf18      	it	ne
 8006116:	2301      	movne	r3, #1
 8006118:	0692      	lsls	r2, r2, #26
 800611a:	d42b      	bmi.n	8006174 <_printf_common+0xb0>
 800611c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006120:	4649      	mov	r1, r9
 8006122:	4638      	mov	r0, r7
 8006124:	47c0      	blx	r8
 8006126:	3001      	adds	r0, #1
 8006128:	d01e      	beq.n	8006168 <_printf_common+0xa4>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	68e5      	ldr	r5, [r4, #12]
 800612e:	6832      	ldr	r2, [r6, #0]
 8006130:	f003 0306 	and.w	r3, r3, #6
 8006134:	2b04      	cmp	r3, #4
 8006136:	bf08      	it	eq
 8006138:	1aad      	subeq	r5, r5, r2
 800613a:	68a3      	ldr	r3, [r4, #8]
 800613c:	6922      	ldr	r2, [r4, #16]
 800613e:	bf0c      	ite	eq
 8006140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006144:	2500      	movne	r5, #0
 8006146:	4293      	cmp	r3, r2
 8006148:	bfc4      	itt	gt
 800614a:	1a9b      	subgt	r3, r3, r2
 800614c:	18ed      	addgt	r5, r5, r3
 800614e:	2600      	movs	r6, #0
 8006150:	341a      	adds	r4, #26
 8006152:	42b5      	cmp	r5, r6
 8006154:	d11a      	bne.n	800618c <_printf_common+0xc8>
 8006156:	2000      	movs	r0, #0
 8006158:	e008      	b.n	800616c <_printf_common+0xa8>
 800615a:	2301      	movs	r3, #1
 800615c:	4652      	mov	r2, sl
 800615e:	4649      	mov	r1, r9
 8006160:	4638      	mov	r0, r7
 8006162:	47c0      	blx	r8
 8006164:	3001      	adds	r0, #1
 8006166:	d103      	bne.n	8006170 <_printf_common+0xac>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006170:	3501      	adds	r5, #1
 8006172:	e7c6      	b.n	8006102 <_printf_common+0x3e>
 8006174:	18e1      	adds	r1, r4, r3
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	2030      	movs	r0, #48	; 0x30
 800617a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800617e:	4422      	add	r2, r4
 8006180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006188:	3302      	adds	r3, #2
 800618a:	e7c7      	b.n	800611c <_printf_common+0x58>
 800618c:	2301      	movs	r3, #1
 800618e:	4622      	mov	r2, r4
 8006190:	4649      	mov	r1, r9
 8006192:	4638      	mov	r0, r7
 8006194:	47c0      	blx	r8
 8006196:	3001      	adds	r0, #1
 8006198:	d0e6      	beq.n	8006168 <_printf_common+0xa4>
 800619a:	3601      	adds	r6, #1
 800619c:	e7d9      	b.n	8006152 <_printf_common+0x8e>
	...

080061a0 <_printf_i>:
 80061a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a4:	7e0f      	ldrb	r7, [r1, #24]
 80061a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061a8:	2f78      	cmp	r7, #120	; 0x78
 80061aa:	4691      	mov	r9, r2
 80061ac:	4680      	mov	r8, r0
 80061ae:	460c      	mov	r4, r1
 80061b0:	469a      	mov	sl, r3
 80061b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061b6:	d807      	bhi.n	80061c8 <_printf_i+0x28>
 80061b8:	2f62      	cmp	r7, #98	; 0x62
 80061ba:	d80a      	bhi.n	80061d2 <_printf_i+0x32>
 80061bc:	2f00      	cmp	r7, #0
 80061be:	f000 80d8 	beq.w	8006372 <_printf_i+0x1d2>
 80061c2:	2f58      	cmp	r7, #88	; 0x58
 80061c4:	f000 80a3 	beq.w	800630e <_printf_i+0x16e>
 80061c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061d0:	e03a      	b.n	8006248 <_printf_i+0xa8>
 80061d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061d6:	2b15      	cmp	r3, #21
 80061d8:	d8f6      	bhi.n	80061c8 <_printf_i+0x28>
 80061da:	a101      	add	r1, pc, #4	; (adr r1, 80061e0 <_printf_i+0x40>)
 80061dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061e0:	08006239 	.word	0x08006239
 80061e4:	0800624d 	.word	0x0800624d
 80061e8:	080061c9 	.word	0x080061c9
 80061ec:	080061c9 	.word	0x080061c9
 80061f0:	080061c9 	.word	0x080061c9
 80061f4:	080061c9 	.word	0x080061c9
 80061f8:	0800624d 	.word	0x0800624d
 80061fc:	080061c9 	.word	0x080061c9
 8006200:	080061c9 	.word	0x080061c9
 8006204:	080061c9 	.word	0x080061c9
 8006208:	080061c9 	.word	0x080061c9
 800620c:	08006359 	.word	0x08006359
 8006210:	0800627d 	.word	0x0800627d
 8006214:	0800633b 	.word	0x0800633b
 8006218:	080061c9 	.word	0x080061c9
 800621c:	080061c9 	.word	0x080061c9
 8006220:	0800637b 	.word	0x0800637b
 8006224:	080061c9 	.word	0x080061c9
 8006228:	0800627d 	.word	0x0800627d
 800622c:	080061c9 	.word	0x080061c9
 8006230:	080061c9 	.word	0x080061c9
 8006234:	08006343 	.word	0x08006343
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	1d1a      	adds	r2, r3, #4
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	602a      	str	r2, [r5, #0]
 8006240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006248:	2301      	movs	r3, #1
 800624a:	e0a3      	b.n	8006394 <_printf_i+0x1f4>
 800624c:	6820      	ldr	r0, [r4, #0]
 800624e:	6829      	ldr	r1, [r5, #0]
 8006250:	0606      	lsls	r6, r0, #24
 8006252:	f101 0304 	add.w	r3, r1, #4
 8006256:	d50a      	bpl.n	800626e <_printf_i+0xce>
 8006258:	680e      	ldr	r6, [r1, #0]
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	2e00      	cmp	r6, #0
 800625e:	da03      	bge.n	8006268 <_printf_i+0xc8>
 8006260:	232d      	movs	r3, #45	; 0x2d
 8006262:	4276      	negs	r6, r6
 8006264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006268:	485e      	ldr	r0, [pc, #376]	; (80063e4 <_printf_i+0x244>)
 800626a:	230a      	movs	r3, #10
 800626c:	e019      	b.n	80062a2 <_printf_i+0x102>
 800626e:	680e      	ldr	r6, [r1, #0]
 8006270:	602b      	str	r3, [r5, #0]
 8006272:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006276:	bf18      	it	ne
 8006278:	b236      	sxthne	r6, r6
 800627a:	e7ef      	b.n	800625c <_printf_i+0xbc>
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	6820      	ldr	r0, [r4, #0]
 8006280:	1d19      	adds	r1, r3, #4
 8006282:	6029      	str	r1, [r5, #0]
 8006284:	0601      	lsls	r1, r0, #24
 8006286:	d501      	bpl.n	800628c <_printf_i+0xec>
 8006288:	681e      	ldr	r6, [r3, #0]
 800628a:	e002      	b.n	8006292 <_printf_i+0xf2>
 800628c:	0646      	lsls	r6, r0, #25
 800628e:	d5fb      	bpl.n	8006288 <_printf_i+0xe8>
 8006290:	881e      	ldrh	r6, [r3, #0]
 8006292:	4854      	ldr	r0, [pc, #336]	; (80063e4 <_printf_i+0x244>)
 8006294:	2f6f      	cmp	r7, #111	; 0x6f
 8006296:	bf0c      	ite	eq
 8006298:	2308      	moveq	r3, #8
 800629a:	230a      	movne	r3, #10
 800629c:	2100      	movs	r1, #0
 800629e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062a2:	6865      	ldr	r5, [r4, #4]
 80062a4:	60a5      	str	r5, [r4, #8]
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	bfa2      	ittt	ge
 80062aa:	6821      	ldrge	r1, [r4, #0]
 80062ac:	f021 0104 	bicge.w	r1, r1, #4
 80062b0:	6021      	strge	r1, [r4, #0]
 80062b2:	b90e      	cbnz	r6, 80062b8 <_printf_i+0x118>
 80062b4:	2d00      	cmp	r5, #0
 80062b6:	d04d      	beq.n	8006354 <_printf_i+0x1b4>
 80062b8:	4615      	mov	r5, r2
 80062ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80062be:	fb03 6711 	mls	r7, r3, r1, r6
 80062c2:	5dc7      	ldrb	r7, [r0, r7]
 80062c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062c8:	4637      	mov	r7, r6
 80062ca:	42bb      	cmp	r3, r7
 80062cc:	460e      	mov	r6, r1
 80062ce:	d9f4      	bls.n	80062ba <_printf_i+0x11a>
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d10b      	bne.n	80062ec <_printf_i+0x14c>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	07de      	lsls	r6, r3, #31
 80062d8:	d508      	bpl.n	80062ec <_printf_i+0x14c>
 80062da:	6923      	ldr	r3, [r4, #16]
 80062dc:	6861      	ldr	r1, [r4, #4]
 80062de:	4299      	cmp	r1, r3
 80062e0:	bfde      	ittt	le
 80062e2:	2330      	movle	r3, #48	; 0x30
 80062e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062ec:	1b52      	subs	r2, r2, r5
 80062ee:	6122      	str	r2, [r4, #16]
 80062f0:	f8cd a000 	str.w	sl, [sp]
 80062f4:	464b      	mov	r3, r9
 80062f6:	aa03      	add	r2, sp, #12
 80062f8:	4621      	mov	r1, r4
 80062fa:	4640      	mov	r0, r8
 80062fc:	f7ff fee2 	bl	80060c4 <_printf_common>
 8006300:	3001      	adds	r0, #1
 8006302:	d14c      	bne.n	800639e <_printf_i+0x1fe>
 8006304:	f04f 30ff 	mov.w	r0, #4294967295
 8006308:	b004      	add	sp, #16
 800630a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630e:	4835      	ldr	r0, [pc, #212]	; (80063e4 <_printf_i+0x244>)
 8006310:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006314:	6829      	ldr	r1, [r5, #0]
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	f851 6b04 	ldr.w	r6, [r1], #4
 800631c:	6029      	str	r1, [r5, #0]
 800631e:	061d      	lsls	r5, r3, #24
 8006320:	d514      	bpl.n	800634c <_printf_i+0x1ac>
 8006322:	07df      	lsls	r7, r3, #31
 8006324:	bf44      	itt	mi
 8006326:	f043 0320 	orrmi.w	r3, r3, #32
 800632a:	6023      	strmi	r3, [r4, #0]
 800632c:	b91e      	cbnz	r6, 8006336 <_printf_i+0x196>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	f023 0320 	bic.w	r3, r3, #32
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	2310      	movs	r3, #16
 8006338:	e7b0      	b.n	800629c <_printf_i+0xfc>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	f043 0320 	orr.w	r3, r3, #32
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	2378      	movs	r3, #120	; 0x78
 8006344:	4828      	ldr	r0, [pc, #160]	; (80063e8 <_printf_i+0x248>)
 8006346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800634a:	e7e3      	b.n	8006314 <_printf_i+0x174>
 800634c:	0659      	lsls	r1, r3, #25
 800634e:	bf48      	it	mi
 8006350:	b2b6      	uxthmi	r6, r6
 8006352:	e7e6      	b.n	8006322 <_printf_i+0x182>
 8006354:	4615      	mov	r5, r2
 8006356:	e7bb      	b.n	80062d0 <_printf_i+0x130>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	6826      	ldr	r6, [r4, #0]
 800635c:	6961      	ldr	r1, [r4, #20]
 800635e:	1d18      	adds	r0, r3, #4
 8006360:	6028      	str	r0, [r5, #0]
 8006362:	0635      	lsls	r5, r6, #24
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	d501      	bpl.n	800636c <_printf_i+0x1cc>
 8006368:	6019      	str	r1, [r3, #0]
 800636a:	e002      	b.n	8006372 <_printf_i+0x1d2>
 800636c:	0670      	lsls	r0, r6, #25
 800636e:	d5fb      	bpl.n	8006368 <_printf_i+0x1c8>
 8006370:	8019      	strh	r1, [r3, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	4615      	mov	r5, r2
 8006378:	e7ba      	b.n	80062f0 <_printf_i+0x150>
 800637a:	682b      	ldr	r3, [r5, #0]
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	602a      	str	r2, [r5, #0]
 8006380:	681d      	ldr	r5, [r3, #0]
 8006382:	6862      	ldr	r2, [r4, #4]
 8006384:	2100      	movs	r1, #0
 8006386:	4628      	mov	r0, r5
 8006388:	f7f9 ffba 	bl	8000300 <memchr>
 800638c:	b108      	cbz	r0, 8006392 <_printf_i+0x1f2>
 800638e:	1b40      	subs	r0, r0, r5
 8006390:	6060      	str	r0, [r4, #4]
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	2300      	movs	r3, #0
 8006398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800639c:	e7a8      	b.n	80062f0 <_printf_i+0x150>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	462a      	mov	r2, r5
 80063a2:	4649      	mov	r1, r9
 80063a4:	4640      	mov	r0, r8
 80063a6:	47d0      	blx	sl
 80063a8:	3001      	adds	r0, #1
 80063aa:	d0ab      	beq.n	8006304 <_printf_i+0x164>
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	079b      	lsls	r3, r3, #30
 80063b0:	d413      	bmi.n	80063da <_printf_i+0x23a>
 80063b2:	68e0      	ldr	r0, [r4, #12]
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	4298      	cmp	r0, r3
 80063b8:	bfb8      	it	lt
 80063ba:	4618      	movlt	r0, r3
 80063bc:	e7a4      	b.n	8006308 <_printf_i+0x168>
 80063be:	2301      	movs	r3, #1
 80063c0:	4632      	mov	r2, r6
 80063c2:	4649      	mov	r1, r9
 80063c4:	4640      	mov	r0, r8
 80063c6:	47d0      	blx	sl
 80063c8:	3001      	adds	r0, #1
 80063ca:	d09b      	beq.n	8006304 <_printf_i+0x164>
 80063cc:	3501      	adds	r5, #1
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	9903      	ldr	r1, [sp, #12]
 80063d2:	1a5b      	subs	r3, r3, r1
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dcf2      	bgt.n	80063be <_printf_i+0x21e>
 80063d8:	e7eb      	b.n	80063b2 <_printf_i+0x212>
 80063da:	2500      	movs	r5, #0
 80063dc:	f104 0619 	add.w	r6, r4, #25
 80063e0:	e7f5      	b.n	80063ce <_printf_i+0x22e>
 80063e2:	bf00      	nop
 80063e4:	080091b6 	.word	0x080091b6
 80063e8:	080091c7 	.word	0x080091c7

080063ec <_puts_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	460e      	mov	r6, r1
 80063f0:	4605      	mov	r5, r0
 80063f2:	b118      	cbz	r0, 80063fc <_puts_r+0x10>
 80063f4:	6983      	ldr	r3, [r0, #24]
 80063f6:	b90b      	cbnz	r3, 80063fc <_puts_r+0x10>
 80063f8:	f001 f842 	bl	8007480 <__sinit>
 80063fc:	69ab      	ldr	r3, [r5, #24]
 80063fe:	68ac      	ldr	r4, [r5, #8]
 8006400:	b913      	cbnz	r3, 8006408 <_puts_r+0x1c>
 8006402:	4628      	mov	r0, r5
 8006404:	f001 f83c 	bl	8007480 <__sinit>
 8006408:	4b2c      	ldr	r3, [pc, #176]	; (80064bc <_puts_r+0xd0>)
 800640a:	429c      	cmp	r4, r3
 800640c:	d120      	bne.n	8006450 <_puts_r+0x64>
 800640e:	686c      	ldr	r4, [r5, #4]
 8006410:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006412:	07db      	lsls	r3, r3, #31
 8006414:	d405      	bmi.n	8006422 <_puts_r+0x36>
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	0598      	lsls	r0, r3, #22
 800641a:	d402      	bmi.n	8006422 <_puts_r+0x36>
 800641c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800641e:	f001 f8d2 	bl	80075c6 <__retarget_lock_acquire_recursive>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	0719      	lsls	r1, r3, #28
 8006426:	d51d      	bpl.n	8006464 <_puts_r+0x78>
 8006428:	6923      	ldr	r3, [r4, #16]
 800642a:	b1db      	cbz	r3, 8006464 <_puts_r+0x78>
 800642c:	3e01      	subs	r6, #1
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006434:	3b01      	subs	r3, #1
 8006436:	60a3      	str	r3, [r4, #8]
 8006438:	bb39      	cbnz	r1, 800648a <_puts_r+0x9e>
 800643a:	2b00      	cmp	r3, #0
 800643c:	da38      	bge.n	80064b0 <_puts_r+0xc4>
 800643e:	4622      	mov	r2, r4
 8006440:	210a      	movs	r1, #10
 8006442:	4628      	mov	r0, r5
 8006444:	f000 f848 	bl	80064d8 <__swbuf_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d011      	beq.n	8006470 <_puts_r+0x84>
 800644c:	250a      	movs	r5, #10
 800644e:	e011      	b.n	8006474 <_puts_r+0x88>
 8006450:	4b1b      	ldr	r3, [pc, #108]	; (80064c0 <_puts_r+0xd4>)
 8006452:	429c      	cmp	r4, r3
 8006454:	d101      	bne.n	800645a <_puts_r+0x6e>
 8006456:	68ac      	ldr	r4, [r5, #8]
 8006458:	e7da      	b.n	8006410 <_puts_r+0x24>
 800645a:	4b1a      	ldr	r3, [pc, #104]	; (80064c4 <_puts_r+0xd8>)
 800645c:	429c      	cmp	r4, r3
 800645e:	bf08      	it	eq
 8006460:	68ec      	ldreq	r4, [r5, #12]
 8006462:	e7d5      	b.n	8006410 <_puts_r+0x24>
 8006464:	4621      	mov	r1, r4
 8006466:	4628      	mov	r0, r5
 8006468:	f000 f888 	bl	800657c <__swsetup_r>
 800646c:	2800      	cmp	r0, #0
 800646e:	d0dd      	beq.n	800642c <_puts_r+0x40>
 8006470:	f04f 35ff 	mov.w	r5, #4294967295
 8006474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006476:	07da      	lsls	r2, r3, #31
 8006478:	d405      	bmi.n	8006486 <_puts_r+0x9a>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	059b      	lsls	r3, r3, #22
 800647e:	d402      	bmi.n	8006486 <_puts_r+0x9a>
 8006480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006482:	f001 f8a1 	bl	80075c8 <__retarget_lock_release_recursive>
 8006486:	4628      	mov	r0, r5
 8006488:	bd70      	pop	{r4, r5, r6, pc}
 800648a:	2b00      	cmp	r3, #0
 800648c:	da04      	bge.n	8006498 <_puts_r+0xac>
 800648e:	69a2      	ldr	r2, [r4, #24]
 8006490:	429a      	cmp	r2, r3
 8006492:	dc06      	bgt.n	80064a2 <_puts_r+0xb6>
 8006494:	290a      	cmp	r1, #10
 8006496:	d004      	beq.n	80064a2 <_puts_r+0xb6>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	6022      	str	r2, [r4, #0]
 800649e:	7019      	strb	r1, [r3, #0]
 80064a0:	e7c5      	b.n	800642e <_puts_r+0x42>
 80064a2:	4622      	mov	r2, r4
 80064a4:	4628      	mov	r0, r5
 80064a6:	f000 f817 	bl	80064d8 <__swbuf_r>
 80064aa:	3001      	adds	r0, #1
 80064ac:	d1bf      	bne.n	800642e <_puts_r+0x42>
 80064ae:	e7df      	b.n	8006470 <_puts_r+0x84>
 80064b0:	6823      	ldr	r3, [r4, #0]
 80064b2:	250a      	movs	r5, #10
 80064b4:	1c5a      	adds	r2, r3, #1
 80064b6:	6022      	str	r2, [r4, #0]
 80064b8:	701d      	strb	r5, [r3, #0]
 80064ba:	e7db      	b.n	8006474 <_puts_r+0x88>
 80064bc:	08009288 	.word	0x08009288
 80064c0:	080092a8 	.word	0x080092a8
 80064c4:	08009268 	.word	0x08009268

080064c8 <puts>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <puts+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f7ff bf8d 	b.w	80063ec <_puts_r>
 80064d2:	bf00      	nop
 80064d4:	24000010 	.word	0x24000010

080064d8 <__swbuf_r>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	460e      	mov	r6, r1
 80064dc:	4614      	mov	r4, r2
 80064de:	4605      	mov	r5, r0
 80064e0:	b118      	cbz	r0, 80064ea <__swbuf_r+0x12>
 80064e2:	6983      	ldr	r3, [r0, #24]
 80064e4:	b90b      	cbnz	r3, 80064ea <__swbuf_r+0x12>
 80064e6:	f000 ffcb 	bl	8007480 <__sinit>
 80064ea:	4b21      	ldr	r3, [pc, #132]	; (8006570 <__swbuf_r+0x98>)
 80064ec:	429c      	cmp	r4, r3
 80064ee:	d12b      	bne.n	8006548 <__swbuf_r+0x70>
 80064f0:	686c      	ldr	r4, [r5, #4]
 80064f2:	69a3      	ldr	r3, [r4, #24]
 80064f4:	60a3      	str	r3, [r4, #8]
 80064f6:	89a3      	ldrh	r3, [r4, #12]
 80064f8:	071a      	lsls	r2, r3, #28
 80064fa:	d52f      	bpl.n	800655c <__swbuf_r+0x84>
 80064fc:	6923      	ldr	r3, [r4, #16]
 80064fe:	b36b      	cbz	r3, 800655c <__swbuf_r+0x84>
 8006500:	6923      	ldr	r3, [r4, #16]
 8006502:	6820      	ldr	r0, [r4, #0]
 8006504:	1ac0      	subs	r0, r0, r3
 8006506:	6963      	ldr	r3, [r4, #20]
 8006508:	b2f6      	uxtb	r6, r6
 800650a:	4283      	cmp	r3, r0
 800650c:	4637      	mov	r7, r6
 800650e:	dc04      	bgt.n	800651a <__swbuf_r+0x42>
 8006510:	4621      	mov	r1, r4
 8006512:	4628      	mov	r0, r5
 8006514:	f000 ff20 	bl	8007358 <_fflush_r>
 8006518:	bb30      	cbnz	r0, 8006568 <__swbuf_r+0x90>
 800651a:	68a3      	ldr	r3, [r4, #8]
 800651c:	3b01      	subs	r3, #1
 800651e:	60a3      	str	r3, [r4, #8]
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	6022      	str	r2, [r4, #0]
 8006526:	701e      	strb	r6, [r3, #0]
 8006528:	6963      	ldr	r3, [r4, #20]
 800652a:	3001      	adds	r0, #1
 800652c:	4283      	cmp	r3, r0
 800652e:	d004      	beq.n	800653a <__swbuf_r+0x62>
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	07db      	lsls	r3, r3, #31
 8006534:	d506      	bpl.n	8006544 <__swbuf_r+0x6c>
 8006536:	2e0a      	cmp	r6, #10
 8006538:	d104      	bne.n	8006544 <__swbuf_r+0x6c>
 800653a:	4621      	mov	r1, r4
 800653c:	4628      	mov	r0, r5
 800653e:	f000 ff0b 	bl	8007358 <_fflush_r>
 8006542:	b988      	cbnz	r0, 8006568 <__swbuf_r+0x90>
 8006544:	4638      	mov	r0, r7
 8006546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006548:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <__swbuf_r+0x9c>)
 800654a:	429c      	cmp	r4, r3
 800654c:	d101      	bne.n	8006552 <__swbuf_r+0x7a>
 800654e:	68ac      	ldr	r4, [r5, #8]
 8006550:	e7cf      	b.n	80064f2 <__swbuf_r+0x1a>
 8006552:	4b09      	ldr	r3, [pc, #36]	; (8006578 <__swbuf_r+0xa0>)
 8006554:	429c      	cmp	r4, r3
 8006556:	bf08      	it	eq
 8006558:	68ec      	ldreq	r4, [r5, #12]
 800655a:	e7ca      	b.n	80064f2 <__swbuf_r+0x1a>
 800655c:	4621      	mov	r1, r4
 800655e:	4628      	mov	r0, r5
 8006560:	f000 f80c 	bl	800657c <__swsetup_r>
 8006564:	2800      	cmp	r0, #0
 8006566:	d0cb      	beq.n	8006500 <__swbuf_r+0x28>
 8006568:	f04f 37ff 	mov.w	r7, #4294967295
 800656c:	e7ea      	b.n	8006544 <__swbuf_r+0x6c>
 800656e:	bf00      	nop
 8006570:	08009288 	.word	0x08009288
 8006574:	080092a8 	.word	0x080092a8
 8006578:	08009268 	.word	0x08009268

0800657c <__swsetup_r>:
 800657c:	4b32      	ldr	r3, [pc, #200]	; (8006648 <__swsetup_r+0xcc>)
 800657e:	b570      	push	{r4, r5, r6, lr}
 8006580:	681d      	ldr	r5, [r3, #0]
 8006582:	4606      	mov	r6, r0
 8006584:	460c      	mov	r4, r1
 8006586:	b125      	cbz	r5, 8006592 <__swsetup_r+0x16>
 8006588:	69ab      	ldr	r3, [r5, #24]
 800658a:	b913      	cbnz	r3, 8006592 <__swsetup_r+0x16>
 800658c:	4628      	mov	r0, r5
 800658e:	f000 ff77 	bl	8007480 <__sinit>
 8006592:	4b2e      	ldr	r3, [pc, #184]	; (800664c <__swsetup_r+0xd0>)
 8006594:	429c      	cmp	r4, r3
 8006596:	d10f      	bne.n	80065b8 <__swsetup_r+0x3c>
 8006598:	686c      	ldr	r4, [r5, #4]
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065a0:	0719      	lsls	r1, r3, #28
 80065a2:	d42c      	bmi.n	80065fe <__swsetup_r+0x82>
 80065a4:	06dd      	lsls	r5, r3, #27
 80065a6:	d411      	bmi.n	80065cc <__swsetup_r+0x50>
 80065a8:	2309      	movs	r3, #9
 80065aa:	6033      	str	r3, [r6, #0]
 80065ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065b0:	81a3      	strh	r3, [r4, #12]
 80065b2:	f04f 30ff 	mov.w	r0, #4294967295
 80065b6:	e03e      	b.n	8006636 <__swsetup_r+0xba>
 80065b8:	4b25      	ldr	r3, [pc, #148]	; (8006650 <__swsetup_r+0xd4>)
 80065ba:	429c      	cmp	r4, r3
 80065bc:	d101      	bne.n	80065c2 <__swsetup_r+0x46>
 80065be:	68ac      	ldr	r4, [r5, #8]
 80065c0:	e7eb      	b.n	800659a <__swsetup_r+0x1e>
 80065c2:	4b24      	ldr	r3, [pc, #144]	; (8006654 <__swsetup_r+0xd8>)
 80065c4:	429c      	cmp	r4, r3
 80065c6:	bf08      	it	eq
 80065c8:	68ec      	ldreq	r4, [r5, #12]
 80065ca:	e7e6      	b.n	800659a <__swsetup_r+0x1e>
 80065cc:	0758      	lsls	r0, r3, #29
 80065ce:	d512      	bpl.n	80065f6 <__swsetup_r+0x7a>
 80065d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065d2:	b141      	cbz	r1, 80065e6 <__swsetup_r+0x6a>
 80065d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065d8:	4299      	cmp	r1, r3
 80065da:	d002      	beq.n	80065e2 <__swsetup_r+0x66>
 80065dc:	4630      	mov	r0, r6
 80065de:	f001 fc09 	bl	8007df4 <_free_r>
 80065e2:	2300      	movs	r3, #0
 80065e4:	6363      	str	r3, [r4, #52]	; 0x34
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065ec:	81a3      	strh	r3, [r4, #12]
 80065ee:	2300      	movs	r3, #0
 80065f0:	6063      	str	r3, [r4, #4]
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	89a3      	ldrh	r3, [r4, #12]
 80065f8:	f043 0308 	orr.w	r3, r3, #8
 80065fc:	81a3      	strh	r3, [r4, #12]
 80065fe:	6923      	ldr	r3, [r4, #16]
 8006600:	b94b      	cbnz	r3, 8006616 <__swsetup_r+0x9a>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800660c:	d003      	beq.n	8006616 <__swsetup_r+0x9a>
 800660e:	4621      	mov	r1, r4
 8006610:	4630      	mov	r0, r6
 8006612:	f000 ffff 	bl	8007614 <__smakebuf_r>
 8006616:	89a0      	ldrh	r0, [r4, #12]
 8006618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800661c:	f010 0301 	ands.w	r3, r0, #1
 8006620:	d00a      	beq.n	8006638 <__swsetup_r+0xbc>
 8006622:	2300      	movs	r3, #0
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	6963      	ldr	r3, [r4, #20]
 8006628:	425b      	negs	r3, r3
 800662a:	61a3      	str	r3, [r4, #24]
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	b943      	cbnz	r3, 8006642 <__swsetup_r+0xc6>
 8006630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006634:	d1ba      	bne.n	80065ac <__swsetup_r+0x30>
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	0781      	lsls	r1, r0, #30
 800663a:	bf58      	it	pl
 800663c:	6963      	ldrpl	r3, [r4, #20]
 800663e:	60a3      	str	r3, [r4, #8]
 8006640:	e7f4      	b.n	800662c <__swsetup_r+0xb0>
 8006642:	2000      	movs	r0, #0
 8006644:	e7f7      	b.n	8006636 <__swsetup_r+0xba>
 8006646:	bf00      	nop
 8006648:	24000010 	.word	0x24000010
 800664c:	08009288 	.word	0x08009288
 8006650:	080092a8 	.word	0x080092a8
 8006654:	08009268 	.word	0x08009268

08006658 <quorem>:
 8006658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	6903      	ldr	r3, [r0, #16]
 800665e:	690c      	ldr	r4, [r1, #16]
 8006660:	42a3      	cmp	r3, r4
 8006662:	4607      	mov	r7, r0
 8006664:	f2c0 8081 	blt.w	800676a <quorem+0x112>
 8006668:	3c01      	subs	r4, #1
 800666a:	f101 0814 	add.w	r8, r1, #20
 800666e:	f100 0514 	add.w	r5, r0, #20
 8006672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800667c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006680:	3301      	adds	r3, #1
 8006682:	429a      	cmp	r2, r3
 8006684:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006688:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800668c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006690:	d331      	bcc.n	80066f6 <quorem+0x9e>
 8006692:	f04f 0e00 	mov.w	lr, #0
 8006696:	4640      	mov	r0, r8
 8006698:	46ac      	mov	ip, r5
 800669a:	46f2      	mov	sl, lr
 800669c:	f850 2b04 	ldr.w	r2, [r0], #4
 80066a0:	b293      	uxth	r3, r2
 80066a2:	fb06 e303 	mla	r3, r6, r3, lr
 80066a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	ebaa 0303 	sub.w	r3, sl, r3
 80066b0:	f8dc a000 	ldr.w	sl, [ip]
 80066b4:	0c12      	lsrs	r2, r2, #16
 80066b6:	fa13 f38a 	uxtah	r3, r3, sl
 80066ba:	fb06 e202 	mla	r2, r6, r2, lr
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	9b00      	ldr	r3, [sp, #0]
 80066c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066c6:	b292      	uxth	r2, r2
 80066c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80066d4:	4581      	cmp	r9, r0
 80066d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066da:	f84c 3b04 	str.w	r3, [ip], #4
 80066de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066e2:	d2db      	bcs.n	800669c <quorem+0x44>
 80066e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80066e8:	b92b      	cbnz	r3, 80066f6 <quorem+0x9e>
 80066ea:	9b01      	ldr	r3, [sp, #4]
 80066ec:	3b04      	subs	r3, #4
 80066ee:	429d      	cmp	r5, r3
 80066f0:	461a      	mov	r2, r3
 80066f2:	d32e      	bcc.n	8006752 <quorem+0xfa>
 80066f4:	613c      	str	r4, [r7, #16]
 80066f6:	4638      	mov	r0, r7
 80066f8:	f001 fa64 	bl	8007bc4 <__mcmp>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	db24      	blt.n	800674a <quorem+0xf2>
 8006700:	3601      	adds	r6, #1
 8006702:	4628      	mov	r0, r5
 8006704:	f04f 0c00 	mov.w	ip, #0
 8006708:	f858 2b04 	ldr.w	r2, [r8], #4
 800670c:	f8d0 e000 	ldr.w	lr, [r0]
 8006710:	b293      	uxth	r3, r2
 8006712:	ebac 0303 	sub.w	r3, ip, r3
 8006716:	0c12      	lsrs	r2, r2, #16
 8006718:	fa13 f38e 	uxtah	r3, r3, lr
 800671c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006720:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006724:	b29b      	uxth	r3, r3
 8006726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800672a:	45c1      	cmp	r9, r8
 800672c:	f840 3b04 	str.w	r3, [r0], #4
 8006730:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006734:	d2e8      	bcs.n	8006708 <quorem+0xb0>
 8006736:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800673a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800673e:	b922      	cbnz	r2, 800674a <quorem+0xf2>
 8006740:	3b04      	subs	r3, #4
 8006742:	429d      	cmp	r5, r3
 8006744:	461a      	mov	r2, r3
 8006746:	d30a      	bcc.n	800675e <quorem+0x106>
 8006748:	613c      	str	r4, [r7, #16]
 800674a:	4630      	mov	r0, r6
 800674c:	b003      	add	sp, #12
 800674e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006752:	6812      	ldr	r2, [r2, #0]
 8006754:	3b04      	subs	r3, #4
 8006756:	2a00      	cmp	r2, #0
 8006758:	d1cc      	bne.n	80066f4 <quorem+0x9c>
 800675a:	3c01      	subs	r4, #1
 800675c:	e7c7      	b.n	80066ee <quorem+0x96>
 800675e:	6812      	ldr	r2, [r2, #0]
 8006760:	3b04      	subs	r3, #4
 8006762:	2a00      	cmp	r2, #0
 8006764:	d1f0      	bne.n	8006748 <quorem+0xf0>
 8006766:	3c01      	subs	r4, #1
 8006768:	e7eb      	b.n	8006742 <quorem+0xea>
 800676a:	2000      	movs	r0, #0
 800676c:	e7ee      	b.n	800674c <quorem+0xf4>
	...

08006770 <_dtoa_r>:
 8006770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006774:	ed2d 8b02 	vpush	{d8}
 8006778:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800677a:	b091      	sub	sp, #68	; 0x44
 800677c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006780:	ec59 8b10 	vmov	r8, r9, d0
 8006784:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006786:	9106      	str	r1, [sp, #24]
 8006788:	4606      	mov	r6, r0
 800678a:	9208      	str	r2, [sp, #32]
 800678c:	930c      	str	r3, [sp, #48]	; 0x30
 800678e:	b975      	cbnz	r5, 80067ae <_dtoa_r+0x3e>
 8006790:	2010      	movs	r0, #16
 8006792:	f000 ff7f 	bl	8007694 <malloc>
 8006796:	4602      	mov	r2, r0
 8006798:	6270      	str	r0, [r6, #36]	; 0x24
 800679a:	b920      	cbnz	r0, 80067a6 <_dtoa_r+0x36>
 800679c:	4baa      	ldr	r3, [pc, #680]	; (8006a48 <_dtoa_r+0x2d8>)
 800679e:	21ea      	movs	r1, #234	; 0xea
 80067a0:	48aa      	ldr	r0, [pc, #680]	; (8006a4c <_dtoa_r+0x2dc>)
 80067a2:	f001 fc6d 	bl	8008080 <__assert_func>
 80067a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067aa:	6005      	str	r5, [r0, #0]
 80067ac:	60c5      	str	r5, [r0, #12]
 80067ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80067b0:	6819      	ldr	r1, [r3, #0]
 80067b2:	b151      	cbz	r1, 80067ca <_dtoa_r+0x5a>
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	604a      	str	r2, [r1, #4]
 80067b8:	2301      	movs	r3, #1
 80067ba:	4093      	lsls	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]
 80067be:	4630      	mov	r0, r6
 80067c0:	f000 ffbe 	bl	8007740 <_Bfree>
 80067c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f1b9 0300 	subs.w	r3, r9, #0
 80067ce:	bfbb      	ittet	lt
 80067d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80067d4:	9303      	strlt	r3, [sp, #12]
 80067d6:	2300      	movge	r3, #0
 80067d8:	2201      	movlt	r2, #1
 80067da:	bfac      	ite	ge
 80067dc:	6023      	strge	r3, [r4, #0]
 80067de:	6022      	strlt	r2, [r4, #0]
 80067e0:	4b9b      	ldr	r3, [pc, #620]	; (8006a50 <_dtoa_r+0x2e0>)
 80067e2:	9c03      	ldr	r4, [sp, #12]
 80067e4:	43a3      	bics	r3, r4
 80067e6:	d11c      	bne.n	8006822 <_dtoa_r+0xb2>
 80067e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80067f4:	ea53 0308 	orrs.w	r3, r3, r8
 80067f8:	f000 84fd 	beq.w	80071f6 <_dtoa_r+0xa86>
 80067fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80067fe:	b963      	cbnz	r3, 800681a <_dtoa_r+0xaa>
 8006800:	4b94      	ldr	r3, [pc, #592]	; (8006a54 <_dtoa_r+0x2e4>)
 8006802:	e01f      	b.n	8006844 <_dtoa_r+0xd4>
 8006804:	4b94      	ldr	r3, [pc, #592]	; (8006a58 <_dtoa_r+0x2e8>)
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	3308      	adds	r3, #8
 800680a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	9801      	ldr	r0, [sp, #4]
 8006810:	b011      	add	sp, #68	; 0x44
 8006812:	ecbd 8b02 	vpop	{d8}
 8006816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800681a:	4b8e      	ldr	r3, [pc, #568]	; (8006a54 <_dtoa_r+0x2e4>)
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	3303      	adds	r3, #3
 8006820:	e7f3      	b.n	800680a <_dtoa_r+0x9a>
 8006822:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006826:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800682a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682e:	d10b      	bne.n	8006848 <_dtoa_r+0xd8>
 8006830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006832:	2301      	movs	r3, #1
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 84d9 	beq.w	80071f0 <_dtoa_r+0xa80>
 800683e:	4887      	ldr	r0, [pc, #540]	; (8006a5c <_dtoa_r+0x2ec>)
 8006840:	6018      	str	r0, [r3, #0]
 8006842:	1e43      	subs	r3, r0, #1
 8006844:	9301      	str	r3, [sp, #4]
 8006846:	e7e2      	b.n	800680e <_dtoa_r+0x9e>
 8006848:	a90f      	add	r1, sp, #60	; 0x3c
 800684a:	aa0e      	add	r2, sp, #56	; 0x38
 800684c:	4630      	mov	r0, r6
 800684e:	eeb0 0b48 	vmov.f64	d0, d8
 8006852:	f001 fa5d 	bl	8007d10 <__d2b>
 8006856:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800685a:	4605      	mov	r5, r0
 800685c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800685e:	2900      	cmp	r1, #0
 8006860:	d046      	beq.n	80068f0 <_dtoa_r+0x180>
 8006862:	ee18 4a90 	vmov	r4, s17
 8006866:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800686a:	ec53 2b18 	vmov	r2, r3, d8
 800686e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8006872:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006876:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800687a:	2400      	movs	r4, #0
 800687c:	ec43 2b16 	vmov	d6, r2, r3
 8006880:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006884:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006a30 <_dtoa_r+0x2c0>
 8006888:	ee36 7b47 	vsub.f64	d7, d6, d7
 800688c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006a38 <_dtoa_r+0x2c8>
 8006890:	eea7 6b05 	vfma.f64	d6, d7, d5
 8006894:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006a40 <_dtoa_r+0x2d0>
 8006898:	ee07 1a90 	vmov	s15, r1
 800689c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80068a0:	eeb0 7b46 	vmov.f64	d7, d6
 80068a4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80068a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80068ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80068b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b4:	ee16 ba90 	vmov	fp, s13
 80068b8:	940a      	str	r4, [sp, #40]	; 0x28
 80068ba:	d508      	bpl.n	80068ce <_dtoa_r+0x15e>
 80068bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80068c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80068c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c8:	bf18      	it	ne
 80068ca:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80068ce:	f1bb 0f16 	cmp.w	fp, #22
 80068d2:	d82f      	bhi.n	8006934 <_dtoa_r+0x1c4>
 80068d4:	4b62      	ldr	r3, [pc, #392]	; (8006a60 <_dtoa_r+0x2f0>)
 80068d6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068da:	ed93 7b00 	vldr	d7, [r3]
 80068de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80068e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e6:	d501      	bpl.n	80068ec <_dtoa_r+0x17c>
 80068e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80068ec:	2300      	movs	r3, #0
 80068ee:	e022      	b.n	8006936 <_dtoa_r+0x1c6>
 80068f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068f2:	4401      	add	r1, r0
 80068f4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	bfc1      	itttt	gt
 80068fc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006900:	fa04 f303 	lslgt.w	r3, r4, r3
 8006904:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006908:	fa28 f804 	lsrgt.w	r8, r8, r4
 800690c:	bfd6      	itet	le
 800690e:	f1c3 0320 	rsble	r3, r3, #32
 8006912:	ea43 0808 	orrgt.w	r8, r3, r8
 8006916:	fa08 f803 	lslle.w	r8, r8, r3
 800691a:	ee07 8a90 	vmov	s15, r8
 800691e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006922:	3901      	subs	r1, #1
 8006924:	ee17 4a90 	vmov	r4, s15
 8006928:	ec53 2b17 	vmov	r2, r3, d7
 800692c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006930:	2401      	movs	r4, #1
 8006932:	e7a3      	b.n	800687c <_dtoa_r+0x10c>
 8006934:	2301      	movs	r3, #1
 8006936:	930b      	str	r3, [sp, #44]	; 0x2c
 8006938:	1a43      	subs	r3, r0, r1
 800693a:	1e5a      	subs	r2, r3, #1
 800693c:	bf45      	ittet	mi
 800693e:	f1c3 0301 	rsbmi	r3, r3, #1
 8006942:	9304      	strmi	r3, [sp, #16]
 8006944:	2300      	movpl	r3, #0
 8006946:	2300      	movmi	r3, #0
 8006948:	9205      	str	r2, [sp, #20]
 800694a:	bf54      	ite	pl
 800694c:	9304      	strpl	r3, [sp, #16]
 800694e:	9305      	strmi	r3, [sp, #20]
 8006950:	f1bb 0f00 	cmp.w	fp, #0
 8006954:	db18      	blt.n	8006988 <_dtoa_r+0x218>
 8006956:	9b05      	ldr	r3, [sp, #20]
 8006958:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800695c:	445b      	add	r3, fp
 800695e:	9305      	str	r3, [sp, #20]
 8006960:	2300      	movs	r3, #0
 8006962:	9a06      	ldr	r2, [sp, #24]
 8006964:	2a09      	cmp	r2, #9
 8006966:	d849      	bhi.n	80069fc <_dtoa_r+0x28c>
 8006968:	2a05      	cmp	r2, #5
 800696a:	bfc4      	itt	gt
 800696c:	3a04      	subgt	r2, #4
 800696e:	9206      	strgt	r2, [sp, #24]
 8006970:	9a06      	ldr	r2, [sp, #24]
 8006972:	f1a2 0202 	sub.w	r2, r2, #2
 8006976:	bfcc      	ite	gt
 8006978:	2400      	movgt	r4, #0
 800697a:	2401      	movle	r4, #1
 800697c:	2a03      	cmp	r2, #3
 800697e:	d848      	bhi.n	8006a12 <_dtoa_r+0x2a2>
 8006980:	e8df f002 	tbb	[pc, r2]
 8006984:	3a2c2e0b 	.word	0x3a2c2e0b
 8006988:	9b04      	ldr	r3, [sp, #16]
 800698a:	2200      	movs	r2, #0
 800698c:	eba3 030b 	sub.w	r3, r3, fp
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9209      	str	r2, [sp, #36]	; 0x24
 8006994:	f1cb 0300 	rsb	r3, fp, #0
 8006998:	e7e3      	b.n	8006962 <_dtoa_r+0x1f2>
 800699a:	2200      	movs	r2, #0
 800699c:	9207      	str	r2, [sp, #28]
 800699e:	9a08      	ldr	r2, [sp, #32]
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	dc39      	bgt.n	8006a18 <_dtoa_r+0x2a8>
 80069a4:	f04f 0a01 	mov.w	sl, #1
 80069a8:	46d1      	mov	r9, sl
 80069aa:	4652      	mov	r2, sl
 80069ac:	f8cd a020 	str.w	sl, [sp, #32]
 80069b0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80069b2:	2100      	movs	r1, #0
 80069b4:	6079      	str	r1, [r7, #4]
 80069b6:	2004      	movs	r0, #4
 80069b8:	f100 0c14 	add.w	ip, r0, #20
 80069bc:	4594      	cmp	ip, r2
 80069be:	6879      	ldr	r1, [r7, #4]
 80069c0:	d92f      	bls.n	8006a22 <_dtoa_r+0x2b2>
 80069c2:	4630      	mov	r0, r6
 80069c4:	930d      	str	r3, [sp, #52]	; 0x34
 80069c6:	f000 fe7b 	bl	80076c0 <_Balloc>
 80069ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069cc:	9001      	str	r0, [sp, #4]
 80069ce:	4602      	mov	r2, r0
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d149      	bne.n	8006a68 <_dtoa_r+0x2f8>
 80069d4:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <_dtoa_r+0x2f4>)
 80069d6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069da:	e6e1      	b.n	80067a0 <_dtoa_r+0x30>
 80069dc:	2201      	movs	r2, #1
 80069de:	e7dd      	b.n	800699c <_dtoa_r+0x22c>
 80069e0:	2200      	movs	r2, #0
 80069e2:	9207      	str	r2, [sp, #28]
 80069e4:	9a08      	ldr	r2, [sp, #32]
 80069e6:	eb0b 0a02 	add.w	sl, fp, r2
 80069ea:	f10a 0901 	add.w	r9, sl, #1
 80069ee:	464a      	mov	r2, r9
 80069f0:	2a01      	cmp	r2, #1
 80069f2:	bfb8      	it	lt
 80069f4:	2201      	movlt	r2, #1
 80069f6:	e7db      	b.n	80069b0 <_dtoa_r+0x240>
 80069f8:	2201      	movs	r2, #1
 80069fa:	e7f2      	b.n	80069e2 <_dtoa_r+0x272>
 80069fc:	2401      	movs	r4, #1
 80069fe:	2200      	movs	r2, #0
 8006a00:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006a04:	f04f 3aff 	mov.w	sl, #4294967295
 8006a08:	2100      	movs	r1, #0
 8006a0a:	46d1      	mov	r9, sl
 8006a0c:	2212      	movs	r2, #18
 8006a0e:	9108      	str	r1, [sp, #32]
 8006a10:	e7ce      	b.n	80069b0 <_dtoa_r+0x240>
 8006a12:	2201      	movs	r2, #1
 8006a14:	9207      	str	r2, [sp, #28]
 8006a16:	e7f5      	b.n	8006a04 <_dtoa_r+0x294>
 8006a18:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a1c:	46d1      	mov	r9, sl
 8006a1e:	4652      	mov	r2, sl
 8006a20:	e7c6      	b.n	80069b0 <_dtoa_r+0x240>
 8006a22:	3101      	adds	r1, #1
 8006a24:	6079      	str	r1, [r7, #4]
 8006a26:	0040      	lsls	r0, r0, #1
 8006a28:	e7c6      	b.n	80069b8 <_dtoa_r+0x248>
 8006a2a:	bf00      	nop
 8006a2c:	f3af 8000 	nop.w
 8006a30:	636f4361 	.word	0x636f4361
 8006a34:	3fd287a7 	.word	0x3fd287a7
 8006a38:	8b60c8b3 	.word	0x8b60c8b3
 8006a3c:	3fc68a28 	.word	0x3fc68a28
 8006a40:	509f79fb 	.word	0x509f79fb
 8006a44:	3fd34413 	.word	0x3fd34413
 8006a48:	080091e5 	.word	0x080091e5
 8006a4c:	080091fc 	.word	0x080091fc
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	080091e1 	.word	0x080091e1
 8006a58:	080091d8 	.word	0x080091d8
 8006a5c:	080091b5 	.word	0x080091b5
 8006a60:	08009350 	.word	0x08009350
 8006a64:	08009257 	.word	0x08009257
 8006a68:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8006a6a:	9901      	ldr	r1, [sp, #4]
 8006a6c:	6011      	str	r1, [r2, #0]
 8006a6e:	f1b9 0f0e 	cmp.w	r9, #14
 8006a72:	d86c      	bhi.n	8006b4e <_dtoa_r+0x3de>
 8006a74:	2c00      	cmp	r4, #0
 8006a76:	d06a      	beq.n	8006b4e <_dtoa_r+0x3de>
 8006a78:	f1bb 0f00 	cmp.w	fp, #0
 8006a7c:	f340 80a0 	ble.w	8006bc0 <_dtoa_r+0x450>
 8006a80:	49c1      	ldr	r1, [pc, #772]	; (8006d88 <_dtoa_r+0x618>)
 8006a82:	f00b 020f 	and.w	r2, fp, #15
 8006a86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8006a8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006a8e:	ed92 7b00 	vldr	d7, [r2]
 8006a92:	ea4f 112b 	mov.w	r1, fp, asr #4
 8006a96:	f000 8087 	beq.w	8006ba8 <_dtoa_r+0x438>
 8006a9a:	4abc      	ldr	r2, [pc, #752]	; (8006d8c <_dtoa_r+0x61c>)
 8006a9c:	ed92 6b08 	vldr	d6, [r2, #32]
 8006aa0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8006aa4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006aa8:	f001 010f 	and.w	r1, r1, #15
 8006aac:	2203      	movs	r2, #3
 8006aae:	48b7      	ldr	r0, [pc, #732]	; (8006d8c <_dtoa_r+0x61c>)
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	d17b      	bne.n	8006bac <_dtoa_r+0x43c>
 8006ab4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006ab8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006abc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ac2:	2900      	cmp	r1, #0
 8006ac4:	f000 80a2 	beq.w	8006c0c <_dtoa_r+0x49c>
 8006ac8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006acc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ad0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad8:	f140 8098 	bpl.w	8006c0c <_dtoa_r+0x49c>
 8006adc:	f1b9 0f00 	cmp.w	r9, #0
 8006ae0:	f000 8094 	beq.w	8006c0c <_dtoa_r+0x49c>
 8006ae4:	f1ba 0f00 	cmp.w	sl, #0
 8006ae8:	dd2f      	ble.n	8006b4a <_dtoa_r+0x3da>
 8006aea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006aee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006af2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006af6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006afa:	3201      	adds	r2, #1
 8006afc:	4650      	mov	r0, sl
 8006afe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006b02:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006b06:	ee07 2a90 	vmov	s15, r2
 8006b0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006b0e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006b12:	ee15 4a90 	vmov	r4, s11
 8006b16:	ec52 1b15 	vmov	r1, r2, d5
 8006b1a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d177      	bne.n	8006c12 <_dtoa_r+0x4a2>
 8006b22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006b26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b2a:	ec42 1b17 	vmov	d7, r1, r2
 8006b2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b36:	f300 8263 	bgt.w	8007000 <_dtoa_r+0x890>
 8006b3a:	eeb1 7b47 	vneg.f64	d7, d7
 8006b3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b46:	f100 8258 	bmi.w	8006ffa <_dtoa_r+0x88a>
 8006b4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006b4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b50:	2a00      	cmp	r2, #0
 8006b52:	f2c0 811d 	blt.w	8006d90 <_dtoa_r+0x620>
 8006b56:	f1bb 0f0e 	cmp.w	fp, #14
 8006b5a:	f300 8119 	bgt.w	8006d90 <_dtoa_r+0x620>
 8006b5e:	4b8a      	ldr	r3, [pc, #552]	; (8006d88 <_dtoa_r+0x618>)
 8006b60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006b64:	ed93 6b00 	vldr	d6, [r3]
 8006b68:	9b08      	ldr	r3, [sp, #32]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f280 80b7 	bge.w	8006cde <_dtoa_r+0x56e>
 8006b70:	f1b9 0f00 	cmp.w	r9, #0
 8006b74:	f300 80b3 	bgt.w	8006cde <_dtoa_r+0x56e>
 8006b78:	f040 823f 	bne.w	8006ffa <_dtoa_r+0x88a>
 8006b7c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006b80:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b90:	464c      	mov	r4, r9
 8006b92:	464f      	mov	r7, r9
 8006b94:	f280 8215 	bge.w	8006fc2 <_dtoa_r+0x852>
 8006b98:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b9c:	2331      	movs	r3, #49	; 0x31
 8006b9e:	f808 3b01 	strb.w	r3, [r8], #1
 8006ba2:	f10b 0b01 	add.w	fp, fp, #1
 8006ba6:	e211      	b.n	8006fcc <_dtoa_r+0x85c>
 8006ba8:	2202      	movs	r2, #2
 8006baa:	e780      	b.n	8006aae <_dtoa_r+0x33e>
 8006bac:	07cc      	lsls	r4, r1, #31
 8006bae:	d504      	bpl.n	8006bba <_dtoa_r+0x44a>
 8006bb0:	ed90 6b00 	vldr	d6, [r0]
 8006bb4:	3201      	adds	r2, #1
 8006bb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006bba:	1049      	asrs	r1, r1, #1
 8006bbc:	3008      	adds	r0, #8
 8006bbe:	e777      	b.n	8006ab0 <_dtoa_r+0x340>
 8006bc0:	d022      	beq.n	8006c08 <_dtoa_r+0x498>
 8006bc2:	f1cb 0100 	rsb	r1, fp, #0
 8006bc6:	4a70      	ldr	r2, [pc, #448]	; (8006d88 <_dtoa_r+0x618>)
 8006bc8:	f001 000f 	and.w	r0, r1, #15
 8006bcc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006bd0:	ed92 7b00 	vldr	d7, [r2]
 8006bd4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006bd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006bdc:	486b      	ldr	r0, [pc, #428]	; (8006d8c <_dtoa_r+0x61c>)
 8006bde:	1109      	asrs	r1, r1, #4
 8006be0:	2400      	movs	r4, #0
 8006be2:	2202      	movs	r2, #2
 8006be4:	b929      	cbnz	r1, 8006bf2 <_dtoa_r+0x482>
 8006be6:	2c00      	cmp	r4, #0
 8006be8:	f43f af6a 	beq.w	8006ac0 <_dtoa_r+0x350>
 8006bec:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006bf0:	e766      	b.n	8006ac0 <_dtoa_r+0x350>
 8006bf2:	07cf      	lsls	r7, r1, #31
 8006bf4:	d505      	bpl.n	8006c02 <_dtoa_r+0x492>
 8006bf6:	ed90 6b00 	vldr	d6, [r0]
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	2401      	movs	r4, #1
 8006bfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c02:	1049      	asrs	r1, r1, #1
 8006c04:	3008      	adds	r0, #8
 8006c06:	e7ed      	b.n	8006be4 <_dtoa_r+0x474>
 8006c08:	2202      	movs	r2, #2
 8006c0a:	e759      	b.n	8006ac0 <_dtoa_r+0x350>
 8006c0c:	465f      	mov	r7, fp
 8006c0e:	4648      	mov	r0, r9
 8006c10:	e775      	b.n	8006afe <_dtoa_r+0x38e>
 8006c12:	ec42 1b17 	vmov	d7, r1, r2
 8006c16:	4a5c      	ldr	r2, [pc, #368]	; (8006d88 <_dtoa_r+0x618>)
 8006c18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006c1c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006c20:	9a01      	ldr	r2, [sp, #4]
 8006c22:	1814      	adds	r4, r2, r0
 8006c24:	9a07      	ldr	r2, [sp, #28]
 8006c26:	b352      	cbz	r2, 8006c7e <_dtoa_r+0x50e>
 8006c28:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006c2c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006c30:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c34:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006c38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006c3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006c40:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006c44:	ee14 2a90 	vmov	r2, s9
 8006c48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006c4c:	3230      	adds	r2, #48	; 0x30
 8006c4e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006c52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c5a:	f808 2b01 	strb.w	r2, [r8], #1
 8006c5e:	d439      	bmi.n	8006cd4 <_dtoa_r+0x564>
 8006c60:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006c64:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c6c:	d472      	bmi.n	8006d54 <_dtoa_r+0x5e4>
 8006c6e:	45a0      	cmp	r8, r4
 8006c70:	f43f af6b 	beq.w	8006b4a <_dtoa_r+0x3da>
 8006c74:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006c78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006c7c:	e7e0      	b.n	8006c40 <_dtoa_r+0x4d0>
 8006c7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006c82:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006c86:	4621      	mov	r1, r4
 8006c88:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006c8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006c90:	ee14 2a90 	vmov	r2, s9
 8006c94:	3230      	adds	r2, #48	; 0x30
 8006c96:	f808 2b01 	strb.w	r2, [r8], #1
 8006c9a:	45a0      	cmp	r8, r4
 8006c9c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006ca0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006ca4:	d118      	bne.n	8006cd8 <_dtoa_r+0x568>
 8006ca6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006caa:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006cae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb6:	dc4d      	bgt.n	8006d54 <_dtoa_r+0x5e4>
 8006cb8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006cbc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	f57f af41 	bpl.w	8006b4a <_dtoa_r+0x3da>
 8006cc8:	4688      	mov	r8, r1
 8006cca:	3901      	subs	r1, #1
 8006ccc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006cd0:	2b30      	cmp	r3, #48	; 0x30
 8006cd2:	d0f9      	beq.n	8006cc8 <_dtoa_r+0x558>
 8006cd4:	46bb      	mov	fp, r7
 8006cd6:	e02a      	b.n	8006d2e <_dtoa_r+0x5be>
 8006cd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006cdc:	e7d6      	b.n	8006c8c <_dtoa_r+0x51c>
 8006cde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ce2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006ce6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006cea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006cee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006cf2:	ee15 3a10 	vmov	r3, s10
 8006cf6:	3330      	adds	r3, #48	; 0x30
 8006cf8:	f808 3b01 	strb.w	r3, [r8], #1
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	eba8 0303 	sub.w	r3, r8, r3
 8006d02:	4599      	cmp	r9, r3
 8006d04:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006d08:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006d0c:	d133      	bne.n	8006d76 <_dtoa_r+0x606>
 8006d0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006d12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1a:	dc1a      	bgt.n	8006d52 <_dtoa_r+0x5e2>
 8006d1c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	d103      	bne.n	8006d2e <_dtoa_r+0x5be>
 8006d26:	ee15 3a10 	vmov	r3, s10
 8006d2a:	07d9      	lsls	r1, r3, #31
 8006d2c:	d411      	bmi.n	8006d52 <_dtoa_r+0x5e2>
 8006d2e:	4629      	mov	r1, r5
 8006d30:	4630      	mov	r0, r6
 8006d32:	f000 fd05 	bl	8007740 <_Bfree>
 8006d36:	2300      	movs	r3, #0
 8006d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d3a:	f888 3000 	strb.w	r3, [r8]
 8006d3e:	f10b 0301 	add.w	r3, fp, #1
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f43f ad61 	beq.w	800680e <_dtoa_r+0x9e>
 8006d4c:	f8c3 8000 	str.w	r8, [r3]
 8006d50:	e55d      	b.n	800680e <_dtoa_r+0x9e>
 8006d52:	465f      	mov	r7, fp
 8006d54:	4643      	mov	r3, r8
 8006d56:	4698      	mov	r8, r3
 8006d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d5c:	2a39      	cmp	r2, #57	; 0x39
 8006d5e:	d106      	bne.n	8006d6e <_dtoa_r+0x5fe>
 8006d60:	9a01      	ldr	r2, [sp, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d1f7      	bne.n	8006d56 <_dtoa_r+0x5e6>
 8006d66:	9901      	ldr	r1, [sp, #4]
 8006d68:	2230      	movs	r2, #48	; 0x30
 8006d6a:	3701      	adds	r7, #1
 8006d6c:	700a      	strb	r2, [r1, #0]
 8006d6e:	781a      	ldrb	r2, [r3, #0]
 8006d70:	3201      	adds	r2, #1
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e7ae      	b.n	8006cd4 <_dtoa_r+0x564>
 8006d76:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006d7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d82:	d1b2      	bne.n	8006cea <_dtoa_r+0x57a>
 8006d84:	e7d3      	b.n	8006d2e <_dtoa_r+0x5be>
 8006d86:	bf00      	nop
 8006d88:	08009350 	.word	0x08009350
 8006d8c:	08009328 	.word	0x08009328
 8006d90:	9907      	ldr	r1, [sp, #28]
 8006d92:	2900      	cmp	r1, #0
 8006d94:	f000 80d0 	beq.w	8006f38 <_dtoa_r+0x7c8>
 8006d98:	9906      	ldr	r1, [sp, #24]
 8006d9a:	2901      	cmp	r1, #1
 8006d9c:	f300 80b4 	bgt.w	8006f08 <_dtoa_r+0x798>
 8006da0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006da2:	2900      	cmp	r1, #0
 8006da4:	f000 80ac 	beq.w	8006f00 <_dtoa_r+0x790>
 8006da8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006dac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006db0:	461c      	mov	r4, r3
 8006db2:	930a      	str	r3, [sp, #40]	; 0x28
 8006db4:	9b04      	ldr	r3, [sp, #16]
 8006db6:	4413      	add	r3, r2
 8006db8:	9304      	str	r3, [sp, #16]
 8006dba:	9b05      	ldr	r3, [sp, #20]
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	9305      	str	r3, [sp, #20]
 8006dc4:	f000 fd74 	bl	80078b0 <__i2b>
 8006dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dca:	4607      	mov	r7, r0
 8006dcc:	f1b8 0f00 	cmp.w	r8, #0
 8006dd0:	dd0d      	ble.n	8006dee <_dtoa_r+0x67e>
 8006dd2:	9a05      	ldr	r2, [sp, #20]
 8006dd4:	2a00      	cmp	r2, #0
 8006dd6:	dd0a      	ble.n	8006dee <_dtoa_r+0x67e>
 8006dd8:	4542      	cmp	r2, r8
 8006dda:	9904      	ldr	r1, [sp, #16]
 8006ddc:	bfa8      	it	ge
 8006dde:	4642      	movge	r2, r8
 8006de0:	1a89      	subs	r1, r1, r2
 8006de2:	9104      	str	r1, [sp, #16]
 8006de4:	9905      	ldr	r1, [sp, #20]
 8006de6:	eba8 0802 	sub.w	r8, r8, r2
 8006dea:	1a8a      	subs	r2, r1, r2
 8006dec:	9205      	str	r2, [sp, #20]
 8006dee:	b303      	cbz	r3, 8006e32 <_dtoa_r+0x6c2>
 8006df0:	9a07      	ldr	r2, [sp, #28]
 8006df2:	2a00      	cmp	r2, #0
 8006df4:	f000 80a5 	beq.w	8006f42 <_dtoa_r+0x7d2>
 8006df8:	2c00      	cmp	r4, #0
 8006dfa:	dd13      	ble.n	8006e24 <_dtoa_r+0x6b4>
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	4622      	mov	r2, r4
 8006e00:	4630      	mov	r0, r6
 8006e02:	930d      	str	r3, [sp, #52]	; 0x34
 8006e04:	f000 fe14 	bl	8007a30 <__pow5mult>
 8006e08:	462a      	mov	r2, r5
 8006e0a:	4601      	mov	r1, r0
 8006e0c:	4607      	mov	r7, r0
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f000 fd64 	bl	80078dc <__multiply>
 8006e14:	4629      	mov	r1, r5
 8006e16:	900a      	str	r0, [sp, #40]	; 0x28
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f000 fc91 	bl	8007740 <_Bfree>
 8006e1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e22:	4615      	mov	r5, r2
 8006e24:	1b1a      	subs	r2, r3, r4
 8006e26:	d004      	beq.n	8006e32 <_dtoa_r+0x6c2>
 8006e28:	4629      	mov	r1, r5
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f000 fe00 	bl	8007a30 <__pow5mult>
 8006e30:	4605      	mov	r5, r0
 8006e32:	2101      	movs	r1, #1
 8006e34:	4630      	mov	r0, r6
 8006e36:	f000 fd3b 	bl	80078b0 <__i2b>
 8006e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	4604      	mov	r4, r0
 8006e40:	f340 8081 	ble.w	8006f46 <_dtoa_r+0x7d6>
 8006e44:	461a      	mov	r2, r3
 8006e46:	4601      	mov	r1, r0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 fdf1 	bl	8007a30 <__pow5mult>
 8006e4e:	9b06      	ldr	r3, [sp, #24]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	4604      	mov	r4, r0
 8006e54:	dd7a      	ble.n	8006f4c <_dtoa_r+0x7dc>
 8006e56:	2300      	movs	r3, #0
 8006e58:	930a      	str	r3, [sp, #40]	; 0x28
 8006e5a:	6922      	ldr	r2, [r4, #16]
 8006e5c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006e60:	6910      	ldr	r0, [r2, #16]
 8006e62:	f000 fcd5 	bl	8007810 <__hi0bits>
 8006e66:	f1c0 0020 	rsb	r0, r0, #32
 8006e6a:	9b05      	ldr	r3, [sp, #20]
 8006e6c:	4418      	add	r0, r3
 8006e6e:	f010 001f 	ands.w	r0, r0, #31
 8006e72:	f000 808c 	beq.w	8006f8e <_dtoa_r+0x81e>
 8006e76:	f1c0 0220 	rsb	r2, r0, #32
 8006e7a:	2a04      	cmp	r2, #4
 8006e7c:	f340 8085 	ble.w	8006f8a <_dtoa_r+0x81a>
 8006e80:	f1c0 001c 	rsb	r0, r0, #28
 8006e84:	9b04      	ldr	r3, [sp, #16]
 8006e86:	4403      	add	r3, r0
 8006e88:	9304      	str	r3, [sp, #16]
 8006e8a:	9b05      	ldr	r3, [sp, #20]
 8006e8c:	4403      	add	r3, r0
 8006e8e:	4480      	add	r8, r0
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	9b04      	ldr	r3, [sp, #16]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dd05      	ble.n	8006ea4 <_dtoa_r+0x734>
 8006e98:	4629      	mov	r1, r5
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 fe21 	bl	8007ae4 <__lshift>
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	9b05      	ldr	r3, [sp, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	dd05      	ble.n	8006eb6 <_dtoa_r+0x746>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	461a      	mov	r2, r3
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f000 fe18 	bl	8007ae4 <__lshift>
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d06a      	beq.n	8006f92 <_dtoa_r+0x822>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	f000 fe80 	bl	8007bc4 <__mcmp>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	da64      	bge.n	8006f92 <_dtoa_r+0x822>
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4629      	mov	r1, r5
 8006ecc:	220a      	movs	r2, #10
 8006ece:	4630      	mov	r0, r6
 8006ed0:	f000 fc58 	bl	8007784 <__multadd>
 8006ed4:	9b07      	ldr	r3, [sp, #28]
 8006ed6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006eda:	4605      	mov	r5, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8191 	beq.w	8007204 <_dtoa_r+0xa94>
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	220a      	movs	r2, #10
 8006ee8:	4630      	mov	r0, r6
 8006eea:	f000 fc4b 	bl	8007784 <__multadd>
 8006eee:	f1ba 0f00 	cmp.w	sl, #0
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	f300 808d 	bgt.w	8007012 <_dtoa_r+0x8a2>
 8006ef8:	9b06      	ldr	r3, [sp, #24]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	dc50      	bgt.n	8006fa0 <_dtoa_r+0x830>
 8006efe:	e088      	b.n	8007012 <_dtoa_r+0x8a2>
 8006f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006f06:	e751      	b.n	8006dac <_dtoa_r+0x63c>
 8006f08:	f109 34ff 	add.w	r4, r9, #4294967295
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	bfbf      	itttt	lt
 8006f10:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006f12:	1ae3      	sublt	r3, r4, r3
 8006f14:	18d2      	addlt	r2, r2, r3
 8006f16:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006f18:	bfb6      	itet	lt
 8006f1a:	4623      	movlt	r3, r4
 8006f1c:	1b1c      	subge	r4, r3, r4
 8006f1e:	2400      	movlt	r4, #0
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	bfb5      	itete	lt
 8006f26:	9a04      	ldrlt	r2, [sp, #16]
 8006f28:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006f2c:	eba2 0809 	sublt.w	r8, r2, r9
 8006f30:	464a      	movge	r2, r9
 8006f32:	bfb8      	it	lt
 8006f34:	2200      	movlt	r2, #0
 8006f36:	e73c      	b.n	8006db2 <_dtoa_r+0x642>
 8006f38:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006f3c:	9f07      	ldr	r7, [sp, #28]
 8006f3e:	461c      	mov	r4, r3
 8006f40:	e744      	b.n	8006dcc <_dtoa_r+0x65c>
 8006f42:	461a      	mov	r2, r3
 8006f44:	e770      	b.n	8006e28 <_dtoa_r+0x6b8>
 8006f46:	9b06      	ldr	r3, [sp, #24]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	dc18      	bgt.n	8006f7e <_dtoa_r+0x80e>
 8006f4c:	9b02      	ldr	r3, [sp, #8]
 8006f4e:	b9b3      	cbnz	r3, 8006f7e <_dtoa_r+0x80e>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006f56:	b9a2      	cbnz	r2, 8006f82 <_dtoa_r+0x812>
 8006f58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f5c:	0d12      	lsrs	r2, r2, #20
 8006f5e:	0512      	lsls	r2, r2, #20
 8006f60:	b18a      	cbz	r2, 8006f86 <_dtoa_r+0x816>
 8006f62:	9b04      	ldr	r3, [sp, #16]
 8006f64:	3301      	adds	r3, #1
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	9b05      	ldr	r3, [sp, #20]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	9305      	str	r3, [sp, #20]
 8006f6e:	2301      	movs	r3, #1
 8006f70:	930a      	str	r3, [sp, #40]	; 0x28
 8006f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f47f af70 	bne.w	8006e5a <_dtoa_r+0x6ea>
 8006f7a:	2001      	movs	r0, #1
 8006f7c:	e775      	b.n	8006e6a <_dtoa_r+0x6fa>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	e7f6      	b.n	8006f70 <_dtoa_r+0x800>
 8006f82:	9b02      	ldr	r3, [sp, #8]
 8006f84:	e7f4      	b.n	8006f70 <_dtoa_r+0x800>
 8006f86:	920a      	str	r2, [sp, #40]	; 0x28
 8006f88:	e7f3      	b.n	8006f72 <_dtoa_r+0x802>
 8006f8a:	d082      	beq.n	8006e92 <_dtoa_r+0x722>
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	301c      	adds	r0, #28
 8006f90:	e778      	b.n	8006e84 <_dtoa_r+0x714>
 8006f92:	f1b9 0f00 	cmp.w	r9, #0
 8006f96:	dc37      	bgt.n	8007008 <_dtoa_r+0x898>
 8006f98:	9b06      	ldr	r3, [sp, #24]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	dd34      	ble.n	8007008 <_dtoa_r+0x898>
 8006f9e:	46ca      	mov	sl, r9
 8006fa0:	f1ba 0f00 	cmp.w	sl, #0
 8006fa4:	d10d      	bne.n	8006fc2 <_dtoa_r+0x852>
 8006fa6:	4621      	mov	r1, r4
 8006fa8:	4653      	mov	r3, sl
 8006faa:	2205      	movs	r2, #5
 8006fac:	4630      	mov	r0, r6
 8006fae:	f000 fbe9 	bl	8007784 <__multadd>
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	4604      	mov	r4, r0
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 fe04 	bl	8007bc4 <__mcmp>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f73f adeb 	bgt.w	8006b98 <_dtoa_r+0x428>
 8006fc2:	9b08      	ldr	r3, [sp, #32]
 8006fc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006fc8:	ea6f 0b03 	mvn.w	fp, r3
 8006fcc:	f04f 0900 	mov.w	r9, #0
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f000 fbb4 	bl	8007740 <_Bfree>
 8006fd8:	2f00      	cmp	r7, #0
 8006fda:	f43f aea8 	beq.w	8006d2e <_dtoa_r+0x5be>
 8006fde:	f1b9 0f00 	cmp.w	r9, #0
 8006fe2:	d005      	beq.n	8006ff0 <_dtoa_r+0x880>
 8006fe4:	45b9      	cmp	r9, r7
 8006fe6:	d003      	beq.n	8006ff0 <_dtoa_r+0x880>
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 fba8 	bl	8007740 <_Bfree>
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	f000 fba4 	bl	8007740 <_Bfree>
 8006ff8:	e699      	b.n	8006d2e <_dtoa_r+0x5be>
 8006ffa:	2400      	movs	r4, #0
 8006ffc:	4627      	mov	r7, r4
 8006ffe:	e7e0      	b.n	8006fc2 <_dtoa_r+0x852>
 8007000:	46bb      	mov	fp, r7
 8007002:	4604      	mov	r4, r0
 8007004:	4607      	mov	r7, r0
 8007006:	e5c7      	b.n	8006b98 <_dtoa_r+0x428>
 8007008:	9b07      	ldr	r3, [sp, #28]
 800700a:	46ca      	mov	sl, r9
 800700c:	2b00      	cmp	r3, #0
 800700e:	f000 8100 	beq.w	8007212 <_dtoa_r+0xaa2>
 8007012:	f1b8 0f00 	cmp.w	r8, #0
 8007016:	dd05      	ble.n	8007024 <_dtoa_r+0x8b4>
 8007018:	4639      	mov	r1, r7
 800701a:	4642      	mov	r2, r8
 800701c:	4630      	mov	r0, r6
 800701e:	f000 fd61 	bl	8007ae4 <__lshift>
 8007022:	4607      	mov	r7, r0
 8007024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	d05d      	beq.n	80070e6 <_dtoa_r+0x976>
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	4630      	mov	r0, r6
 800702e:	f000 fb47 	bl	80076c0 <_Balloc>
 8007032:	4680      	mov	r8, r0
 8007034:	b928      	cbnz	r0, 8007042 <_dtoa_r+0x8d2>
 8007036:	4b82      	ldr	r3, [pc, #520]	; (8007240 <_dtoa_r+0xad0>)
 8007038:	4602      	mov	r2, r0
 800703a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800703e:	f7ff bbaf 	b.w	80067a0 <_dtoa_r+0x30>
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	3202      	adds	r2, #2
 8007046:	0092      	lsls	r2, r2, #2
 8007048:	f107 010c 	add.w	r1, r7, #12
 800704c:	300c      	adds	r0, #12
 800704e:	f000 fb29 	bl	80076a4 <memcpy>
 8007052:	2201      	movs	r2, #1
 8007054:	4641      	mov	r1, r8
 8007056:	4630      	mov	r0, r6
 8007058:	f000 fd44 	bl	8007ae4 <__lshift>
 800705c:	9b01      	ldr	r3, [sp, #4]
 800705e:	3301      	adds	r3, #1
 8007060:	9304      	str	r3, [sp, #16]
 8007062:	9b01      	ldr	r3, [sp, #4]
 8007064:	4453      	add	r3, sl
 8007066:	9308      	str	r3, [sp, #32]
 8007068:	9b02      	ldr	r3, [sp, #8]
 800706a:	f003 0301 	and.w	r3, r3, #1
 800706e:	46b9      	mov	r9, r7
 8007070:	9307      	str	r3, [sp, #28]
 8007072:	4607      	mov	r7, r0
 8007074:	9b04      	ldr	r3, [sp, #16]
 8007076:	4621      	mov	r1, r4
 8007078:	3b01      	subs	r3, #1
 800707a:	4628      	mov	r0, r5
 800707c:	9302      	str	r3, [sp, #8]
 800707e:	f7ff faeb 	bl	8006658 <quorem>
 8007082:	4603      	mov	r3, r0
 8007084:	3330      	adds	r3, #48	; 0x30
 8007086:	9005      	str	r0, [sp, #20]
 8007088:	4649      	mov	r1, r9
 800708a:	4628      	mov	r0, r5
 800708c:	9309      	str	r3, [sp, #36]	; 0x24
 800708e:	f000 fd99 	bl	8007bc4 <__mcmp>
 8007092:	463a      	mov	r2, r7
 8007094:	4682      	mov	sl, r0
 8007096:	4621      	mov	r1, r4
 8007098:	4630      	mov	r0, r6
 800709a:	f000 fdaf 	bl	8007bfc <__mdiff>
 800709e:	68c2      	ldr	r2, [r0, #12]
 80070a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a2:	4680      	mov	r8, r0
 80070a4:	bb0a      	cbnz	r2, 80070ea <_dtoa_r+0x97a>
 80070a6:	4601      	mov	r1, r0
 80070a8:	4628      	mov	r0, r5
 80070aa:	f000 fd8b 	bl	8007bc4 <__mcmp>
 80070ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b0:	4602      	mov	r2, r0
 80070b2:	4641      	mov	r1, r8
 80070b4:	4630      	mov	r0, r6
 80070b6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80070ba:	f000 fb41 	bl	8007740 <_Bfree>
 80070be:	9b06      	ldr	r3, [sp, #24]
 80070c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070c2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80070c6:	ea43 0102 	orr.w	r1, r3, r2
 80070ca:	9b07      	ldr	r3, [sp, #28]
 80070cc:	430b      	orrs	r3, r1
 80070ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d0:	d10d      	bne.n	80070ee <_dtoa_r+0x97e>
 80070d2:	2b39      	cmp	r3, #57	; 0x39
 80070d4:	d029      	beq.n	800712a <_dtoa_r+0x9ba>
 80070d6:	f1ba 0f00 	cmp.w	sl, #0
 80070da:	dd01      	ble.n	80070e0 <_dtoa_r+0x970>
 80070dc:	9b05      	ldr	r3, [sp, #20]
 80070de:	3331      	adds	r3, #49	; 0x31
 80070e0:	9a02      	ldr	r2, [sp, #8]
 80070e2:	7013      	strb	r3, [r2, #0]
 80070e4:	e774      	b.n	8006fd0 <_dtoa_r+0x860>
 80070e6:	4638      	mov	r0, r7
 80070e8:	e7b8      	b.n	800705c <_dtoa_r+0x8ec>
 80070ea:	2201      	movs	r2, #1
 80070ec:	e7e1      	b.n	80070b2 <_dtoa_r+0x942>
 80070ee:	f1ba 0f00 	cmp.w	sl, #0
 80070f2:	db06      	blt.n	8007102 <_dtoa_r+0x992>
 80070f4:	9906      	ldr	r1, [sp, #24]
 80070f6:	ea41 0a0a 	orr.w	sl, r1, sl
 80070fa:	9907      	ldr	r1, [sp, #28]
 80070fc:	ea5a 0101 	orrs.w	r1, sl, r1
 8007100:	d120      	bne.n	8007144 <_dtoa_r+0x9d4>
 8007102:	2a00      	cmp	r2, #0
 8007104:	ddec      	ble.n	80070e0 <_dtoa_r+0x970>
 8007106:	4629      	mov	r1, r5
 8007108:	2201      	movs	r2, #1
 800710a:	4630      	mov	r0, r6
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	f000 fce9 	bl	8007ae4 <__lshift>
 8007112:	4621      	mov	r1, r4
 8007114:	4605      	mov	r5, r0
 8007116:	f000 fd55 	bl	8007bc4 <__mcmp>
 800711a:	2800      	cmp	r0, #0
 800711c:	9b04      	ldr	r3, [sp, #16]
 800711e:	dc02      	bgt.n	8007126 <_dtoa_r+0x9b6>
 8007120:	d1de      	bne.n	80070e0 <_dtoa_r+0x970>
 8007122:	07da      	lsls	r2, r3, #31
 8007124:	d5dc      	bpl.n	80070e0 <_dtoa_r+0x970>
 8007126:	2b39      	cmp	r3, #57	; 0x39
 8007128:	d1d8      	bne.n	80070dc <_dtoa_r+0x96c>
 800712a:	9a02      	ldr	r2, [sp, #8]
 800712c:	2339      	movs	r3, #57	; 0x39
 800712e:	7013      	strb	r3, [r2, #0]
 8007130:	4643      	mov	r3, r8
 8007132:	4698      	mov	r8, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800713a:	2a39      	cmp	r2, #57	; 0x39
 800713c:	d051      	beq.n	80071e2 <_dtoa_r+0xa72>
 800713e:	3201      	adds	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e745      	b.n	8006fd0 <_dtoa_r+0x860>
 8007144:	2a00      	cmp	r2, #0
 8007146:	dd03      	ble.n	8007150 <_dtoa_r+0x9e0>
 8007148:	2b39      	cmp	r3, #57	; 0x39
 800714a:	d0ee      	beq.n	800712a <_dtoa_r+0x9ba>
 800714c:	3301      	adds	r3, #1
 800714e:	e7c7      	b.n	80070e0 <_dtoa_r+0x970>
 8007150:	9a04      	ldr	r2, [sp, #16]
 8007152:	9908      	ldr	r1, [sp, #32]
 8007154:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007158:	428a      	cmp	r2, r1
 800715a:	d02b      	beq.n	80071b4 <_dtoa_r+0xa44>
 800715c:	4629      	mov	r1, r5
 800715e:	2300      	movs	r3, #0
 8007160:	220a      	movs	r2, #10
 8007162:	4630      	mov	r0, r6
 8007164:	f000 fb0e 	bl	8007784 <__multadd>
 8007168:	45b9      	cmp	r9, r7
 800716a:	4605      	mov	r5, r0
 800716c:	f04f 0300 	mov.w	r3, #0
 8007170:	f04f 020a 	mov.w	r2, #10
 8007174:	4649      	mov	r1, r9
 8007176:	4630      	mov	r0, r6
 8007178:	d107      	bne.n	800718a <_dtoa_r+0xa1a>
 800717a:	f000 fb03 	bl	8007784 <__multadd>
 800717e:	4681      	mov	r9, r0
 8007180:	4607      	mov	r7, r0
 8007182:	9b04      	ldr	r3, [sp, #16]
 8007184:	3301      	adds	r3, #1
 8007186:	9304      	str	r3, [sp, #16]
 8007188:	e774      	b.n	8007074 <_dtoa_r+0x904>
 800718a:	f000 fafb 	bl	8007784 <__multadd>
 800718e:	4639      	mov	r1, r7
 8007190:	4681      	mov	r9, r0
 8007192:	2300      	movs	r3, #0
 8007194:	220a      	movs	r2, #10
 8007196:	4630      	mov	r0, r6
 8007198:	f000 faf4 	bl	8007784 <__multadd>
 800719c:	4607      	mov	r7, r0
 800719e:	e7f0      	b.n	8007182 <_dtoa_r+0xa12>
 80071a0:	f1ba 0f00 	cmp.w	sl, #0
 80071a4:	9a01      	ldr	r2, [sp, #4]
 80071a6:	bfcc      	ite	gt
 80071a8:	46d0      	movgt	r8, sl
 80071aa:	f04f 0801 	movle.w	r8, #1
 80071ae:	4490      	add	r8, r2
 80071b0:	f04f 0900 	mov.w	r9, #0
 80071b4:	4629      	mov	r1, r5
 80071b6:	2201      	movs	r2, #1
 80071b8:	4630      	mov	r0, r6
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	f000 fc92 	bl	8007ae4 <__lshift>
 80071c0:	4621      	mov	r1, r4
 80071c2:	4605      	mov	r5, r0
 80071c4:	f000 fcfe 	bl	8007bc4 <__mcmp>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	dcb1      	bgt.n	8007130 <_dtoa_r+0x9c0>
 80071cc:	d102      	bne.n	80071d4 <_dtoa_r+0xa64>
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	07db      	lsls	r3, r3, #31
 80071d2:	d4ad      	bmi.n	8007130 <_dtoa_r+0x9c0>
 80071d4:	4643      	mov	r3, r8
 80071d6:	4698      	mov	r8, r3
 80071d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071dc:	2a30      	cmp	r2, #48	; 0x30
 80071de:	d0fa      	beq.n	80071d6 <_dtoa_r+0xa66>
 80071e0:	e6f6      	b.n	8006fd0 <_dtoa_r+0x860>
 80071e2:	9a01      	ldr	r2, [sp, #4]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d1a4      	bne.n	8007132 <_dtoa_r+0x9c2>
 80071e8:	f10b 0b01 	add.w	fp, fp, #1
 80071ec:	2331      	movs	r3, #49	; 0x31
 80071ee:	e778      	b.n	80070e2 <_dtoa_r+0x972>
 80071f0:	4b14      	ldr	r3, [pc, #80]	; (8007244 <_dtoa_r+0xad4>)
 80071f2:	f7ff bb27 	b.w	8006844 <_dtoa_r+0xd4>
 80071f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f47f ab03 	bne.w	8006804 <_dtoa_r+0x94>
 80071fe:	4b12      	ldr	r3, [pc, #72]	; (8007248 <_dtoa_r+0xad8>)
 8007200:	f7ff bb20 	b.w	8006844 <_dtoa_r+0xd4>
 8007204:	f1ba 0f00 	cmp.w	sl, #0
 8007208:	dc03      	bgt.n	8007212 <_dtoa_r+0xaa2>
 800720a:	9b06      	ldr	r3, [sp, #24]
 800720c:	2b02      	cmp	r3, #2
 800720e:	f73f aec7 	bgt.w	8006fa0 <_dtoa_r+0x830>
 8007212:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007216:	4621      	mov	r1, r4
 8007218:	4628      	mov	r0, r5
 800721a:	f7ff fa1d 	bl	8006658 <quorem>
 800721e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007222:	f808 3b01 	strb.w	r3, [r8], #1
 8007226:	9a01      	ldr	r2, [sp, #4]
 8007228:	eba8 0202 	sub.w	r2, r8, r2
 800722c:	4592      	cmp	sl, r2
 800722e:	ddb7      	ble.n	80071a0 <_dtoa_r+0xa30>
 8007230:	4629      	mov	r1, r5
 8007232:	2300      	movs	r3, #0
 8007234:	220a      	movs	r2, #10
 8007236:	4630      	mov	r0, r6
 8007238:	f000 faa4 	bl	8007784 <__multadd>
 800723c:	4605      	mov	r5, r0
 800723e:	e7ea      	b.n	8007216 <_dtoa_r+0xaa6>
 8007240:	08009257 	.word	0x08009257
 8007244:	080091b4 	.word	0x080091b4
 8007248:	080091d8 	.word	0x080091d8

0800724c <__sflush_r>:
 800724c:	898a      	ldrh	r2, [r1, #12]
 800724e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007252:	4605      	mov	r5, r0
 8007254:	0710      	lsls	r0, r2, #28
 8007256:	460c      	mov	r4, r1
 8007258:	d458      	bmi.n	800730c <__sflush_r+0xc0>
 800725a:	684b      	ldr	r3, [r1, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	dc05      	bgt.n	800726c <__sflush_r+0x20>
 8007260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	dc02      	bgt.n	800726c <__sflush_r+0x20>
 8007266:	2000      	movs	r0, #0
 8007268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800726c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800726e:	2e00      	cmp	r6, #0
 8007270:	d0f9      	beq.n	8007266 <__sflush_r+0x1a>
 8007272:	2300      	movs	r3, #0
 8007274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007278:	682f      	ldr	r7, [r5, #0]
 800727a:	602b      	str	r3, [r5, #0]
 800727c:	d032      	beq.n	80072e4 <__sflush_r+0x98>
 800727e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	075a      	lsls	r2, r3, #29
 8007284:	d505      	bpl.n	8007292 <__sflush_r+0x46>
 8007286:	6863      	ldr	r3, [r4, #4]
 8007288:	1ac0      	subs	r0, r0, r3
 800728a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800728c:	b10b      	cbz	r3, 8007292 <__sflush_r+0x46>
 800728e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007290:	1ac0      	subs	r0, r0, r3
 8007292:	2300      	movs	r3, #0
 8007294:	4602      	mov	r2, r0
 8007296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007298:	6a21      	ldr	r1, [r4, #32]
 800729a:	4628      	mov	r0, r5
 800729c:	47b0      	blx	r6
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	89a3      	ldrh	r3, [r4, #12]
 80072a2:	d106      	bne.n	80072b2 <__sflush_r+0x66>
 80072a4:	6829      	ldr	r1, [r5, #0]
 80072a6:	291d      	cmp	r1, #29
 80072a8:	d82c      	bhi.n	8007304 <__sflush_r+0xb8>
 80072aa:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <__sflush_r+0x108>)
 80072ac:	40ca      	lsrs	r2, r1
 80072ae:	07d6      	lsls	r6, r2, #31
 80072b0:	d528      	bpl.n	8007304 <__sflush_r+0xb8>
 80072b2:	2200      	movs	r2, #0
 80072b4:	6062      	str	r2, [r4, #4]
 80072b6:	04d9      	lsls	r1, r3, #19
 80072b8:	6922      	ldr	r2, [r4, #16]
 80072ba:	6022      	str	r2, [r4, #0]
 80072bc:	d504      	bpl.n	80072c8 <__sflush_r+0x7c>
 80072be:	1c42      	adds	r2, r0, #1
 80072c0:	d101      	bne.n	80072c6 <__sflush_r+0x7a>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	b903      	cbnz	r3, 80072c8 <__sflush_r+0x7c>
 80072c6:	6560      	str	r0, [r4, #84]	; 0x54
 80072c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ca:	602f      	str	r7, [r5, #0]
 80072cc:	2900      	cmp	r1, #0
 80072ce:	d0ca      	beq.n	8007266 <__sflush_r+0x1a>
 80072d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072d4:	4299      	cmp	r1, r3
 80072d6:	d002      	beq.n	80072de <__sflush_r+0x92>
 80072d8:	4628      	mov	r0, r5
 80072da:	f000 fd8b 	bl	8007df4 <_free_r>
 80072de:	2000      	movs	r0, #0
 80072e0:	6360      	str	r0, [r4, #52]	; 0x34
 80072e2:	e7c1      	b.n	8007268 <__sflush_r+0x1c>
 80072e4:	6a21      	ldr	r1, [r4, #32]
 80072e6:	2301      	movs	r3, #1
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b0      	blx	r6
 80072ec:	1c41      	adds	r1, r0, #1
 80072ee:	d1c7      	bne.n	8007280 <__sflush_r+0x34>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0c4      	beq.n	8007280 <__sflush_r+0x34>
 80072f6:	2b1d      	cmp	r3, #29
 80072f8:	d001      	beq.n	80072fe <__sflush_r+0xb2>
 80072fa:	2b16      	cmp	r3, #22
 80072fc:	d101      	bne.n	8007302 <__sflush_r+0xb6>
 80072fe:	602f      	str	r7, [r5, #0]
 8007300:	e7b1      	b.n	8007266 <__sflush_r+0x1a>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007308:	81a3      	strh	r3, [r4, #12]
 800730a:	e7ad      	b.n	8007268 <__sflush_r+0x1c>
 800730c:	690f      	ldr	r7, [r1, #16]
 800730e:	2f00      	cmp	r7, #0
 8007310:	d0a9      	beq.n	8007266 <__sflush_r+0x1a>
 8007312:	0793      	lsls	r3, r2, #30
 8007314:	680e      	ldr	r6, [r1, #0]
 8007316:	bf08      	it	eq
 8007318:	694b      	ldreq	r3, [r1, #20]
 800731a:	600f      	str	r7, [r1, #0]
 800731c:	bf18      	it	ne
 800731e:	2300      	movne	r3, #0
 8007320:	eba6 0807 	sub.w	r8, r6, r7
 8007324:	608b      	str	r3, [r1, #8]
 8007326:	f1b8 0f00 	cmp.w	r8, #0
 800732a:	dd9c      	ble.n	8007266 <__sflush_r+0x1a>
 800732c:	6a21      	ldr	r1, [r4, #32]
 800732e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007330:	4643      	mov	r3, r8
 8007332:	463a      	mov	r2, r7
 8007334:	4628      	mov	r0, r5
 8007336:	47b0      	blx	r6
 8007338:	2800      	cmp	r0, #0
 800733a:	dc06      	bgt.n	800734a <__sflush_r+0xfe>
 800733c:	89a3      	ldrh	r3, [r4, #12]
 800733e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007342:	81a3      	strh	r3, [r4, #12]
 8007344:	f04f 30ff 	mov.w	r0, #4294967295
 8007348:	e78e      	b.n	8007268 <__sflush_r+0x1c>
 800734a:	4407      	add	r7, r0
 800734c:	eba8 0800 	sub.w	r8, r8, r0
 8007350:	e7e9      	b.n	8007326 <__sflush_r+0xda>
 8007352:	bf00      	nop
 8007354:	20400001 	.word	0x20400001

08007358 <_fflush_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	690b      	ldr	r3, [r1, #16]
 800735c:	4605      	mov	r5, r0
 800735e:	460c      	mov	r4, r1
 8007360:	b913      	cbnz	r3, 8007368 <_fflush_r+0x10>
 8007362:	2500      	movs	r5, #0
 8007364:	4628      	mov	r0, r5
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	b118      	cbz	r0, 8007372 <_fflush_r+0x1a>
 800736a:	6983      	ldr	r3, [r0, #24]
 800736c:	b90b      	cbnz	r3, 8007372 <_fflush_r+0x1a>
 800736e:	f000 f887 	bl	8007480 <__sinit>
 8007372:	4b14      	ldr	r3, [pc, #80]	; (80073c4 <_fflush_r+0x6c>)
 8007374:	429c      	cmp	r4, r3
 8007376:	d11b      	bne.n	80073b0 <_fflush_r+0x58>
 8007378:	686c      	ldr	r4, [r5, #4]
 800737a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0ef      	beq.n	8007362 <_fflush_r+0xa>
 8007382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007384:	07d0      	lsls	r0, r2, #31
 8007386:	d404      	bmi.n	8007392 <_fflush_r+0x3a>
 8007388:	0599      	lsls	r1, r3, #22
 800738a:	d402      	bmi.n	8007392 <_fflush_r+0x3a>
 800738c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800738e:	f000 f91a 	bl	80075c6 <__retarget_lock_acquire_recursive>
 8007392:	4628      	mov	r0, r5
 8007394:	4621      	mov	r1, r4
 8007396:	f7ff ff59 	bl	800724c <__sflush_r>
 800739a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800739c:	07da      	lsls	r2, r3, #31
 800739e:	4605      	mov	r5, r0
 80073a0:	d4e0      	bmi.n	8007364 <_fflush_r+0xc>
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	059b      	lsls	r3, r3, #22
 80073a6:	d4dd      	bmi.n	8007364 <_fflush_r+0xc>
 80073a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073aa:	f000 f90d 	bl	80075c8 <__retarget_lock_release_recursive>
 80073ae:	e7d9      	b.n	8007364 <_fflush_r+0xc>
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <_fflush_r+0x70>)
 80073b2:	429c      	cmp	r4, r3
 80073b4:	d101      	bne.n	80073ba <_fflush_r+0x62>
 80073b6:	68ac      	ldr	r4, [r5, #8]
 80073b8:	e7df      	b.n	800737a <_fflush_r+0x22>
 80073ba:	4b04      	ldr	r3, [pc, #16]	; (80073cc <_fflush_r+0x74>)
 80073bc:	429c      	cmp	r4, r3
 80073be:	bf08      	it	eq
 80073c0:	68ec      	ldreq	r4, [r5, #12]
 80073c2:	e7da      	b.n	800737a <_fflush_r+0x22>
 80073c4:	08009288 	.word	0x08009288
 80073c8:	080092a8 	.word	0x080092a8
 80073cc:	08009268 	.word	0x08009268

080073d0 <std>:
 80073d0:	2300      	movs	r3, #0
 80073d2:	b510      	push	{r4, lr}
 80073d4:	4604      	mov	r4, r0
 80073d6:	e9c0 3300 	strd	r3, r3, [r0]
 80073da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073de:	6083      	str	r3, [r0, #8]
 80073e0:	8181      	strh	r1, [r0, #12]
 80073e2:	6643      	str	r3, [r0, #100]	; 0x64
 80073e4:	81c2      	strh	r2, [r0, #14]
 80073e6:	6183      	str	r3, [r0, #24]
 80073e8:	4619      	mov	r1, r3
 80073ea:	2208      	movs	r2, #8
 80073ec:	305c      	adds	r0, #92	; 0x5c
 80073ee:	f7fe fbb1 	bl	8005b54 <memset>
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <std+0x38>)
 80073f4:	6263      	str	r3, [r4, #36]	; 0x24
 80073f6:	4b05      	ldr	r3, [pc, #20]	; (800740c <std+0x3c>)
 80073f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <std+0x40>)
 80073fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <std+0x44>)
 8007400:	6224      	str	r4, [r4, #32]
 8007402:	6323      	str	r3, [r4, #48]	; 0x30
 8007404:	bd10      	pop	{r4, pc}
 8007406:	bf00      	nop
 8007408:	08007fd5 	.word	0x08007fd5
 800740c:	08007ff7 	.word	0x08007ff7
 8007410:	0800802f 	.word	0x0800802f
 8007414:	08008053 	.word	0x08008053

08007418 <_cleanup_r>:
 8007418:	4901      	ldr	r1, [pc, #4]	; (8007420 <_cleanup_r+0x8>)
 800741a:	f000 b8af 	b.w	800757c <_fwalk_reent>
 800741e:	bf00      	nop
 8007420:	08007359 	.word	0x08007359

08007424 <__sfmoreglue>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	2268      	movs	r2, #104	; 0x68
 8007428:	1e4d      	subs	r5, r1, #1
 800742a:	4355      	muls	r5, r2
 800742c:	460e      	mov	r6, r1
 800742e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007432:	f000 fd4b 	bl	8007ecc <_malloc_r>
 8007436:	4604      	mov	r4, r0
 8007438:	b140      	cbz	r0, 800744c <__sfmoreglue+0x28>
 800743a:	2100      	movs	r1, #0
 800743c:	e9c0 1600 	strd	r1, r6, [r0]
 8007440:	300c      	adds	r0, #12
 8007442:	60a0      	str	r0, [r4, #8]
 8007444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007448:	f7fe fb84 	bl	8005b54 <memset>
 800744c:	4620      	mov	r0, r4
 800744e:	bd70      	pop	{r4, r5, r6, pc}

08007450 <__sfp_lock_acquire>:
 8007450:	4801      	ldr	r0, [pc, #4]	; (8007458 <__sfp_lock_acquire+0x8>)
 8007452:	f000 b8b8 	b.w	80075c6 <__retarget_lock_acquire_recursive>
 8007456:	bf00      	nop
 8007458:	2400032d 	.word	0x2400032d

0800745c <__sfp_lock_release>:
 800745c:	4801      	ldr	r0, [pc, #4]	; (8007464 <__sfp_lock_release+0x8>)
 800745e:	f000 b8b3 	b.w	80075c8 <__retarget_lock_release_recursive>
 8007462:	bf00      	nop
 8007464:	2400032d 	.word	0x2400032d

08007468 <__sinit_lock_acquire>:
 8007468:	4801      	ldr	r0, [pc, #4]	; (8007470 <__sinit_lock_acquire+0x8>)
 800746a:	f000 b8ac 	b.w	80075c6 <__retarget_lock_acquire_recursive>
 800746e:	bf00      	nop
 8007470:	2400032e 	.word	0x2400032e

08007474 <__sinit_lock_release>:
 8007474:	4801      	ldr	r0, [pc, #4]	; (800747c <__sinit_lock_release+0x8>)
 8007476:	f000 b8a7 	b.w	80075c8 <__retarget_lock_release_recursive>
 800747a:	bf00      	nop
 800747c:	2400032e 	.word	0x2400032e

08007480 <__sinit>:
 8007480:	b510      	push	{r4, lr}
 8007482:	4604      	mov	r4, r0
 8007484:	f7ff fff0 	bl	8007468 <__sinit_lock_acquire>
 8007488:	69a3      	ldr	r3, [r4, #24]
 800748a:	b11b      	cbz	r3, 8007494 <__sinit+0x14>
 800748c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007490:	f7ff bff0 	b.w	8007474 <__sinit_lock_release>
 8007494:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007498:	6523      	str	r3, [r4, #80]	; 0x50
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <__sinit+0x68>)
 800749c:	4a13      	ldr	r2, [pc, #76]	; (80074ec <__sinit+0x6c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80074a2:	42a3      	cmp	r3, r4
 80074a4:	bf04      	itt	eq
 80074a6:	2301      	moveq	r3, #1
 80074a8:	61a3      	streq	r3, [r4, #24]
 80074aa:	4620      	mov	r0, r4
 80074ac:	f000 f820 	bl	80074f0 <__sfp>
 80074b0:	6060      	str	r0, [r4, #4]
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 f81c 	bl	80074f0 <__sfp>
 80074b8:	60a0      	str	r0, [r4, #8]
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 f818 	bl	80074f0 <__sfp>
 80074c0:	2200      	movs	r2, #0
 80074c2:	60e0      	str	r0, [r4, #12]
 80074c4:	2104      	movs	r1, #4
 80074c6:	6860      	ldr	r0, [r4, #4]
 80074c8:	f7ff ff82 	bl	80073d0 <std>
 80074cc:	68a0      	ldr	r0, [r4, #8]
 80074ce:	2201      	movs	r2, #1
 80074d0:	2109      	movs	r1, #9
 80074d2:	f7ff ff7d 	bl	80073d0 <std>
 80074d6:	68e0      	ldr	r0, [r4, #12]
 80074d8:	2202      	movs	r2, #2
 80074da:	2112      	movs	r1, #18
 80074dc:	f7ff ff78 	bl	80073d0 <std>
 80074e0:	2301      	movs	r3, #1
 80074e2:	61a3      	str	r3, [r4, #24]
 80074e4:	e7d2      	b.n	800748c <__sinit+0xc>
 80074e6:	bf00      	nop
 80074e8:	080091a0 	.word	0x080091a0
 80074ec:	08007419 	.word	0x08007419

080074f0 <__sfp>:
 80074f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f2:	4607      	mov	r7, r0
 80074f4:	f7ff ffac 	bl	8007450 <__sfp_lock_acquire>
 80074f8:	4b1e      	ldr	r3, [pc, #120]	; (8007574 <__sfp+0x84>)
 80074fa:	681e      	ldr	r6, [r3, #0]
 80074fc:	69b3      	ldr	r3, [r6, #24]
 80074fe:	b913      	cbnz	r3, 8007506 <__sfp+0x16>
 8007500:	4630      	mov	r0, r6
 8007502:	f7ff ffbd 	bl	8007480 <__sinit>
 8007506:	3648      	adds	r6, #72	; 0x48
 8007508:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800750c:	3b01      	subs	r3, #1
 800750e:	d503      	bpl.n	8007518 <__sfp+0x28>
 8007510:	6833      	ldr	r3, [r6, #0]
 8007512:	b30b      	cbz	r3, 8007558 <__sfp+0x68>
 8007514:	6836      	ldr	r6, [r6, #0]
 8007516:	e7f7      	b.n	8007508 <__sfp+0x18>
 8007518:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800751c:	b9d5      	cbnz	r5, 8007554 <__sfp+0x64>
 800751e:	4b16      	ldr	r3, [pc, #88]	; (8007578 <__sfp+0x88>)
 8007520:	60e3      	str	r3, [r4, #12]
 8007522:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007526:	6665      	str	r5, [r4, #100]	; 0x64
 8007528:	f000 f84c 	bl	80075c4 <__retarget_lock_init_recursive>
 800752c:	f7ff ff96 	bl	800745c <__sfp_lock_release>
 8007530:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007534:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007538:	6025      	str	r5, [r4, #0]
 800753a:	61a5      	str	r5, [r4, #24]
 800753c:	2208      	movs	r2, #8
 800753e:	4629      	mov	r1, r5
 8007540:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007544:	f7fe fb06 	bl	8005b54 <memset>
 8007548:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800754c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007550:	4620      	mov	r0, r4
 8007552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007554:	3468      	adds	r4, #104	; 0x68
 8007556:	e7d9      	b.n	800750c <__sfp+0x1c>
 8007558:	2104      	movs	r1, #4
 800755a:	4638      	mov	r0, r7
 800755c:	f7ff ff62 	bl	8007424 <__sfmoreglue>
 8007560:	4604      	mov	r4, r0
 8007562:	6030      	str	r0, [r6, #0]
 8007564:	2800      	cmp	r0, #0
 8007566:	d1d5      	bne.n	8007514 <__sfp+0x24>
 8007568:	f7ff ff78 	bl	800745c <__sfp_lock_release>
 800756c:	230c      	movs	r3, #12
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	e7ee      	b.n	8007550 <__sfp+0x60>
 8007572:	bf00      	nop
 8007574:	080091a0 	.word	0x080091a0
 8007578:	ffff0001 	.word	0xffff0001

0800757c <_fwalk_reent>:
 800757c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007580:	4606      	mov	r6, r0
 8007582:	4688      	mov	r8, r1
 8007584:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007588:	2700      	movs	r7, #0
 800758a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800758e:	f1b9 0901 	subs.w	r9, r9, #1
 8007592:	d505      	bpl.n	80075a0 <_fwalk_reent+0x24>
 8007594:	6824      	ldr	r4, [r4, #0]
 8007596:	2c00      	cmp	r4, #0
 8007598:	d1f7      	bne.n	800758a <_fwalk_reent+0xe>
 800759a:	4638      	mov	r0, r7
 800759c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a0:	89ab      	ldrh	r3, [r5, #12]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d907      	bls.n	80075b6 <_fwalk_reent+0x3a>
 80075a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075aa:	3301      	adds	r3, #1
 80075ac:	d003      	beq.n	80075b6 <_fwalk_reent+0x3a>
 80075ae:	4629      	mov	r1, r5
 80075b0:	4630      	mov	r0, r6
 80075b2:	47c0      	blx	r8
 80075b4:	4307      	orrs	r7, r0
 80075b6:	3568      	adds	r5, #104	; 0x68
 80075b8:	e7e9      	b.n	800758e <_fwalk_reent+0x12>
	...

080075bc <_localeconv_r>:
 80075bc:	4800      	ldr	r0, [pc, #0]	; (80075c0 <_localeconv_r+0x4>)
 80075be:	4770      	bx	lr
 80075c0:	24000164 	.word	0x24000164

080075c4 <__retarget_lock_init_recursive>:
 80075c4:	4770      	bx	lr

080075c6 <__retarget_lock_acquire_recursive>:
 80075c6:	4770      	bx	lr

080075c8 <__retarget_lock_release_recursive>:
 80075c8:	4770      	bx	lr

080075ca <__swhatbuf_r>:
 80075ca:	b570      	push	{r4, r5, r6, lr}
 80075cc:	460e      	mov	r6, r1
 80075ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d2:	2900      	cmp	r1, #0
 80075d4:	b096      	sub	sp, #88	; 0x58
 80075d6:	4614      	mov	r4, r2
 80075d8:	461d      	mov	r5, r3
 80075da:	da08      	bge.n	80075ee <__swhatbuf_r+0x24>
 80075dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	602a      	str	r2, [r5, #0]
 80075e4:	061a      	lsls	r2, r3, #24
 80075e6:	d410      	bmi.n	800760a <__swhatbuf_r+0x40>
 80075e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ec:	e00e      	b.n	800760c <__swhatbuf_r+0x42>
 80075ee:	466a      	mov	r2, sp
 80075f0:	f000 fd86 	bl	8008100 <_fstat_r>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	dbf1      	blt.n	80075dc <__swhatbuf_r+0x12>
 80075f8:	9a01      	ldr	r2, [sp, #4]
 80075fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007602:	425a      	negs	r2, r3
 8007604:	415a      	adcs	r2, r3
 8007606:	602a      	str	r2, [r5, #0]
 8007608:	e7ee      	b.n	80075e8 <__swhatbuf_r+0x1e>
 800760a:	2340      	movs	r3, #64	; 0x40
 800760c:	2000      	movs	r0, #0
 800760e:	6023      	str	r3, [r4, #0]
 8007610:	b016      	add	sp, #88	; 0x58
 8007612:	bd70      	pop	{r4, r5, r6, pc}

08007614 <__smakebuf_r>:
 8007614:	898b      	ldrh	r3, [r1, #12]
 8007616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007618:	079d      	lsls	r5, r3, #30
 800761a:	4606      	mov	r6, r0
 800761c:	460c      	mov	r4, r1
 800761e:	d507      	bpl.n	8007630 <__smakebuf_r+0x1c>
 8007620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	6123      	str	r3, [r4, #16]
 8007628:	2301      	movs	r3, #1
 800762a:	6163      	str	r3, [r4, #20]
 800762c:	b002      	add	sp, #8
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	ab01      	add	r3, sp, #4
 8007632:	466a      	mov	r2, sp
 8007634:	f7ff ffc9 	bl	80075ca <__swhatbuf_r>
 8007638:	9900      	ldr	r1, [sp, #0]
 800763a:	4605      	mov	r5, r0
 800763c:	4630      	mov	r0, r6
 800763e:	f000 fc45 	bl	8007ecc <_malloc_r>
 8007642:	b948      	cbnz	r0, 8007658 <__smakebuf_r+0x44>
 8007644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007648:	059a      	lsls	r2, r3, #22
 800764a:	d4ef      	bmi.n	800762c <__smakebuf_r+0x18>
 800764c:	f023 0303 	bic.w	r3, r3, #3
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	81a3      	strh	r3, [r4, #12]
 8007656:	e7e3      	b.n	8007620 <__smakebuf_r+0xc>
 8007658:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <__smakebuf_r+0x7c>)
 800765a:	62b3      	str	r3, [r6, #40]	; 0x28
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	6020      	str	r0, [r4, #0]
 8007660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	9b00      	ldr	r3, [sp, #0]
 8007668:	6163      	str	r3, [r4, #20]
 800766a:	9b01      	ldr	r3, [sp, #4]
 800766c:	6120      	str	r0, [r4, #16]
 800766e:	b15b      	cbz	r3, 8007688 <__smakebuf_r+0x74>
 8007670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007674:	4630      	mov	r0, r6
 8007676:	f000 fd55 	bl	8008124 <_isatty_r>
 800767a:	b128      	cbz	r0, 8007688 <__smakebuf_r+0x74>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	89a0      	ldrh	r0, [r4, #12]
 800768a:	4305      	orrs	r5, r0
 800768c:	81a5      	strh	r5, [r4, #12]
 800768e:	e7cd      	b.n	800762c <__smakebuf_r+0x18>
 8007690:	08007419 	.word	0x08007419

08007694 <malloc>:
 8007694:	4b02      	ldr	r3, [pc, #8]	; (80076a0 <malloc+0xc>)
 8007696:	4601      	mov	r1, r0
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f000 bc17 	b.w	8007ecc <_malloc_r>
 800769e:	bf00      	nop
 80076a0:	24000010 	.word	0x24000010

080076a4 <memcpy>:
 80076a4:	440a      	add	r2, r1
 80076a6:	4291      	cmp	r1, r2
 80076a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80076ac:	d100      	bne.n	80076b0 <memcpy+0xc>
 80076ae:	4770      	bx	lr
 80076b0:	b510      	push	{r4, lr}
 80076b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ba:	4291      	cmp	r1, r2
 80076bc:	d1f9      	bne.n	80076b2 <memcpy+0xe>
 80076be:	bd10      	pop	{r4, pc}

080076c0 <_Balloc>:
 80076c0:	b570      	push	{r4, r5, r6, lr}
 80076c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076c4:	4604      	mov	r4, r0
 80076c6:	460d      	mov	r5, r1
 80076c8:	b976      	cbnz	r6, 80076e8 <_Balloc+0x28>
 80076ca:	2010      	movs	r0, #16
 80076cc:	f7ff ffe2 	bl	8007694 <malloc>
 80076d0:	4602      	mov	r2, r0
 80076d2:	6260      	str	r0, [r4, #36]	; 0x24
 80076d4:	b920      	cbnz	r0, 80076e0 <_Balloc+0x20>
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <_Balloc+0x78>)
 80076d8:	4818      	ldr	r0, [pc, #96]	; (800773c <_Balloc+0x7c>)
 80076da:	2166      	movs	r1, #102	; 0x66
 80076dc:	f000 fcd0 	bl	8008080 <__assert_func>
 80076e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076e4:	6006      	str	r6, [r0, #0]
 80076e6:	60c6      	str	r6, [r0, #12]
 80076e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076ea:	68f3      	ldr	r3, [r6, #12]
 80076ec:	b183      	cbz	r3, 8007710 <_Balloc+0x50>
 80076ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076f6:	b9b8      	cbnz	r0, 8007728 <_Balloc+0x68>
 80076f8:	2101      	movs	r1, #1
 80076fa:	fa01 f605 	lsl.w	r6, r1, r5
 80076fe:	1d72      	adds	r2, r6, #5
 8007700:	0092      	lsls	r2, r2, #2
 8007702:	4620      	mov	r0, r4
 8007704:	f000 fb60 	bl	8007dc8 <_calloc_r>
 8007708:	b160      	cbz	r0, 8007724 <_Balloc+0x64>
 800770a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800770e:	e00e      	b.n	800772e <_Balloc+0x6e>
 8007710:	2221      	movs	r2, #33	; 0x21
 8007712:	2104      	movs	r1, #4
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fb57 	bl	8007dc8 <_calloc_r>
 800771a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800771c:	60f0      	str	r0, [r6, #12]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1e4      	bne.n	80076ee <_Balloc+0x2e>
 8007724:	2000      	movs	r0, #0
 8007726:	bd70      	pop	{r4, r5, r6, pc}
 8007728:	6802      	ldr	r2, [r0, #0]
 800772a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800772e:	2300      	movs	r3, #0
 8007730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007734:	e7f7      	b.n	8007726 <_Balloc+0x66>
 8007736:	bf00      	nop
 8007738:	080091e5 	.word	0x080091e5
 800773c:	080092c8 	.word	0x080092c8

08007740 <_Bfree>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007744:	4605      	mov	r5, r0
 8007746:	460c      	mov	r4, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Bfree+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f7ff ffa2 	bl	8007694 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	6268      	str	r0, [r5, #36]	; 0x24
 8007754:	b920      	cbnz	r0, 8007760 <_Bfree+0x20>
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <_Bfree+0x3c>)
 8007758:	4809      	ldr	r0, [pc, #36]	; (8007780 <_Bfree+0x40>)
 800775a:	218a      	movs	r1, #138	; 0x8a
 800775c:	f000 fc90 	bl	8008080 <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	b13c      	cbz	r4, 800777a <_Bfree+0x3a>
 800776a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800776c:	6862      	ldr	r2, [r4, #4]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007774:	6021      	str	r1, [r4, #0]
 8007776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	080091e5 	.word	0x080091e5
 8007780:	080092c8 	.word	0x080092c8

08007784 <__multadd>:
 8007784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007788:	690d      	ldr	r5, [r1, #16]
 800778a:	4607      	mov	r7, r0
 800778c:	460c      	mov	r4, r1
 800778e:	461e      	mov	r6, r3
 8007790:	f101 0c14 	add.w	ip, r1, #20
 8007794:	2000      	movs	r0, #0
 8007796:	f8dc 3000 	ldr.w	r3, [ip]
 800779a:	b299      	uxth	r1, r3
 800779c:	fb02 6101 	mla	r1, r2, r1, r6
 80077a0:	0c1e      	lsrs	r6, r3, #16
 80077a2:	0c0b      	lsrs	r3, r1, #16
 80077a4:	fb02 3306 	mla	r3, r2, r6, r3
 80077a8:	b289      	uxth	r1, r1
 80077aa:	3001      	adds	r0, #1
 80077ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077b0:	4285      	cmp	r5, r0
 80077b2:	f84c 1b04 	str.w	r1, [ip], #4
 80077b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077ba:	dcec      	bgt.n	8007796 <__multadd+0x12>
 80077bc:	b30e      	cbz	r6, 8007802 <__multadd+0x7e>
 80077be:	68a3      	ldr	r3, [r4, #8]
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dc19      	bgt.n	80077f8 <__multadd+0x74>
 80077c4:	6861      	ldr	r1, [r4, #4]
 80077c6:	4638      	mov	r0, r7
 80077c8:	3101      	adds	r1, #1
 80077ca:	f7ff ff79 	bl	80076c0 <_Balloc>
 80077ce:	4680      	mov	r8, r0
 80077d0:	b928      	cbnz	r0, 80077de <__multadd+0x5a>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <__multadd+0x84>)
 80077d6:	480d      	ldr	r0, [pc, #52]	; (800780c <__multadd+0x88>)
 80077d8:	21b5      	movs	r1, #181	; 0xb5
 80077da:	f000 fc51 	bl	8008080 <__assert_func>
 80077de:	6922      	ldr	r2, [r4, #16]
 80077e0:	3202      	adds	r2, #2
 80077e2:	f104 010c 	add.w	r1, r4, #12
 80077e6:	0092      	lsls	r2, r2, #2
 80077e8:	300c      	adds	r0, #12
 80077ea:	f7ff ff5b 	bl	80076a4 <memcpy>
 80077ee:	4621      	mov	r1, r4
 80077f0:	4638      	mov	r0, r7
 80077f2:	f7ff ffa5 	bl	8007740 <_Bfree>
 80077f6:	4644      	mov	r4, r8
 80077f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077fc:	3501      	adds	r5, #1
 80077fe:	615e      	str	r6, [r3, #20]
 8007800:	6125      	str	r5, [r4, #16]
 8007802:	4620      	mov	r0, r4
 8007804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007808:	08009257 	.word	0x08009257
 800780c:	080092c8 	.word	0x080092c8

08007810 <__hi0bits>:
 8007810:	0c03      	lsrs	r3, r0, #16
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	b9d3      	cbnz	r3, 800784c <__hi0bits+0x3c>
 8007816:	0400      	lsls	r0, r0, #16
 8007818:	2310      	movs	r3, #16
 800781a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800781e:	bf04      	itt	eq
 8007820:	0200      	lsleq	r0, r0, #8
 8007822:	3308      	addeq	r3, #8
 8007824:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007828:	bf04      	itt	eq
 800782a:	0100      	lsleq	r0, r0, #4
 800782c:	3304      	addeq	r3, #4
 800782e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007832:	bf04      	itt	eq
 8007834:	0080      	lsleq	r0, r0, #2
 8007836:	3302      	addeq	r3, #2
 8007838:	2800      	cmp	r0, #0
 800783a:	db05      	blt.n	8007848 <__hi0bits+0x38>
 800783c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007840:	f103 0301 	add.w	r3, r3, #1
 8007844:	bf08      	it	eq
 8007846:	2320      	moveq	r3, #32
 8007848:	4618      	mov	r0, r3
 800784a:	4770      	bx	lr
 800784c:	2300      	movs	r3, #0
 800784e:	e7e4      	b.n	800781a <__hi0bits+0xa>

08007850 <__lo0bits>:
 8007850:	6803      	ldr	r3, [r0, #0]
 8007852:	f013 0207 	ands.w	r2, r3, #7
 8007856:	4601      	mov	r1, r0
 8007858:	d00b      	beq.n	8007872 <__lo0bits+0x22>
 800785a:	07da      	lsls	r2, r3, #31
 800785c:	d423      	bmi.n	80078a6 <__lo0bits+0x56>
 800785e:	0798      	lsls	r0, r3, #30
 8007860:	bf49      	itett	mi
 8007862:	085b      	lsrmi	r3, r3, #1
 8007864:	089b      	lsrpl	r3, r3, #2
 8007866:	2001      	movmi	r0, #1
 8007868:	600b      	strmi	r3, [r1, #0]
 800786a:	bf5c      	itt	pl
 800786c:	600b      	strpl	r3, [r1, #0]
 800786e:	2002      	movpl	r0, #2
 8007870:	4770      	bx	lr
 8007872:	b298      	uxth	r0, r3
 8007874:	b9a8      	cbnz	r0, 80078a2 <__lo0bits+0x52>
 8007876:	0c1b      	lsrs	r3, r3, #16
 8007878:	2010      	movs	r0, #16
 800787a:	b2da      	uxtb	r2, r3
 800787c:	b90a      	cbnz	r2, 8007882 <__lo0bits+0x32>
 800787e:	3008      	adds	r0, #8
 8007880:	0a1b      	lsrs	r3, r3, #8
 8007882:	071a      	lsls	r2, r3, #28
 8007884:	bf04      	itt	eq
 8007886:	091b      	lsreq	r3, r3, #4
 8007888:	3004      	addeq	r0, #4
 800788a:	079a      	lsls	r2, r3, #30
 800788c:	bf04      	itt	eq
 800788e:	089b      	lsreq	r3, r3, #2
 8007890:	3002      	addeq	r0, #2
 8007892:	07da      	lsls	r2, r3, #31
 8007894:	d403      	bmi.n	800789e <__lo0bits+0x4e>
 8007896:	085b      	lsrs	r3, r3, #1
 8007898:	f100 0001 	add.w	r0, r0, #1
 800789c:	d005      	beq.n	80078aa <__lo0bits+0x5a>
 800789e:	600b      	str	r3, [r1, #0]
 80078a0:	4770      	bx	lr
 80078a2:	4610      	mov	r0, r2
 80078a4:	e7e9      	b.n	800787a <__lo0bits+0x2a>
 80078a6:	2000      	movs	r0, #0
 80078a8:	4770      	bx	lr
 80078aa:	2020      	movs	r0, #32
 80078ac:	4770      	bx	lr
	...

080078b0 <__i2b>:
 80078b0:	b510      	push	{r4, lr}
 80078b2:	460c      	mov	r4, r1
 80078b4:	2101      	movs	r1, #1
 80078b6:	f7ff ff03 	bl	80076c0 <_Balloc>
 80078ba:	4602      	mov	r2, r0
 80078bc:	b928      	cbnz	r0, 80078ca <__i2b+0x1a>
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <__i2b+0x24>)
 80078c0:	4805      	ldr	r0, [pc, #20]	; (80078d8 <__i2b+0x28>)
 80078c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80078c6:	f000 fbdb 	bl	8008080 <__assert_func>
 80078ca:	2301      	movs	r3, #1
 80078cc:	6144      	str	r4, [r0, #20]
 80078ce:	6103      	str	r3, [r0, #16]
 80078d0:	bd10      	pop	{r4, pc}
 80078d2:	bf00      	nop
 80078d4:	08009257 	.word	0x08009257
 80078d8:	080092c8 	.word	0x080092c8

080078dc <__multiply>:
 80078dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	4691      	mov	r9, r2
 80078e2:	690a      	ldr	r2, [r1, #16]
 80078e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	bfb8      	it	lt
 80078ec:	460b      	movlt	r3, r1
 80078ee:	460c      	mov	r4, r1
 80078f0:	bfbc      	itt	lt
 80078f2:	464c      	movlt	r4, r9
 80078f4:	4699      	movlt	r9, r3
 80078f6:	6927      	ldr	r7, [r4, #16]
 80078f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078fc:	68a3      	ldr	r3, [r4, #8]
 80078fe:	6861      	ldr	r1, [r4, #4]
 8007900:	eb07 060a 	add.w	r6, r7, sl
 8007904:	42b3      	cmp	r3, r6
 8007906:	b085      	sub	sp, #20
 8007908:	bfb8      	it	lt
 800790a:	3101      	addlt	r1, #1
 800790c:	f7ff fed8 	bl	80076c0 <_Balloc>
 8007910:	b930      	cbnz	r0, 8007920 <__multiply+0x44>
 8007912:	4602      	mov	r2, r0
 8007914:	4b44      	ldr	r3, [pc, #272]	; (8007a28 <__multiply+0x14c>)
 8007916:	4845      	ldr	r0, [pc, #276]	; (8007a2c <__multiply+0x150>)
 8007918:	f240 115d 	movw	r1, #349	; 0x15d
 800791c:	f000 fbb0 	bl	8008080 <__assert_func>
 8007920:	f100 0514 	add.w	r5, r0, #20
 8007924:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007928:	462b      	mov	r3, r5
 800792a:	2200      	movs	r2, #0
 800792c:	4543      	cmp	r3, r8
 800792e:	d321      	bcc.n	8007974 <__multiply+0x98>
 8007930:	f104 0314 	add.w	r3, r4, #20
 8007934:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007938:	f109 0314 	add.w	r3, r9, #20
 800793c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007940:	9202      	str	r2, [sp, #8]
 8007942:	1b3a      	subs	r2, r7, r4
 8007944:	3a15      	subs	r2, #21
 8007946:	f022 0203 	bic.w	r2, r2, #3
 800794a:	3204      	adds	r2, #4
 800794c:	f104 0115 	add.w	r1, r4, #21
 8007950:	428f      	cmp	r7, r1
 8007952:	bf38      	it	cc
 8007954:	2204      	movcc	r2, #4
 8007956:	9201      	str	r2, [sp, #4]
 8007958:	9a02      	ldr	r2, [sp, #8]
 800795a:	9303      	str	r3, [sp, #12]
 800795c:	429a      	cmp	r2, r3
 800795e:	d80c      	bhi.n	800797a <__multiply+0x9e>
 8007960:	2e00      	cmp	r6, #0
 8007962:	dd03      	ble.n	800796c <__multiply+0x90>
 8007964:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007968:	2b00      	cmp	r3, #0
 800796a:	d05a      	beq.n	8007a22 <__multiply+0x146>
 800796c:	6106      	str	r6, [r0, #16]
 800796e:	b005      	add	sp, #20
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	f843 2b04 	str.w	r2, [r3], #4
 8007978:	e7d8      	b.n	800792c <__multiply+0x50>
 800797a:	f8b3 a000 	ldrh.w	sl, [r3]
 800797e:	f1ba 0f00 	cmp.w	sl, #0
 8007982:	d024      	beq.n	80079ce <__multiply+0xf2>
 8007984:	f104 0e14 	add.w	lr, r4, #20
 8007988:	46a9      	mov	r9, r5
 800798a:	f04f 0c00 	mov.w	ip, #0
 800798e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007992:	f8d9 1000 	ldr.w	r1, [r9]
 8007996:	fa1f fb82 	uxth.w	fp, r2
 800799a:	b289      	uxth	r1, r1
 800799c:	fb0a 110b 	mla	r1, sl, fp, r1
 80079a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80079a4:	f8d9 2000 	ldr.w	r2, [r9]
 80079a8:	4461      	add	r1, ip
 80079aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80079b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079b6:	b289      	uxth	r1, r1
 80079b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079bc:	4577      	cmp	r7, lr
 80079be:	f849 1b04 	str.w	r1, [r9], #4
 80079c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079c6:	d8e2      	bhi.n	800798e <__multiply+0xb2>
 80079c8:	9a01      	ldr	r2, [sp, #4]
 80079ca:	f845 c002 	str.w	ip, [r5, r2]
 80079ce:	9a03      	ldr	r2, [sp, #12]
 80079d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079d4:	3304      	adds	r3, #4
 80079d6:	f1b9 0f00 	cmp.w	r9, #0
 80079da:	d020      	beq.n	8007a1e <__multiply+0x142>
 80079dc:	6829      	ldr	r1, [r5, #0]
 80079de:	f104 0c14 	add.w	ip, r4, #20
 80079e2:	46ae      	mov	lr, r5
 80079e4:	f04f 0a00 	mov.w	sl, #0
 80079e8:	f8bc b000 	ldrh.w	fp, [ip]
 80079ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80079f0:	fb09 220b 	mla	r2, r9, fp, r2
 80079f4:	4492      	add	sl, r2
 80079f6:	b289      	uxth	r1, r1
 80079f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80079fc:	f84e 1b04 	str.w	r1, [lr], #4
 8007a00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a04:	f8be 1000 	ldrh.w	r1, [lr]
 8007a08:	0c12      	lsrs	r2, r2, #16
 8007a0a:	fb09 1102 	mla	r1, r9, r2, r1
 8007a0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a12:	4567      	cmp	r7, ip
 8007a14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a18:	d8e6      	bhi.n	80079e8 <__multiply+0x10c>
 8007a1a:	9a01      	ldr	r2, [sp, #4]
 8007a1c:	50a9      	str	r1, [r5, r2]
 8007a1e:	3504      	adds	r5, #4
 8007a20:	e79a      	b.n	8007958 <__multiply+0x7c>
 8007a22:	3e01      	subs	r6, #1
 8007a24:	e79c      	b.n	8007960 <__multiply+0x84>
 8007a26:	bf00      	nop
 8007a28:	08009257 	.word	0x08009257
 8007a2c:	080092c8 	.word	0x080092c8

08007a30 <__pow5mult>:
 8007a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a34:	4615      	mov	r5, r2
 8007a36:	f012 0203 	ands.w	r2, r2, #3
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460f      	mov	r7, r1
 8007a3e:	d007      	beq.n	8007a50 <__pow5mult+0x20>
 8007a40:	4c25      	ldr	r4, [pc, #148]	; (8007ad8 <__pow5mult+0xa8>)
 8007a42:	3a01      	subs	r2, #1
 8007a44:	2300      	movs	r3, #0
 8007a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a4a:	f7ff fe9b 	bl	8007784 <__multadd>
 8007a4e:	4607      	mov	r7, r0
 8007a50:	10ad      	asrs	r5, r5, #2
 8007a52:	d03d      	beq.n	8007ad0 <__pow5mult+0xa0>
 8007a54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a56:	b97c      	cbnz	r4, 8007a78 <__pow5mult+0x48>
 8007a58:	2010      	movs	r0, #16
 8007a5a:	f7ff fe1b 	bl	8007694 <malloc>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	6270      	str	r0, [r6, #36]	; 0x24
 8007a62:	b928      	cbnz	r0, 8007a70 <__pow5mult+0x40>
 8007a64:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <__pow5mult+0xac>)
 8007a66:	481e      	ldr	r0, [pc, #120]	; (8007ae0 <__pow5mult+0xb0>)
 8007a68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007a6c:	f000 fb08 	bl	8008080 <__assert_func>
 8007a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a74:	6004      	str	r4, [r0, #0]
 8007a76:	60c4      	str	r4, [r0, #12]
 8007a78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a80:	b94c      	cbnz	r4, 8007a96 <__pow5mult+0x66>
 8007a82:	f240 2171 	movw	r1, #625	; 0x271
 8007a86:	4630      	mov	r0, r6
 8007a88:	f7ff ff12 	bl	80078b0 <__i2b>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a92:	4604      	mov	r4, r0
 8007a94:	6003      	str	r3, [r0, #0]
 8007a96:	f04f 0900 	mov.w	r9, #0
 8007a9a:	07eb      	lsls	r3, r5, #31
 8007a9c:	d50a      	bpl.n	8007ab4 <__pow5mult+0x84>
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	4622      	mov	r2, r4
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7ff ff1a 	bl	80078dc <__multiply>
 8007aa8:	4639      	mov	r1, r7
 8007aaa:	4680      	mov	r8, r0
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7ff fe47 	bl	8007740 <_Bfree>
 8007ab2:	4647      	mov	r7, r8
 8007ab4:	106d      	asrs	r5, r5, #1
 8007ab6:	d00b      	beq.n	8007ad0 <__pow5mult+0xa0>
 8007ab8:	6820      	ldr	r0, [r4, #0]
 8007aba:	b938      	cbnz	r0, 8007acc <__pow5mult+0x9c>
 8007abc:	4622      	mov	r2, r4
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff ff0b 	bl	80078dc <__multiply>
 8007ac6:	6020      	str	r0, [r4, #0]
 8007ac8:	f8c0 9000 	str.w	r9, [r0]
 8007acc:	4604      	mov	r4, r0
 8007ace:	e7e4      	b.n	8007a9a <__pow5mult+0x6a>
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	bf00      	nop
 8007ad8:	08009418 	.word	0x08009418
 8007adc:	080091e5 	.word	0x080091e5
 8007ae0:	080092c8 	.word	0x080092c8

08007ae4 <__lshift>:
 8007ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ae8:	460c      	mov	r4, r1
 8007aea:	6849      	ldr	r1, [r1, #4]
 8007aec:	6923      	ldr	r3, [r4, #16]
 8007aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007af2:	68a3      	ldr	r3, [r4, #8]
 8007af4:	4607      	mov	r7, r0
 8007af6:	4691      	mov	r9, r2
 8007af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007afc:	f108 0601 	add.w	r6, r8, #1
 8007b00:	42b3      	cmp	r3, r6
 8007b02:	db0b      	blt.n	8007b1c <__lshift+0x38>
 8007b04:	4638      	mov	r0, r7
 8007b06:	f7ff fddb 	bl	80076c0 <_Balloc>
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	b948      	cbnz	r0, 8007b22 <__lshift+0x3e>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	4b2a      	ldr	r3, [pc, #168]	; (8007bbc <__lshift+0xd8>)
 8007b12:	482b      	ldr	r0, [pc, #172]	; (8007bc0 <__lshift+0xdc>)
 8007b14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b18:	f000 fab2 	bl	8008080 <__assert_func>
 8007b1c:	3101      	adds	r1, #1
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	e7ee      	b.n	8007b00 <__lshift+0x1c>
 8007b22:	2300      	movs	r3, #0
 8007b24:	f100 0114 	add.w	r1, r0, #20
 8007b28:	f100 0210 	add.w	r2, r0, #16
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	4553      	cmp	r3, sl
 8007b30:	db37      	blt.n	8007ba2 <__lshift+0xbe>
 8007b32:	6920      	ldr	r0, [r4, #16]
 8007b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b38:	f104 0314 	add.w	r3, r4, #20
 8007b3c:	f019 091f 	ands.w	r9, r9, #31
 8007b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b48:	d02f      	beq.n	8007baa <__lshift+0xc6>
 8007b4a:	f1c9 0e20 	rsb	lr, r9, #32
 8007b4e:	468a      	mov	sl, r1
 8007b50:	f04f 0c00 	mov.w	ip, #0
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	fa02 f209 	lsl.w	r2, r2, r9
 8007b5a:	ea42 020c 	orr.w	r2, r2, ip
 8007b5e:	f84a 2b04 	str.w	r2, [sl], #4
 8007b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b66:	4298      	cmp	r0, r3
 8007b68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007b6c:	d8f2      	bhi.n	8007b54 <__lshift+0x70>
 8007b6e:	1b03      	subs	r3, r0, r4
 8007b70:	3b15      	subs	r3, #21
 8007b72:	f023 0303 	bic.w	r3, r3, #3
 8007b76:	3304      	adds	r3, #4
 8007b78:	f104 0215 	add.w	r2, r4, #21
 8007b7c:	4290      	cmp	r0, r2
 8007b7e:	bf38      	it	cc
 8007b80:	2304      	movcc	r3, #4
 8007b82:	f841 c003 	str.w	ip, [r1, r3]
 8007b86:	f1bc 0f00 	cmp.w	ip, #0
 8007b8a:	d001      	beq.n	8007b90 <__lshift+0xac>
 8007b8c:	f108 0602 	add.w	r6, r8, #2
 8007b90:	3e01      	subs	r6, #1
 8007b92:	4638      	mov	r0, r7
 8007b94:	612e      	str	r6, [r5, #16]
 8007b96:	4621      	mov	r1, r4
 8007b98:	f7ff fdd2 	bl	8007740 <_Bfree>
 8007b9c:	4628      	mov	r0, r5
 8007b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	e7c1      	b.n	8007b2e <__lshift+0x4a>
 8007baa:	3904      	subs	r1, #4
 8007bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bb4:	4298      	cmp	r0, r3
 8007bb6:	d8f9      	bhi.n	8007bac <__lshift+0xc8>
 8007bb8:	e7ea      	b.n	8007b90 <__lshift+0xac>
 8007bba:	bf00      	nop
 8007bbc:	08009257 	.word	0x08009257
 8007bc0:	080092c8 	.word	0x080092c8

08007bc4 <__mcmp>:
 8007bc4:	b530      	push	{r4, r5, lr}
 8007bc6:	6902      	ldr	r2, [r0, #16]
 8007bc8:	690c      	ldr	r4, [r1, #16]
 8007bca:	1b12      	subs	r2, r2, r4
 8007bcc:	d10e      	bne.n	8007bec <__mcmp+0x28>
 8007bce:	f100 0314 	add.w	r3, r0, #20
 8007bd2:	3114      	adds	r1, #20
 8007bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007be4:	42a5      	cmp	r5, r4
 8007be6:	d003      	beq.n	8007bf0 <__mcmp+0x2c>
 8007be8:	d305      	bcc.n	8007bf6 <__mcmp+0x32>
 8007bea:	2201      	movs	r2, #1
 8007bec:	4610      	mov	r0, r2
 8007bee:	bd30      	pop	{r4, r5, pc}
 8007bf0:	4283      	cmp	r3, r0
 8007bf2:	d3f3      	bcc.n	8007bdc <__mcmp+0x18>
 8007bf4:	e7fa      	b.n	8007bec <__mcmp+0x28>
 8007bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfa:	e7f7      	b.n	8007bec <__mcmp+0x28>

08007bfc <__mdiff>:
 8007bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c00:	460c      	mov	r4, r1
 8007c02:	4606      	mov	r6, r0
 8007c04:	4611      	mov	r1, r2
 8007c06:	4620      	mov	r0, r4
 8007c08:	4690      	mov	r8, r2
 8007c0a:	f7ff ffdb 	bl	8007bc4 <__mcmp>
 8007c0e:	1e05      	subs	r5, r0, #0
 8007c10:	d110      	bne.n	8007c34 <__mdiff+0x38>
 8007c12:	4629      	mov	r1, r5
 8007c14:	4630      	mov	r0, r6
 8007c16:	f7ff fd53 	bl	80076c0 <_Balloc>
 8007c1a:	b930      	cbnz	r0, 8007c2a <__mdiff+0x2e>
 8007c1c:	4b3a      	ldr	r3, [pc, #232]	; (8007d08 <__mdiff+0x10c>)
 8007c1e:	4602      	mov	r2, r0
 8007c20:	f240 2132 	movw	r1, #562	; 0x232
 8007c24:	4839      	ldr	r0, [pc, #228]	; (8007d0c <__mdiff+0x110>)
 8007c26:	f000 fa2b 	bl	8008080 <__assert_func>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c34:	bfa4      	itt	ge
 8007c36:	4643      	movge	r3, r8
 8007c38:	46a0      	movge	r8, r4
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c40:	bfa6      	itte	ge
 8007c42:	461c      	movge	r4, r3
 8007c44:	2500      	movge	r5, #0
 8007c46:	2501      	movlt	r5, #1
 8007c48:	f7ff fd3a 	bl	80076c0 <_Balloc>
 8007c4c:	b920      	cbnz	r0, 8007c58 <__mdiff+0x5c>
 8007c4e:	4b2e      	ldr	r3, [pc, #184]	; (8007d08 <__mdiff+0x10c>)
 8007c50:	4602      	mov	r2, r0
 8007c52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007c56:	e7e5      	b.n	8007c24 <__mdiff+0x28>
 8007c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c5c:	6926      	ldr	r6, [r4, #16]
 8007c5e:	60c5      	str	r5, [r0, #12]
 8007c60:	f104 0914 	add.w	r9, r4, #20
 8007c64:	f108 0514 	add.w	r5, r8, #20
 8007c68:	f100 0e14 	add.w	lr, r0, #20
 8007c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c74:	f108 0210 	add.w	r2, r8, #16
 8007c78:	46f2      	mov	sl, lr
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c84:	fa1f f883 	uxth.w	r8, r3
 8007c88:	fa11 f18b 	uxtah	r1, r1, fp
 8007c8c:	0c1b      	lsrs	r3, r3, #16
 8007c8e:	eba1 0808 	sub.w	r8, r1, r8
 8007c92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c9a:	fa1f f888 	uxth.w	r8, r8
 8007c9e:	1419      	asrs	r1, r3, #16
 8007ca0:	454e      	cmp	r6, r9
 8007ca2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007ca6:	f84a 3b04 	str.w	r3, [sl], #4
 8007caa:	d8e7      	bhi.n	8007c7c <__mdiff+0x80>
 8007cac:	1b33      	subs	r3, r6, r4
 8007cae:	3b15      	subs	r3, #21
 8007cb0:	f023 0303 	bic.w	r3, r3, #3
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	3415      	adds	r4, #21
 8007cb8:	42a6      	cmp	r6, r4
 8007cba:	bf38      	it	cc
 8007cbc:	2304      	movcc	r3, #4
 8007cbe:	441d      	add	r5, r3
 8007cc0:	4473      	add	r3, lr
 8007cc2:	469e      	mov	lr, r3
 8007cc4:	462e      	mov	r6, r5
 8007cc6:	4566      	cmp	r6, ip
 8007cc8:	d30e      	bcc.n	8007ce8 <__mdiff+0xec>
 8007cca:	f10c 0203 	add.w	r2, ip, #3
 8007cce:	1b52      	subs	r2, r2, r5
 8007cd0:	f022 0203 	bic.w	r2, r2, #3
 8007cd4:	3d03      	subs	r5, #3
 8007cd6:	45ac      	cmp	ip, r5
 8007cd8:	bf38      	it	cc
 8007cda:	2200      	movcc	r2, #0
 8007cdc:	441a      	add	r2, r3
 8007cde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ce2:	b17b      	cbz	r3, 8007d04 <__mdiff+0x108>
 8007ce4:	6107      	str	r7, [r0, #16]
 8007ce6:	e7a3      	b.n	8007c30 <__mdiff+0x34>
 8007ce8:	f856 8b04 	ldr.w	r8, [r6], #4
 8007cec:	fa11 f288 	uxtah	r2, r1, r8
 8007cf0:	1414      	asrs	r4, r2, #16
 8007cf2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007cfc:	f84e 2b04 	str.w	r2, [lr], #4
 8007d00:	1421      	asrs	r1, r4, #16
 8007d02:	e7e0      	b.n	8007cc6 <__mdiff+0xca>
 8007d04:	3f01      	subs	r7, #1
 8007d06:	e7ea      	b.n	8007cde <__mdiff+0xe2>
 8007d08:	08009257 	.word	0x08009257
 8007d0c:	080092c8 	.word	0x080092c8

08007d10 <__d2b>:
 8007d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d14:	4689      	mov	r9, r1
 8007d16:	2101      	movs	r1, #1
 8007d18:	ec57 6b10 	vmov	r6, r7, d0
 8007d1c:	4690      	mov	r8, r2
 8007d1e:	f7ff fccf 	bl	80076c0 <_Balloc>
 8007d22:	4604      	mov	r4, r0
 8007d24:	b930      	cbnz	r0, 8007d34 <__d2b+0x24>
 8007d26:	4602      	mov	r2, r0
 8007d28:	4b25      	ldr	r3, [pc, #148]	; (8007dc0 <__d2b+0xb0>)
 8007d2a:	4826      	ldr	r0, [pc, #152]	; (8007dc4 <__d2b+0xb4>)
 8007d2c:	f240 310a 	movw	r1, #778	; 0x30a
 8007d30:	f000 f9a6 	bl	8008080 <__assert_func>
 8007d34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d3c:	bb35      	cbnz	r5, 8007d8c <__d2b+0x7c>
 8007d3e:	2e00      	cmp	r6, #0
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	d028      	beq.n	8007d96 <__d2b+0x86>
 8007d44:	4668      	mov	r0, sp
 8007d46:	9600      	str	r6, [sp, #0]
 8007d48:	f7ff fd82 	bl	8007850 <__lo0bits>
 8007d4c:	9900      	ldr	r1, [sp, #0]
 8007d4e:	b300      	cbz	r0, 8007d92 <__d2b+0x82>
 8007d50:	9a01      	ldr	r2, [sp, #4]
 8007d52:	f1c0 0320 	rsb	r3, r0, #32
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	430b      	orrs	r3, r1
 8007d5c:	40c2      	lsrs	r2, r0
 8007d5e:	6163      	str	r3, [r4, #20]
 8007d60:	9201      	str	r2, [sp, #4]
 8007d62:	9b01      	ldr	r3, [sp, #4]
 8007d64:	61a3      	str	r3, [r4, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bf14      	ite	ne
 8007d6a:	2202      	movne	r2, #2
 8007d6c:	2201      	moveq	r2, #1
 8007d6e:	6122      	str	r2, [r4, #16]
 8007d70:	b1d5      	cbz	r5, 8007da8 <__d2b+0x98>
 8007d72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d76:	4405      	add	r5, r0
 8007d78:	f8c9 5000 	str.w	r5, [r9]
 8007d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d80:	f8c8 0000 	str.w	r0, [r8]
 8007d84:	4620      	mov	r0, r4
 8007d86:	b003      	add	sp, #12
 8007d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d90:	e7d5      	b.n	8007d3e <__d2b+0x2e>
 8007d92:	6161      	str	r1, [r4, #20]
 8007d94:	e7e5      	b.n	8007d62 <__d2b+0x52>
 8007d96:	a801      	add	r0, sp, #4
 8007d98:	f7ff fd5a 	bl	8007850 <__lo0bits>
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	2201      	movs	r2, #1
 8007da2:	6122      	str	r2, [r4, #16]
 8007da4:	3020      	adds	r0, #32
 8007da6:	e7e3      	b.n	8007d70 <__d2b+0x60>
 8007da8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007db0:	f8c9 0000 	str.w	r0, [r9]
 8007db4:	6918      	ldr	r0, [r3, #16]
 8007db6:	f7ff fd2b 	bl	8007810 <__hi0bits>
 8007dba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dbe:	e7df      	b.n	8007d80 <__d2b+0x70>
 8007dc0:	08009257 	.word	0x08009257
 8007dc4:	080092c8 	.word	0x080092c8

08007dc8 <_calloc_r>:
 8007dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dca:	fba1 2402 	umull	r2, r4, r1, r2
 8007dce:	b94c      	cbnz	r4, 8007de4 <_calloc_r+0x1c>
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	9201      	str	r2, [sp, #4]
 8007dd4:	f000 f87a 	bl	8007ecc <_malloc_r>
 8007dd8:	9a01      	ldr	r2, [sp, #4]
 8007dda:	4605      	mov	r5, r0
 8007ddc:	b930      	cbnz	r0, 8007dec <_calloc_r+0x24>
 8007dde:	4628      	mov	r0, r5
 8007de0:	b003      	add	sp, #12
 8007de2:	bd30      	pop	{r4, r5, pc}
 8007de4:	220c      	movs	r2, #12
 8007de6:	6002      	str	r2, [r0, #0]
 8007de8:	2500      	movs	r5, #0
 8007dea:	e7f8      	b.n	8007dde <_calloc_r+0x16>
 8007dec:	4621      	mov	r1, r4
 8007dee:	f7fd feb1 	bl	8005b54 <memset>
 8007df2:	e7f4      	b.n	8007dde <_calloc_r+0x16>

08007df4 <_free_r>:
 8007df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007df6:	2900      	cmp	r1, #0
 8007df8:	d044      	beq.n	8007e84 <_free_r+0x90>
 8007dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dfe:	9001      	str	r0, [sp, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f1a1 0404 	sub.w	r4, r1, #4
 8007e06:	bfb8      	it	lt
 8007e08:	18e4      	addlt	r4, r4, r3
 8007e0a:	f000 f9bf 	bl	800818c <__malloc_lock>
 8007e0e:	4a1e      	ldr	r2, [pc, #120]	; (8007e88 <_free_r+0x94>)
 8007e10:	9801      	ldr	r0, [sp, #4]
 8007e12:	6813      	ldr	r3, [r2, #0]
 8007e14:	b933      	cbnz	r3, 8007e24 <_free_r+0x30>
 8007e16:	6063      	str	r3, [r4, #4]
 8007e18:	6014      	str	r4, [r2, #0]
 8007e1a:	b003      	add	sp, #12
 8007e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e20:	f000 b9ba 	b.w	8008198 <__malloc_unlock>
 8007e24:	42a3      	cmp	r3, r4
 8007e26:	d908      	bls.n	8007e3a <_free_r+0x46>
 8007e28:	6825      	ldr	r5, [r4, #0]
 8007e2a:	1961      	adds	r1, r4, r5
 8007e2c:	428b      	cmp	r3, r1
 8007e2e:	bf01      	itttt	eq
 8007e30:	6819      	ldreq	r1, [r3, #0]
 8007e32:	685b      	ldreq	r3, [r3, #4]
 8007e34:	1949      	addeq	r1, r1, r5
 8007e36:	6021      	streq	r1, [r4, #0]
 8007e38:	e7ed      	b.n	8007e16 <_free_r+0x22>
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	b10b      	cbz	r3, 8007e44 <_free_r+0x50>
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d9fa      	bls.n	8007e3a <_free_r+0x46>
 8007e44:	6811      	ldr	r1, [r2, #0]
 8007e46:	1855      	adds	r5, r2, r1
 8007e48:	42a5      	cmp	r5, r4
 8007e4a:	d10b      	bne.n	8007e64 <_free_r+0x70>
 8007e4c:	6824      	ldr	r4, [r4, #0]
 8007e4e:	4421      	add	r1, r4
 8007e50:	1854      	adds	r4, r2, r1
 8007e52:	42a3      	cmp	r3, r4
 8007e54:	6011      	str	r1, [r2, #0]
 8007e56:	d1e0      	bne.n	8007e1a <_free_r+0x26>
 8007e58:	681c      	ldr	r4, [r3, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	6053      	str	r3, [r2, #4]
 8007e5e:	4421      	add	r1, r4
 8007e60:	6011      	str	r1, [r2, #0]
 8007e62:	e7da      	b.n	8007e1a <_free_r+0x26>
 8007e64:	d902      	bls.n	8007e6c <_free_r+0x78>
 8007e66:	230c      	movs	r3, #12
 8007e68:	6003      	str	r3, [r0, #0]
 8007e6a:	e7d6      	b.n	8007e1a <_free_r+0x26>
 8007e6c:	6825      	ldr	r5, [r4, #0]
 8007e6e:	1961      	adds	r1, r4, r5
 8007e70:	428b      	cmp	r3, r1
 8007e72:	bf04      	itt	eq
 8007e74:	6819      	ldreq	r1, [r3, #0]
 8007e76:	685b      	ldreq	r3, [r3, #4]
 8007e78:	6063      	str	r3, [r4, #4]
 8007e7a:	bf04      	itt	eq
 8007e7c:	1949      	addeq	r1, r1, r5
 8007e7e:	6021      	streq	r1, [r4, #0]
 8007e80:	6054      	str	r4, [r2, #4]
 8007e82:	e7ca      	b.n	8007e1a <_free_r+0x26>
 8007e84:	b003      	add	sp, #12
 8007e86:	bd30      	pop	{r4, r5, pc}
 8007e88:	24000330 	.word	0x24000330

08007e8c <sbrk_aligned>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4e0e      	ldr	r6, [pc, #56]	; (8007ec8 <sbrk_aligned+0x3c>)
 8007e90:	460c      	mov	r4, r1
 8007e92:	6831      	ldr	r1, [r6, #0]
 8007e94:	4605      	mov	r5, r0
 8007e96:	b911      	cbnz	r1, 8007e9e <sbrk_aligned+0x12>
 8007e98:	f000 f88c 	bl	8007fb4 <_sbrk_r>
 8007e9c:	6030      	str	r0, [r6, #0]
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f000 f887 	bl	8007fb4 <_sbrk_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d00a      	beq.n	8007ec0 <sbrk_aligned+0x34>
 8007eaa:	1cc4      	adds	r4, r0, #3
 8007eac:	f024 0403 	bic.w	r4, r4, #3
 8007eb0:	42a0      	cmp	r0, r4
 8007eb2:	d007      	beq.n	8007ec4 <sbrk_aligned+0x38>
 8007eb4:	1a21      	subs	r1, r4, r0
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f87c 	bl	8007fb4 <_sbrk_r>
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d101      	bne.n	8007ec4 <sbrk_aligned+0x38>
 8007ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	24000334 	.word	0x24000334

08007ecc <_malloc_r>:
 8007ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed0:	1ccd      	adds	r5, r1, #3
 8007ed2:	f025 0503 	bic.w	r5, r5, #3
 8007ed6:	3508      	adds	r5, #8
 8007ed8:	2d0c      	cmp	r5, #12
 8007eda:	bf38      	it	cc
 8007edc:	250c      	movcc	r5, #12
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	4607      	mov	r7, r0
 8007ee2:	db01      	blt.n	8007ee8 <_malloc_r+0x1c>
 8007ee4:	42a9      	cmp	r1, r5
 8007ee6:	d905      	bls.n	8007ef4 <_malloc_r+0x28>
 8007ee8:	230c      	movs	r3, #12
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	2600      	movs	r6, #0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef4:	4e2e      	ldr	r6, [pc, #184]	; (8007fb0 <_malloc_r+0xe4>)
 8007ef6:	f000 f949 	bl	800818c <__malloc_lock>
 8007efa:	6833      	ldr	r3, [r6, #0]
 8007efc:	461c      	mov	r4, r3
 8007efe:	bb34      	cbnz	r4, 8007f4e <_malloc_r+0x82>
 8007f00:	4629      	mov	r1, r5
 8007f02:	4638      	mov	r0, r7
 8007f04:	f7ff ffc2 	bl	8007e8c <sbrk_aligned>
 8007f08:	1c43      	adds	r3, r0, #1
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	d14d      	bne.n	8007faa <_malloc_r+0xde>
 8007f0e:	6834      	ldr	r4, [r6, #0]
 8007f10:	4626      	mov	r6, r4
 8007f12:	2e00      	cmp	r6, #0
 8007f14:	d140      	bne.n	8007f98 <_malloc_r+0xcc>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	4631      	mov	r1, r6
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	eb04 0803 	add.w	r8, r4, r3
 8007f20:	f000 f848 	bl	8007fb4 <_sbrk_r>
 8007f24:	4580      	cmp	r8, r0
 8007f26:	d13a      	bne.n	8007f9e <_malloc_r+0xd2>
 8007f28:	6821      	ldr	r1, [r4, #0]
 8007f2a:	3503      	adds	r5, #3
 8007f2c:	1a6d      	subs	r5, r5, r1
 8007f2e:	f025 0503 	bic.w	r5, r5, #3
 8007f32:	3508      	adds	r5, #8
 8007f34:	2d0c      	cmp	r5, #12
 8007f36:	bf38      	it	cc
 8007f38:	250c      	movcc	r5, #12
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ffa5 	bl	8007e8c <sbrk_aligned>
 8007f42:	3001      	adds	r0, #1
 8007f44:	d02b      	beq.n	8007f9e <_malloc_r+0xd2>
 8007f46:	6823      	ldr	r3, [r4, #0]
 8007f48:	442b      	add	r3, r5
 8007f4a:	6023      	str	r3, [r4, #0]
 8007f4c:	e00e      	b.n	8007f6c <_malloc_r+0xa0>
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	1b52      	subs	r2, r2, r5
 8007f52:	d41e      	bmi.n	8007f92 <_malloc_r+0xc6>
 8007f54:	2a0b      	cmp	r2, #11
 8007f56:	d916      	bls.n	8007f86 <_malloc_r+0xba>
 8007f58:	1961      	adds	r1, r4, r5
 8007f5a:	42a3      	cmp	r3, r4
 8007f5c:	6025      	str	r5, [r4, #0]
 8007f5e:	bf18      	it	ne
 8007f60:	6059      	strne	r1, [r3, #4]
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	bf08      	it	eq
 8007f66:	6031      	streq	r1, [r6, #0]
 8007f68:	5162      	str	r2, [r4, r5]
 8007f6a:	604b      	str	r3, [r1, #4]
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f104 060b 	add.w	r6, r4, #11
 8007f72:	f000 f911 	bl	8008198 <__malloc_unlock>
 8007f76:	f026 0607 	bic.w	r6, r6, #7
 8007f7a:	1d23      	adds	r3, r4, #4
 8007f7c:	1af2      	subs	r2, r6, r3
 8007f7e:	d0b6      	beq.n	8007eee <_malloc_r+0x22>
 8007f80:	1b9b      	subs	r3, r3, r6
 8007f82:	50a3      	str	r3, [r4, r2]
 8007f84:	e7b3      	b.n	8007eee <_malloc_r+0x22>
 8007f86:	6862      	ldr	r2, [r4, #4]
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	bf0c      	ite	eq
 8007f8c:	6032      	streq	r2, [r6, #0]
 8007f8e:	605a      	strne	r2, [r3, #4]
 8007f90:	e7ec      	b.n	8007f6c <_malloc_r+0xa0>
 8007f92:	4623      	mov	r3, r4
 8007f94:	6864      	ldr	r4, [r4, #4]
 8007f96:	e7b2      	b.n	8007efe <_malloc_r+0x32>
 8007f98:	4634      	mov	r4, r6
 8007f9a:	6876      	ldr	r6, [r6, #4]
 8007f9c:	e7b9      	b.n	8007f12 <_malloc_r+0x46>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	603b      	str	r3, [r7, #0]
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f000 f8f8 	bl	8008198 <__malloc_unlock>
 8007fa8:	e7a1      	b.n	8007eee <_malloc_r+0x22>
 8007faa:	6025      	str	r5, [r4, #0]
 8007fac:	e7de      	b.n	8007f6c <_malloc_r+0xa0>
 8007fae:	bf00      	nop
 8007fb0:	24000330 	.word	0x24000330

08007fb4 <_sbrk_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d06      	ldr	r5, [pc, #24]	; (8007fd0 <_sbrk_r+0x1c>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	602b      	str	r3, [r5, #0]
 8007fc0:	f7f9 f8aa 	bl	8001118 <_sbrk>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_sbrk_r+0x1a>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_sbrk_r+0x1a>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	24000338 	.word	0x24000338

08007fd4 <__sread>:
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	f000 fa3c 	bl	8008458 <_read_r>
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	bfab      	itete	ge
 8007fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8007fe8:	181b      	addge	r3, r3, r0
 8007fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fee:	bfac      	ite	ge
 8007ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ff2:	81a3      	strhlt	r3, [r4, #12]
 8007ff4:	bd10      	pop	{r4, pc}

08007ff6 <__swrite>:
 8007ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ffa:	461f      	mov	r7, r3
 8007ffc:	898b      	ldrh	r3, [r1, #12]
 8007ffe:	05db      	lsls	r3, r3, #23
 8008000:	4605      	mov	r5, r0
 8008002:	460c      	mov	r4, r1
 8008004:	4616      	mov	r6, r2
 8008006:	d505      	bpl.n	8008014 <__swrite+0x1e>
 8008008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800800c:	2302      	movs	r3, #2
 800800e:	2200      	movs	r2, #0
 8008010:	f000 f898 	bl	8008144 <_lseek_r>
 8008014:	89a3      	ldrh	r3, [r4, #12]
 8008016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800801a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	4632      	mov	r2, r6
 8008022:	463b      	mov	r3, r7
 8008024:	4628      	mov	r0, r5
 8008026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800802a:	f000 b817 	b.w	800805c <_write_r>

0800802e <__sseek>:
 800802e:	b510      	push	{r4, lr}
 8008030:	460c      	mov	r4, r1
 8008032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008036:	f000 f885 	bl	8008144 <_lseek_r>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	bf15      	itete	ne
 8008040:	6560      	strne	r0, [r4, #84]	; 0x54
 8008042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800804a:	81a3      	strheq	r3, [r4, #12]
 800804c:	bf18      	it	ne
 800804e:	81a3      	strhne	r3, [r4, #12]
 8008050:	bd10      	pop	{r4, pc}

08008052 <__sclose>:
 8008052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008056:	f000 b831 	b.w	80080bc <_close_r>
	...

0800805c <_write_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4d07      	ldr	r5, [pc, #28]	; (800807c <_write_r+0x20>)
 8008060:	4604      	mov	r4, r0
 8008062:	4608      	mov	r0, r1
 8008064:	4611      	mov	r1, r2
 8008066:	2200      	movs	r2, #0
 8008068:	602a      	str	r2, [r5, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	f7f9 f803 	bl	8001076 <_write>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_write_r+0x1e>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_write_r+0x1e>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	24000338 	.word	0x24000338

08008080 <__assert_func>:
 8008080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008082:	4614      	mov	r4, r2
 8008084:	461a      	mov	r2, r3
 8008086:	4b09      	ldr	r3, [pc, #36]	; (80080ac <__assert_func+0x2c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4605      	mov	r5, r0
 800808c:	68d8      	ldr	r0, [r3, #12]
 800808e:	b14c      	cbz	r4, 80080a4 <__assert_func+0x24>
 8008090:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <__assert_func+0x30>)
 8008092:	9100      	str	r1, [sp, #0]
 8008094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008098:	4906      	ldr	r1, [pc, #24]	; (80080b4 <__assert_func+0x34>)
 800809a:	462b      	mov	r3, r5
 800809c:	f000 f81e 	bl	80080dc <fiprintf>
 80080a0:	f000 f9f9 	bl	8008496 <abort>
 80080a4:	4b04      	ldr	r3, [pc, #16]	; (80080b8 <__assert_func+0x38>)
 80080a6:	461c      	mov	r4, r3
 80080a8:	e7f3      	b.n	8008092 <__assert_func+0x12>
 80080aa:	bf00      	nop
 80080ac:	24000010 	.word	0x24000010
 80080b0:	08009424 	.word	0x08009424
 80080b4:	08009431 	.word	0x08009431
 80080b8:	0800945f 	.word	0x0800945f

080080bc <_close_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4d06      	ldr	r5, [pc, #24]	; (80080d8 <_close_r+0x1c>)
 80080c0:	2300      	movs	r3, #0
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7f8 fff1 	bl	80010ae <_close>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_close_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_close_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	24000338 	.word	0x24000338

080080dc <fiprintf>:
 80080dc:	b40e      	push	{r1, r2, r3}
 80080de:	b503      	push	{r0, r1, lr}
 80080e0:	4601      	mov	r1, r0
 80080e2:	ab03      	add	r3, sp, #12
 80080e4:	4805      	ldr	r0, [pc, #20]	; (80080fc <fiprintf+0x20>)
 80080e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ea:	6800      	ldr	r0, [r0, #0]
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	f000 f883 	bl	80081f8 <_vfiprintf_r>
 80080f2:	b002      	add	sp, #8
 80080f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080f8:	b003      	add	sp, #12
 80080fa:	4770      	bx	lr
 80080fc:	24000010 	.word	0x24000010

08008100 <_fstat_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d07      	ldr	r5, [pc, #28]	; (8008120 <_fstat_r+0x20>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	f7f8 ffda 	bl	80010c6 <_fstat>
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	d102      	bne.n	800811c <_fstat_r+0x1c>
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	b103      	cbz	r3, 800811c <_fstat_r+0x1c>
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	bd38      	pop	{r3, r4, r5, pc}
 800811e:	bf00      	nop
 8008120:	24000338 	.word	0x24000338

08008124 <_isatty_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d06      	ldr	r5, [pc, #24]	; (8008140 <_isatty_r+0x1c>)
 8008128:	2300      	movs	r3, #0
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	f7f8 ffd9 	bl	80010e6 <_isatty>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_isatty_r+0x1a>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_isatty_r+0x1a>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	24000338 	.word	0x24000338

08008144 <_lseek_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	; (8008164 <_lseek_r+0x20>)
 8008148:	4604      	mov	r4, r0
 800814a:	4608      	mov	r0, r1
 800814c:	4611      	mov	r1, r2
 800814e:	2200      	movs	r2, #0
 8008150:	602a      	str	r2, [r5, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	f7f8 ffd2 	bl	80010fc <_lseek>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d102      	bne.n	8008162 <_lseek_r+0x1e>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	b103      	cbz	r3, 8008162 <_lseek_r+0x1e>
 8008160:	6023      	str	r3, [r4, #0]
 8008162:	bd38      	pop	{r3, r4, r5, pc}
 8008164:	24000338 	.word	0x24000338

08008168 <__ascii_mbtowc>:
 8008168:	b082      	sub	sp, #8
 800816a:	b901      	cbnz	r1, 800816e <__ascii_mbtowc+0x6>
 800816c:	a901      	add	r1, sp, #4
 800816e:	b142      	cbz	r2, 8008182 <__ascii_mbtowc+0x1a>
 8008170:	b14b      	cbz	r3, 8008186 <__ascii_mbtowc+0x1e>
 8008172:	7813      	ldrb	r3, [r2, #0]
 8008174:	600b      	str	r3, [r1, #0]
 8008176:	7812      	ldrb	r2, [r2, #0]
 8008178:	1e10      	subs	r0, r2, #0
 800817a:	bf18      	it	ne
 800817c:	2001      	movne	r0, #1
 800817e:	b002      	add	sp, #8
 8008180:	4770      	bx	lr
 8008182:	4610      	mov	r0, r2
 8008184:	e7fb      	b.n	800817e <__ascii_mbtowc+0x16>
 8008186:	f06f 0001 	mvn.w	r0, #1
 800818a:	e7f8      	b.n	800817e <__ascii_mbtowc+0x16>

0800818c <__malloc_lock>:
 800818c:	4801      	ldr	r0, [pc, #4]	; (8008194 <__malloc_lock+0x8>)
 800818e:	f7ff ba1a 	b.w	80075c6 <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	2400032c 	.word	0x2400032c

08008198 <__malloc_unlock>:
 8008198:	4801      	ldr	r0, [pc, #4]	; (80081a0 <__malloc_unlock+0x8>)
 800819a:	f7ff ba15 	b.w	80075c8 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	2400032c 	.word	0x2400032c

080081a4 <__sfputc_r>:
 80081a4:	6893      	ldr	r3, [r2, #8]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	b410      	push	{r4}
 80081ac:	6093      	str	r3, [r2, #8]
 80081ae:	da08      	bge.n	80081c2 <__sfputc_r+0x1e>
 80081b0:	6994      	ldr	r4, [r2, #24]
 80081b2:	42a3      	cmp	r3, r4
 80081b4:	db01      	blt.n	80081ba <__sfputc_r+0x16>
 80081b6:	290a      	cmp	r1, #10
 80081b8:	d103      	bne.n	80081c2 <__sfputc_r+0x1e>
 80081ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081be:	f7fe b98b 	b.w	80064d8 <__swbuf_r>
 80081c2:	6813      	ldr	r3, [r2, #0]
 80081c4:	1c58      	adds	r0, r3, #1
 80081c6:	6010      	str	r0, [r2, #0]
 80081c8:	7019      	strb	r1, [r3, #0]
 80081ca:	4608      	mov	r0, r1
 80081cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <__sfputs_r>:
 80081d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d4:	4606      	mov	r6, r0
 80081d6:	460f      	mov	r7, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	18d5      	adds	r5, r2, r3
 80081dc:	42ac      	cmp	r4, r5
 80081de:	d101      	bne.n	80081e4 <__sfputs_r+0x12>
 80081e0:	2000      	movs	r0, #0
 80081e2:	e007      	b.n	80081f4 <__sfputs_r+0x22>
 80081e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081e8:	463a      	mov	r2, r7
 80081ea:	4630      	mov	r0, r6
 80081ec:	f7ff ffda 	bl	80081a4 <__sfputc_r>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d1f3      	bne.n	80081dc <__sfputs_r+0xa>
 80081f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081f8 <_vfiprintf_r>:
 80081f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081fc:	460d      	mov	r5, r1
 80081fe:	b09d      	sub	sp, #116	; 0x74
 8008200:	4614      	mov	r4, r2
 8008202:	4698      	mov	r8, r3
 8008204:	4606      	mov	r6, r0
 8008206:	b118      	cbz	r0, 8008210 <_vfiprintf_r+0x18>
 8008208:	6983      	ldr	r3, [r0, #24]
 800820a:	b90b      	cbnz	r3, 8008210 <_vfiprintf_r+0x18>
 800820c:	f7ff f938 	bl	8007480 <__sinit>
 8008210:	4b89      	ldr	r3, [pc, #548]	; (8008438 <_vfiprintf_r+0x240>)
 8008212:	429d      	cmp	r5, r3
 8008214:	d11b      	bne.n	800824e <_vfiprintf_r+0x56>
 8008216:	6875      	ldr	r5, [r6, #4]
 8008218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800821a:	07d9      	lsls	r1, r3, #31
 800821c:	d405      	bmi.n	800822a <_vfiprintf_r+0x32>
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	059a      	lsls	r2, r3, #22
 8008222:	d402      	bmi.n	800822a <_vfiprintf_r+0x32>
 8008224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008226:	f7ff f9ce 	bl	80075c6 <__retarget_lock_acquire_recursive>
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	071b      	lsls	r3, r3, #28
 800822e:	d501      	bpl.n	8008234 <_vfiprintf_r+0x3c>
 8008230:	692b      	ldr	r3, [r5, #16]
 8008232:	b9eb      	cbnz	r3, 8008270 <_vfiprintf_r+0x78>
 8008234:	4629      	mov	r1, r5
 8008236:	4630      	mov	r0, r6
 8008238:	f7fe f9a0 	bl	800657c <__swsetup_r>
 800823c:	b1c0      	cbz	r0, 8008270 <_vfiprintf_r+0x78>
 800823e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008240:	07dc      	lsls	r4, r3, #31
 8008242:	d50e      	bpl.n	8008262 <_vfiprintf_r+0x6a>
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	b01d      	add	sp, #116	; 0x74
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	4b7b      	ldr	r3, [pc, #492]	; (800843c <_vfiprintf_r+0x244>)
 8008250:	429d      	cmp	r5, r3
 8008252:	d101      	bne.n	8008258 <_vfiprintf_r+0x60>
 8008254:	68b5      	ldr	r5, [r6, #8]
 8008256:	e7df      	b.n	8008218 <_vfiprintf_r+0x20>
 8008258:	4b79      	ldr	r3, [pc, #484]	; (8008440 <_vfiprintf_r+0x248>)
 800825a:	429d      	cmp	r5, r3
 800825c:	bf08      	it	eq
 800825e:	68f5      	ldreq	r5, [r6, #12]
 8008260:	e7da      	b.n	8008218 <_vfiprintf_r+0x20>
 8008262:	89ab      	ldrh	r3, [r5, #12]
 8008264:	0598      	lsls	r0, r3, #22
 8008266:	d4ed      	bmi.n	8008244 <_vfiprintf_r+0x4c>
 8008268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800826a:	f7ff f9ad 	bl	80075c8 <__retarget_lock_release_recursive>
 800826e:	e7e9      	b.n	8008244 <_vfiprintf_r+0x4c>
 8008270:	2300      	movs	r3, #0
 8008272:	9309      	str	r3, [sp, #36]	; 0x24
 8008274:	2320      	movs	r3, #32
 8008276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800827a:	f8cd 800c 	str.w	r8, [sp, #12]
 800827e:	2330      	movs	r3, #48	; 0x30
 8008280:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008444 <_vfiprintf_r+0x24c>
 8008284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008288:	f04f 0901 	mov.w	r9, #1
 800828c:	4623      	mov	r3, r4
 800828e:	469a      	mov	sl, r3
 8008290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008294:	b10a      	cbz	r2, 800829a <_vfiprintf_r+0xa2>
 8008296:	2a25      	cmp	r2, #37	; 0x25
 8008298:	d1f9      	bne.n	800828e <_vfiprintf_r+0x96>
 800829a:	ebba 0b04 	subs.w	fp, sl, r4
 800829e:	d00b      	beq.n	80082b8 <_vfiprintf_r+0xc0>
 80082a0:	465b      	mov	r3, fp
 80082a2:	4622      	mov	r2, r4
 80082a4:	4629      	mov	r1, r5
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ff93 	bl	80081d2 <__sfputs_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	f000 80aa 	beq.w	8008406 <_vfiprintf_r+0x20e>
 80082b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082b4:	445a      	add	r2, fp
 80082b6:	9209      	str	r2, [sp, #36]	; 0x24
 80082b8:	f89a 3000 	ldrb.w	r3, [sl]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 80a2 	beq.w	8008406 <_vfiprintf_r+0x20e>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295
 80082c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082cc:	f10a 0a01 	add.w	sl, sl, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	9307      	str	r3, [sp, #28]
 80082d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082d8:	931a      	str	r3, [sp, #104]	; 0x68
 80082da:	4654      	mov	r4, sl
 80082dc:	2205      	movs	r2, #5
 80082de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e2:	4858      	ldr	r0, [pc, #352]	; (8008444 <_vfiprintf_r+0x24c>)
 80082e4:	f7f8 f80c 	bl	8000300 <memchr>
 80082e8:	9a04      	ldr	r2, [sp, #16]
 80082ea:	b9d8      	cbnz	r0, 8008324 <_vfiprintf_r+0x12c>
 80082ec:	06d1      	lsls	r1, r2, #27
 80082ee:	bf44      	itt	mi
 80082f0:	2320      	movmi	r3, #32
 80082f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082f6:	0713      	lsls	r3, r2, #28
 80082f8:	bf44      	itt	mi
 80082fa:	232b      	movmi	r3, #43	; 0x2b
 80082fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008300:	f89a 3000 	ldrb.w	r3, [sl]
 8008304:	2b2a      	cmp	r3, #42	; 0x2a
 8008306:	d015      	beq.n	8008334 <_vfiprintf_r+0x13c>
 8008308:	9a07      	ldr	r2, [sp, #28]
 800830a:	4654      	mov	r4, sl
 800830c:	2000      	movs	r0, #0
 800830e:	f04f 0c0a 	mov.w	ip, #10
 8008312:	4621      	mov	r1, r4
 8008314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008318:	3b30      	subs	r3, #48	; 0x30
 800831a:	2b09      	cmp	r3, #9
 800831c:	d94e      	bls.n	80083bc <_vfiprintf_r+0x1c4>
 800831e:	b1b0      	cbz	r0, 800834e <_vfiprintf_r+0x156>
 8008320:	9207      	str	r2, [sp, #28]
 8008322:	e014      	b.n	800834e <_vfiprintf_r+0x156>
 8008324:	eba0 0308 	sub.w	r3, r0, r8
 8008328:	fa09 f303 	lsl.w	r3, r9, r3
 800832c:	4313      	orrs	r3, r2
 800832e:	9304      	str	r3, [sp, #16]
 8008330:	46a2      	mov	sl, r4
 8008332:	e7d2      	b.n	80082da <_vfiprintf_r+0xe2>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	1d19      	adds	r1, r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	9103      	str	r1, [sp, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfbb      	ittet	lt
 8008340:	425b      	neglt	r3, r3
 8008342:	f042 0202 	orrlt.w	r2, r2, #2
 8008346:	9307      	strge	r3, [sp, #28]
 8008348:	9307      	strlt	r3, [sp, #28]
 800834a:	bfb8      	it	lt
 800834c:	9204      	strlt	r2, [sp, #16]
 800834e:	7823      	ldrb	r3, [r4, #0]
 8008350:	2b2e      	cmp	r3, #46	; 0x2e
 8008352:	d10c      	bne.n	800836e <_vfiprintf_r+0x176>
 8008354:	7863      	ldrb	r3, [r4, #1]
 8008356:	2b2a      	cmp	r3, #42	; 0x2a
 8008358:	d135      	bne.n	80083c6 <_vfiprintf_r+0x1ce>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	1d1a      	adds	r2, r3, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	9203      	str	r2, [sp, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	bfb8      	it	lt
 8008366:	f04f 33ff 	movlt.w	r3, #4294967295
 800836a:	3402      	adds	r4, #2
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008454 <_vfiprintf_r+0x25c>
 8008372:	7821      	ldrb	r1, [r4, #0]
 8008374:	2203      	movs	r2, #3
 8008376:	4650      	mov	r0, sl
 8008378:	f7f7 ffc2 	bl	8000300 <memchr>
 800837c:	b140      	cbz	r0, 8008390 <_vfiprintf_r+0x198>
 800837e:	2340      	movs	r3, #64	; 0x40
 8008380:	eba0 000a 	sub.w	r0, r0, sl
 8008384:	fa03 f000 	lsl.w	r0, r3, r0
 8008388:	9b04      	ldr	r3, [sp, #16]
 800838a:	4303      	orrs	r3, r0
 800838c:	3401      	adds	r4, #1
 800838e:	9304      	str	r3, [sp, #16]
 8008390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008394:	482c      	ldr	r0, [pc, #176]	; (8008448 <_vfiprintf_r+0x250>)
 8008396:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800839a:	2206      	movs	r2, #6
 800839c:	f7f7 ffb0 	bl	8000300 <memchr>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d03f      	beq.n	8008424 <_vfiprintf_r+0x22c>
 80083a4:	4b29      	ldr	r3, [pc, #164]	; (800844c <_vfiprintf_r+0x254>)
 80083a6:	bb1b      	cbnz	r3, 80083f0 <_vfiprintf_r+0x1f8>
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	3307      	adds	r3, #7
 80083ac:	f023 0307 	bic.w	r3, r3, #7
 80083b0:	3308      	adds	r3, #8
 80083b2:	9303      	str	r3, [sp, #12]
 80083b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b6:	443b      	add	r3, r7
 80083b8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ba:	e767      	b.n	800828c <_vfiprintf_r+0x94>
 80083bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c0:	460c      	mov	r4, r1
 80083c2:	2001      	movs	r0, #1
 80083c4:	e7a5      	b.n	8008312 <_vfiprintf_r+0x11a>
 80083c6:	2300      	movs	r3, #0
 80083c8:	3401      	adds	r4, #1
 80083ca:	9305      	str	r3, [sp, #20]
 80083cc:	4619      	mov	r1, r3
 80083ce:	f04f 0c0a 	mov.w	ip, #10
 80083d2:	4620      	mov	r0, r4
 80083d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d8:	3a30      	subs	r2, #48	; 0x30
 80083da:	2a09      	cmp	r2, #9
 80083dc:	d903      	bls.n	80083e6 <_vfiprintf_r+0x1ee>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0c5      	beq.n	800836e <_vfiprintf_r+0x176>
 80083e2:	9105      	str	r1, [sp, #20]
 80083e4:	e7c3      	b.n	800836e <_vfiprintf_r+0x176>
 80083e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083ea:	4604      	mov	r4, r0
 80083ec:	2301      	movs	r3, #1
 80083ee:	e7f0      	b.n	80083d2 <_vfiprintf_r+0x1da>
 80083f0:	ab03      	add	r3, sp, #12
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	462a      	mov	r2, r5
 80083f6:	4b16      	ldr	r3, [pc, #88]	; (8008450 <_vfiprintf_r+0x258>)
 80083f8:	a904      	add	r1, sp, #16
 80083fa:	4630      	mov	r0, r6
 80083fc:	f7fd fc44 	bl	8005c88 <_printf_float>
 8008400:	4607      	mov	r7, r0
 8008402:	1c78      	adds	r0, r7, #1
 8008404:	d1d6      	bne.n	80083b4 <_vfiprintf_r+0x1bc>
 8008406:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008408:	07d9      	lsls	r1, r3, #31
 800840a:	d405      	bmi.n	8008418 <_vfiprintf_r+0x220>
 800840c:	89ab      	ldrh	r3, [r5, #12]
 800840e:	059a      	lsls	r2, r3, #22
 8008410:	d402      	bmi.n	8008418 <_vfiprintf_r+0x220>
 8008412:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008414:	f7ff f8d8 	bl	80075c8 <__retarget_lock_release_recursive>
 8008418:	89ab      	ldrh	r3, [r5, #12]
 800841a:	065b      	lsls	r3, r3, #25
 800841c:	f53f af12 	bmi.w	8008244 <_vfiprintf_r+0x4c>
 8008420:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008422:	e711      	b.n	8008248 <_vfiprintf_r+0x50>
 8008424:	ab03      	add	r3, sp, #12
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	462a      	mov	r2, r5
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <_vfiprintf_r+0x258>)
 800842c:	a904      	add	r1, sp, #16
 800842e:	4630      	mov	r0, r6
 8008430:	f7fd feb6 	bl	80061a0 <_printf_i>
 8008434:	e7e4      	b.n	8008400 <_vfiprintf_r+0x208>
 8008436:	bf00      	nop
 8008438:	08009288 	.word	0x08009288
 800843c:	080092a8 	.word	0x080092a8
 8008440:	08009268 	.word	0x08009268
 8008444:	0800946a 	.word	0x0800946a
 8008448:	08009474 	.word	0x08009474
 800844c:	08005c89 	.word	0x08005c89
 8008450:	080081d3 	.word	0x080081d3
 8008454:	08009470 	.word	0x08009470

08008458 <_read_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d07      	ldr	r5, [pc, #28]	; (8008478 <_read_r+0x20>)
 800845c:	4604      	mov	r4, r0
 800845e:	4608      	mov	r0, r1
 8008460:	4611      	mov	r1, r2
 8008462:	2200      	movs	r2, #0
 8008464:	602a      	str	r2, [r5, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	f7f8 fde8 	bl	800103c <_read>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_read_r+0x1e>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_read_r+0x1e>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	24000338 	.word	0x24000338

0800847c <__ascii_wctomb>:
 800847c:	b149      	cbz	r1, 8008492 <__ascii_wctomb+0x16>
 800847e:	2aff      	cmp	r2, #255	; 0xff
 8008480:	bf85      	ittet	hi
 8008482:	238a      	movhi	r3, #138	; 0x8a
 8008484:	6003      	strhi	r3, [r0, #0]
 8008486:	700a      	strbls	r2, [r1, #0]
 8008488:	f04f 30ff 	movhi.w	r0, #4294967295
 800848c:	bf98      	it	ls
 800848e:	2001      	movls	r0, #1
 8008490:	4770      	bx	lr
 8008492:	4608      	mov	r0, r1
 8008494:	4770      	bx	lr

08008496 <abort>:
 8008496:	b508      	push	{r3, lr}
 8008498:	2006      	movs	r0, #6
 800849a:	f000 f82b 	bl	80084f4 <raise>
 800849e:	2001      	movs	r0, #1
 80084a0:	f7f8 fdc2 	bl	8001028 <_exit>

080084a4 <_raise_r>:
 80084a4:	291f      	cmp	r1, #31
 80084a6:	b538      	push	{r3, r4, r5, lr}
 80084a8:	4604      	mov	r4, r0
 80084aa:	460d      	mov	r5, r1
 80084ac:	d904      	bls.n	80084b8 <_raise_r+0x14>
 80084ae:	2316      	movs	r3, #22
 80084b0:	6003      	str	r3, [r0, #0]
 80084b2:	f04f 30ff 	mov.w	r0, #4294967295
 80084b6:	bd38      	pop	{r3, r4, r5, pc}
 80084b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084ba:	b112      	cbz	r2, 80084c2 <_raise_r+0x1e>
 80084bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084c0:	b94b      	cbnz	r3, 80084d6 <_raise_r+0x32>
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 f830 	bl	8008528 <_getpid_r>
 80084c8:	462a      	mov	r2, r5
 80084ca:	4601      	mov	r1, r0
 80084cc:	4620      	mov	r0, r4
 80084ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084d2:	f000 b817 	b.w	8008504 <_kill_r>
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d00a      	beq.n	80084f0 <_raise_r+0x4c>
 80084da:	1c59      	adds	r1, r3, #1
 80084dc:	d103      	bne.n	80084e6 <_raise_r+0x42>
 80084de:	2316      	movs	r3, #22
 80084e0:	6003      	str	r3, [r0, #0]
 80084e2:	2001      	movs	r0, #1
 80084e4:	e7e7      	b.n	80084b6 <_raise_r+0x12>
 80084e6:	2400      	movs	r4, #0
 80084e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084ec:	4628      	mov	r0, r5
 80084ee:	4798      	blx	r3
 80084f0:	2000      	movs	r0, #0
 80084f2:	e7e0      	b.n	80084b6 <_raise_r+0x12>

080084f4 <raise>:
 80084f4:	4b02      	ldr	r3, [pc, #8]	; (8008500 <raise+0xc>)
 80084f6:	4601      	mov	r1, r0
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	f7ff bfd3 	b.w	80084a4 <_raise_r>
 80084fe:	bf00      	nop
 8008500:	24000010 	.word	0x24000010

08008504 <_kill_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4d07      	ldr	r5, [pc, #28]	; (8008524 <_kill_r+0x20>)
 8008508:	2300      	movs	r3, #0
 800850a:	4604      	mov	r4, r0
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	f7f8 fd79 	bl	8001008 <_kill>
 8008516:	1c43      	adds	r3, r0, #1
 8008518:	d102      	bne.n	8008520 <_kill_r+0x1c>
 800851a:	682b      	ldr	r3, [r5, #0]
 800851c:	b103      	cbz	r3, 8008520 <_kill_r+0x1c>
 800851e:	6023      	str	r3, [r4, #0]
 8008520:	bd38      	pop	{r3, r4, r5, pc}
 8008522:	bf00      	nop
 8008524:	24000338 	.word	0x24000338

08008528 <_getpid_r>:
 8008528:	f7f8 bd66 	b.w	8000ff8 <_getpid>
 800852c:	0000      	movs	r0, r0
	...

08008530 <sin>:
 8008530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008532:	eeb0 7b40 	vmov.f64	d7, d0
 8008536:	ee17 3a90 	vmov	r3, s15
 800853a:	4a21      	ldr	r2, [pc, #132]	; (80085c0 <sin+0x90>)
 800853c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008540:	4293      	cmp	r3, r2
 8008542:	dc07      	bgt.n	8008554 <sin+0x24>
 8008544:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80085b8 <sin+0x88>
 8008548:	2000      	movs	r0, #0
 800854a:	b005      	add	sp, #20
 800854c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008550:	f000 bc82 	b.w	8008e58 <__kernel_sin>
 8008554:	4a1b      	ldr	r2, [pc, #108]	; (80085c4 <sin+0x94>)
 8008556:	4293      	cmp	r3, r2
 8008558:	dd04      	ble.n	8008564 <sin+0x34>
 800855a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800855e:	b005      	add	sp, #20
 8008560:	f85d fb04 	ldr.w	pc, [sp], #4
 8008564:	4668      	mov	r0, sp
 8008566:	f000 f82f 	bl	80085c8 <__ieee754_rem_pio2>
 800856a:	f000 0003 	and.w	r0, r0, #3
 800856e:	2801      	cmp	r0, #1
 8008570:	d00a      	beq.n	8008588 <sin+0x58>
 8008572:	2802      	cmp	r0, #2
 8008574:	d00f      	beq.n	8008596 <sin+0x66>
 8008576:	b9c0      	cbnz	r0, 80085aa <sin+0x7a>
 8008578:	ed9d 1b02 	vldr	d1, [sp, #8]
 800857c:	ed9d 0b00 	vldr	d0, [sp]
 8008580:	2001      	movs	r0, #1
 8008582:	f000 fc69 	bl	8008e58 <__kernel_sin>
 8008586:	e7ea      	b.n	800855e <sin+0x2e>
 8008588:	ed9d 1b02 	vldr	d1, [sp, #8]
 800858c:	ed9d 0b00 	vldr	d0, [sp]
 8008590:	f000 f95e 	bl	8008850 <__kernel_cos>
 8008594:	e7e3      	b.n	800855e <sin+0x2e>
 8008596:	ed9d 1b02 	vldr	d1, [sp, #8]
 800859a:	ed9d 0b00 	vldr	d0, [sp]
 800859e:	2001      	movs	r0, #1
 80085a0:	f000 fc5a 	bl	8008e58 <__kernel_sin>
 80085a4:	eeb1 0b40 	vneg.f64	d0, d0
 80085a8:	e7d9      	b.n	800855e <sin+0x2e>
 80085aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80085ae:	ed9d 0b00 	vldr	d0, [sp]
 80085b2:	f000 f94d 	bl	8008850 <__kernel_cos>
 80085b6:	e7f5      	b.n	80085a4 <sin+0x74>
	...
 80085c0:	3fe921fb 	.word	0x3fe921fb
 80085c4:	7fefffff 	.word	0x7fefffff

080085c8 <__ieee754_rem_pio2>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	eeb0 7b40 	vmov.f64	d7, d0
 80085ce:	ee17 5a90 	vmov	r5, s15
 80085d2:	4b99      	ldr	r3, [pc, #612]	; (8008838 <__ieee754_rem_pio2+0x270>)
 80085d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80085d8:	429e      	cmp	r6, r3
 80085da:	b088      	sub	sp, #32
 80085dc:	4604      	mov	r4, r0
 80085de:	dc07      	bgt.n	80085f0 <__ieee754_rem_pio2+0x28>
 80085e0:	2200      	movs	r2, #0
 80085e2:	2300      	movs	r3, #0
 80085e4:	ed84 0b00 	vstr	d0, [r4]
 80085e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80085ec:	2000      	movs	r0, #0
 80085ee:	e01b      	b.n	8008628 <__ieee754_rem_pio2+0x60>
 80085f0:	4b92      	ldr	r3, [pc, #584]	; (800883c <__ieee754_rem_pio2+0x274>)
 80085f2:	429e      	cmp	r6, r3
 80085f4:	dc3b      	bgt.n	800866e <__ieee754_rem_pio2+0xa6>
 80085f6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80085fa:	2d00      	cmp	r5, #0
 80085fc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80087f8 <__ieee754_rem_pio2+0x230>
 8008600:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008604:	dd19      	ble.n	800863a <__ieee754_rem_pio2+0x72>
 8008606:	ee30 7b46 	vsub.f64	d7, d0, d6
 800860a:	429e      	cmp	r6, r3
 800860c:	d00e      	beq.n	800862c <__ieee754_rem_pio2+0x64>
 800860e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008800 <__ieee754_rem_pio2+0x238>
 8008612:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008616:	ee37 7b45 	vsub.f64	d7, d7, d5
 800861a:	ed84 5b00 	vstr	d5, [r4]
 800861e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008622:	ed84 7b02 	vstr	d7, [r4, #8]
 8008626:	2001      	movs	r0, #1
 8008628:	b008      	add	sp, #32
 800862a:	bd70      	pop	{r4, r5, r6, pc}
 800862c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008808 <__ieee754_rem_pio2+0x240>
 8008630:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008634:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008810 <__ieee754_rem_pio2+0x248>
 8008638:	e7eb      	b.n	8008612 <__ieee754_rem_pio2+0x4a>
 800863a:	429e      	cmp	r6, r3
 800863c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008640:	d00e      	beq.n	8008660 <__ieee754_rem_pio2+0x98>
 8008642:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8008800 <__ieee754_rem_pio2+0x238>
 8008646:	ee37 5b06 	vadd.f64	d5, d7, d6
 800864a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800864e:	ed84 5b00 	vstr	d5, [r4]
 8008652:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008656:	f04f 30ff 	mov.w	r0, #4294967295
 800865a:	ed84 7b02 	vstr	d7, [r4, #8]
 800865e:	e7e3      	b.n	8008628 <__ieee754_rem_pio2+0x60>
 8008660:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008808 <__ieee754_rem_pio2+0x240>
 8008664:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008668:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008810 <__ieee754_rem_pio2+0x248>
 800866c:	e7eb      	b.n	8008646 <__ieee754_rem_pio2+0x7e>
 800866e:	4b74      	ldr	r3, [pc, #464]	; (8008840 <__ieee754_rem_pio2+0x278>)
 8008670:	429e      	cmp	r6, r3
 8008672:	dc70      	bgt.n	8008756 <__ieee754_rem_pio2+0x18e>
 8008674:	f000 fc48 	bl	8008f08 <fabs>
 8008678:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800867c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008818 <__ieee754_rem_pio2+0x250>
 8008680:	eea0 7b06 	vfma.f64	d7, d0, d6
 8008684:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008688:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800868c:	ee17 0a90 	vmov	r0, s15
 8008690:	eeb1 4b45 	vneg.f64	d4, d5
 8008694:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80087f8 <__ieee754_rem_pio2+0x230>
 8008698:	eea5 0b47 	vfms.f64	d0, d5, d7
 800869c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008800 <__ieee754_rem_pio2+0x238>
 80086a0:	281f      	cmp	r0, #31
 80086a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80086a6:	ee30 6b47 	vsub.f64	d6, d0, d7
 80086aa:	dc08      	bgt.n	80086be <__ieee754_rem_pio2+0xf6>
 80086ac:	4b65      	ldr	r3, [pc, #404]	; (8008844 <__ieee754_rem_pio2+0x27c>)
 80086ae:	1e42      	subs	r2, r0, #1
 80086b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b4:	42b3      	cmp	r3, r6
 80086b6:	d002      	beq.n	80086be <__ieee754_rem_pio2+0xf6>
 80086b8:	ed84 6b00 	vstr	d6, [r4]
 80086bc:	e026      	b.n	800870c <__ieee754_rem_pio2+0x144>
 80086be:	ee16 3a90 	vmov	r3, s13
 80086c2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80086c6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80086ca:	2b10      	cmp	r3, #16
 80086cc:	ea4f 5226 	mov.w	r2, r6, asr #20
 80086d0:	ddf2      	ble.n	80086b8 <__ieee754_rem_pio2+0xf0>
 80086d2:	eeb0 6b40 	vmov.f64	d6, d0
 80086d6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8008808 <__ieee754_rem_pio2+0x240>
 80086da:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8008810 <__ieee754_rem_pio2+0x248>
 80086de:	eea4 6b07 	vfma.f64	d6, d4, d7
 80086e2:	ee30 0b46 	vsub.f64	d0, d0, d6
 80086e6:	eea4 0b07 	vfma.f64	d0, d4, d7
 80086ea:	eeb0 7b40 	vmov.f64	d7, d0
 80086ee:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80086f2:	ee36 3b47 	vsub.f64	d3, d6, d7
 80086f6:	ee13 3a90 	vmov	r3, s7
 80086fa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	2b31      	cmp	r3, #49	; 0x31
 8008702:	dc17      	bgt.n	8008734 <__ieee754_rem_pio2+0x16c>
 8008704:	eeb0 0b46 	vmov.f64	d0, d6
 8008708:	ed84 3b00 	vstr	d3, [r4]
 800870c:	ed94 6b00 	vldr	d6, [r4]
 8008710:	2d00      	cmp	r5, #0
 8008712:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008716:	ee30 0b47 	vsub.f64	d0, d0, d7
 800871a:	ed84 0b02 	vstr	d0, [r4, #8]
 800871e:	da83      	bge.n	8008628 <__ieee754_rem_pio2+0x60>
 8008720:	eeb1 6b46 	vneg.f64	d6, d6
 8008724:	eeb1 0b40 	vneg.f64	d0, d0
 8008728:	ed84 6b00 	vstr	d6, [r4]
 800872c:	ed84 0b02 	vstr	d0, [r4, #8]
 8008730:	4240      	negs	r0, r0
 8008732:	e779      	b.n	8008628 <__ieee754_rem_pio2+0x60>
 8008734:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8008820 <__ieee754_rem_pio2+0x258>
 8008738:	eeb0 0b46 	vmov.f64	d0, d6
 800873c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8008740:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008744:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008828 <__ieee754_rem_pio2+0x260>
 8008748:	eea4 7b03 	vfma.f64	d7, d4, d3
 800874c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8008750:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008754:	e7b0      	b.n	80086b8 <__ieee754_rem_pio2+0xf0>
 8008756:	4b3c      	ldr	r3, [pc, #240]	; (8008848 <__ieee754_rem_pio2+0x280>)
 8008758:	429e      	cmp	r6, r3
 800875a:	dd06      	ble.n	800876a <__ieee754_rem_pio2+0x1a2>
 800875c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008760:	ed80 7b02 	vstr	d7, [r0, #8]
 8008764:	ed80 7b00 	vstr	d7, [r0]
 8008768:	e740      	b.n	80085ec <__ieee754_rem_pio2+0x24>
 800876a:	1532      	asrs	r2, r6, #20
 800876c:	ee10 0a10 	vmov	r0, s0
 8008770:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008774:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008778:	ec41 0b17 	vmov	d7, r0, r1
 800877c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008780:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008830 <__ieee754_rem_pio2+0x268>
 8008784:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008788:	ee37 7b46 	vsub.f64	d7, d7, d6
 800878c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008790:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008794:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008798:	a902      	add	r1, sp, #8
 800879a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800879e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80087a2:	ed8d 6b04 	vstr	d6, [sp, #16]
 80087a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80087aa:	ed8d 7b06 	vstr	d7, [sp, #24]
 80087ae:	2603      	movs	r6, #3
 80087b0:	4608      	mov	r0, r1
 80087b2:	ed91 7b04 	vldr	d7, [r1, #16]
 80087b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087be:	4633      	mov	r3, r6
 80087c0:	f1a1 0108 	sub.w	r1, r1, #8
 80087c4:	f106 36ff 	add.w	r6, r6, #4294967295
 80087c8:	d0f3      	beq.n	80087b2 <__ieee754_rem_pio2+0x1ea>
 80087ca:	4920      	ldr	r1, [pc, #128]	; (800884c <__ieee754_rem_pio2+0x284>)
 80087cc:	9101      	str	r1, [sp, #4]
 80087ce:	2102      	movs	r1, #2
 80087d0:	9100      	str	r1, [sp, #0]
 80087d2:	4621      	mov	r1, r4
 80087d4:	f000 f8a8 	bl	8008928 <__kernel_rem_pio2>
 80087d8:	2d00      	cmp	r5, #0
 80087da:	f6bf af25 	bge.w	8008628 <__ieee754_rem_pio2+0x60>
 80087de:	ed94 7b00 	vldr	d7, [r4]
 80087e2:	eeb1 7b47 	vneg.f64	d7, d7
 80087e6:	ed84 7b00 	vstr	d7, [r4]
 80087ea:	ed94 7b02 	vldr	d7, [r4, #8]
 80087ee:	eeb1 7b47 	vneg.f64	d7, d7
 80087f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80087f6:	e79b      	b.n	8008730 <__ieee754_rem_pio2+0x168>
 80087f8:	54400000 	.word	0x54400000
 80087fc:	3ff921fb 	.word	0x3ff921fb
 8008800:	1a626331 	.word	0x1a626331
 8008804:	3dd0b461 	.word	0x3dd0b461
 8008808:	1a600000 	.word	0x1a600000
 800880c:	3dd0b461 	.word	0x3dd0b461
 8008810:	2e037073 	.word	0x2e037073
 8008814:	3ba3198a 	.word	0x3ba3198a
 8008818:	6dc9c883 	.word	0x6dc9c883
 800881c:	3fe45f30 	.word	0x3fe45f30
 8008820:	2e000000 	.word	0x2e000000
 8008824:	3ba3198a 	.word	0x3ba3198a
 8008828:	252049c1 	.word	0x252049c1
 800882c:	397b839a 	.word	0x397b839a
 8008830:	00000000 	.word	0x00000000
 8008834:	41700000 	.word	0x41700000
 8008838:	3fe921fb 	.word	0x3fe921fb
 800883c:	4002d97b 	.word	0x4002d97b
 8008840:	413921fb 	.word	0x413921fb
 8008844:	0800957c 	.word	0x0800957c
 8008848:	7fefffff 	.word	0x7fefffff
 800884c:	080095fc 	.word	0x080095fc

08008850 <__kernel_cos>:
 8008850:	ee10 1a90 	vmov	r1, s1
 8008854:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800885c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008860:	da05      	bge.n	800886e <__kernel_cos+0x1e>
 8008862:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008866:	ee17 3a90 	vmov	r3, s15
 800886a:	2b00      	cmp	r3, #0
 800886c:	d03d      	beq.n	80088ea <__kernel_cos+0x9a>
 800886e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8008872:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80088f0 <__kernel_cos+0xa0>
 8008876:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80088f8 <__kernel_cos+0xa8>
 800887a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800887e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008900 <__kernel_cos+0xb0>
 8008882:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008886:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008908 <__kernel_cos+0xb8>
 800888a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800888e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008910 <__kernel_cos+0xc0>
 8008892:	4b23      	ldr	r3, [pc, #140]	; (8008920 <__kernel_cos+0xd0>)
 8008894:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008898:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008918 <__kernel_cos+0xc8>
 800889c:	4299      	cmp	r1, r3
 800889e:	eea7 6b03 	vfma.f64	d6, d7, d3
 80088a2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80088a6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80088aa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80088ae:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80088b2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80088b6:	dc04      	bgt.n	80088c2 <__kernel_cos+0x72>
 80088b8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80088bc:	ee34 0b46 	vsub.f64	d0, d4, d6
 80088c0:	4770      	bx	lr
 80088c2:	4b18      	ldr	r3, [pc, #96]	; (8008924 <__kernel_cos+0xd4>)
 80088c4:	4299      	cmp	r1, r3
 80088c6:	dc0d      	bgt.n	80088e4 <__kernel_cos+0x94>
 80088c8:	2200      	movs	r2, #0
 80088ca:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80088ce:	ec43 2b15 	vmov	d5, r2, r3
 80088d2:	ee34 0b45 	vsub.f64	d0, d4, d5
 80088d6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80088da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80088de:	ee30 0b47 	vsub.f64	d0, d0, d7
 80088e2:	4770      	bx	lr
 80088e4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80088e8:	e7f3      	b.n	80088d2 <__kernel_cos+0x82>
 80088ea:	eeb0 0b44 	vmov.f64	d0, d4
 80088ee:	4770      	bx	lr
 80088f0:	be8838d4 	.word	0xbe8838d4
 80088f4:	bda8fae9 	.word	0xbda8fae9
 80088f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80088fc:	3e21ee9e 	.word	0x3e21ee9e
 8008900:	809c52ad 	.word	0x809c52ad
 8008904:	be927e4f 	.word	0xbe927e4f
 8008908:	19cb1590 	.word	0x19cb1590
 800890c:	3efa01a0 	.word	0x3efa01a0
 8008910:	16c15177 	.word	0x16c15177
 8008914:	bf56c16c 	.word	0xbf56c16c
 8008918:	5555554c 	.word	0x5555554c
 800891c:	3fa55555 	.word	0x3fa55555
 8008920:	3fd33332 	.word	0x3fd33332
 8008924:	3fe90000 	.word	0x3fe90000

08008928 <__kernel_rem_pio2>:
 8008928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	ed2d 8b06 	vpush	{d8-d10}
 8008930:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008934:	460f      	mov	r7, r1
 8008936:	9002      	str	r0, [sp, #8]
 8008938:	49c5      	ldr	r1, [pc, #788]	; (8008c50 <__kernel_rem_pio2+0x328>)
 800893a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800893c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8008940:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8008944:	9301      	str	r3, [sp, #4]
 8008946:	f112 0f14 	cmn.w	r2, #20
 800894a:	bfa8      	it	ge
 800894c:	2018      	movge	r0, #24
 800894e:	f103 31ff 	add.w	r1, r3, #4294967295
 8008952:	bfb8      	it	lt
 8008954:	2000      	movlt	r0, #0
 8008956:	f06f 0417 	mvn.w	r4, #23
 800895a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8008c38 <__kernel_rem_pio2+0x310>
 800895e:	bfa4      	itt	ge
 8008960:	f1a2 0a03 	subge.w	sl, r2, #3
 8008964:	fb9a f0f0 	sdivge	r0, sl, r0
 8008968:	fb00 4404 	mla	r4, r0, r4, r4
 800896c:	1a46      	subs	r6, r0, r1
 800896e:	4414      	add	r4, r2
 8008970:	eb09 0c01 	add.w	ip, r9, r1
 8008974:	ad1a      	add	r5, sp, #104	; 0x68
 8008976:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800897a:	2200      	movs	r2, #0
 800897c:	4562      	cmp	r2, ip
 800897e:	dd10      	ble.n	80089a2 <__kernel_rem_pio2+0x7a>
 8008980:	9a01      	ldr	r2, [sp, #4]
 8008982:	ab1a      	add	r3, sp, #104	; 0x68
 8008984:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008988:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800898c:	f04f 0c00 	mov.w	ip, #0
 8008990:	45cc      	cmp	ip, r9
 8008992:	dc26      	bgt.n	80089e2 <__kernel_rem_pio2+0xba>
 8008994:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8008c38 <__kernel_rem_pio2+0x310>
 8008998:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800899c:	4616      	mov	r6, r2
 800899e:	2500      	movs	r5, #0
 80089a0:	e015      	b.n	80089ce <__kernel_rem_pio2+0xa6>
 80089a2:	42d6      	cmn	r6, r2
 80089a4:	d409      	bmi.n	80089ba <__kernel_rem_pio2+0x92>
 80089a6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80089b2:	eca5 7b02 	vstmia	r5!, {d7}
 80089b6:	3201      	adds	r2, #1
 80089b8:	e7e0      	b.n	800897c <__kernel_rem_pio2+0x54>
 80089ba:	eeb0 7b46 	vmov.f64	d7, d6
 80089be:	e7f8      	b.n	80089b2 <__kernel_rem_pio2+0x8a>
 80089c0:	ecb8 5b02 	vldmia	r8!, {d5}
 80089c4:	ed96 6b00 	vldr	d6, [r6]
 80089c8:	3501      	adds	r5, #1
 80089ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 80089ce:	428d      	cmp	r5, r1
 80089d0:	f1a6 0608 	sub.w	r6, r6, #8
 80089d4:	ddf4      	ble.n	80089c0 <__kernel_rem_pio2+0x98>
 80089d6:	ecaa 7b02 	vstmia	sl!, {d7}
 80089da:	f10c 0c01 	add.w	ip, ip, #1
 80089de:	3208      	adds	r2, #8
 80089e0:	e7d6      	b.n	8008990 <__kernel_rem_pio2+0x68>
 80089e2:	ab06      	add	r3, sp, #24
 80089e4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8008c40 <__kernel_rem_pio2+0x318>
 80089e8:	ed9f ab97 	vldr	d10, [pc, #604]	; 8008c48 <__kernel_rem_pio2+0x320>
 80089ec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80089f0:	9303      	str	r3, [sp, #12]
 80089f2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 80089f6:	464d      	mov	r5, r9
 80089f8:	00eb      	lsls	r3, r5, #3
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	ab92      	add	r3, sp, #584	; 0x248
 80089fe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008a02:	f10d 0b18 	add.w	fp, sp, #24
 8008a06:	ab6a      	add	r3, sp, #424	; 0x1a8
 8008a08:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8008a0c:	465e      	mov	r6, fp
 8008a0e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008a12:	4628      	mov	r0, r5
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f1a2 0208 	sub.w	r2, r2, #8
 8008a1a:	dc4c      	bgt.n	8008ab6 <__kernel_rem_pio2+0x18e>
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	9105      	str	r1, [sp, #20]
 8008a20:	f000 faf2 	bl	8009008 <scalbn>
 8008a24:	eeb0 8b40 	vmov.f64	d8, d0
 8008a28:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008a2c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008a30:	f000 fa76 	bl	8008f20 <floor>
 8008a34:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008a38:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008a3c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008a40:	2c00      	cmp	r4, #0
 8008a42:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008a46:	ee17 8a90 	vmov	r8, s15
 8008a4a:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008a4e:	9905      	ldr	r1, [sp, #20]
 8008a50:	dd43      	ble.n	8008ada <__kernel_rem_pio2+0x1b2>
 8008a52:	1e68      	subs	r0, r5, #1
 8008a54:	ab06      	add	r3, sp, #24
 8008a56:	f1c4 0c18 	rsb	ip, r4, #24
 8008a5a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8008a5e:	fa46 f20c 	asr.w	r2, r6, ip
 8008a62:	4490      	add	r8, r2
 8008a64:	fa02 f20c 	lsl.w	r2, r2, ip
 8008a68:	1ab6      	subs	r6, r6, r2
 8008a6a:	f1c4 0217 	rsb	r2, r4, #23
 8008a6e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8008a72:	4116      	asrs	r6, r2
 8008a74:	2e00      	cmp	r6, #0
 8008a76:	dd3f      	ble.n	8008af8 <__kernel_rem_pio2+0x1d0>
 8008a78:	f04f 0c00 	mov.w	ip, #0
 8008a7c:	f108 0801 	add.w	r8, r8, #1
 8008a80:	4660      	mov	r0, ip
 8008a82:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8008a86:	4565      	cmp	r5, ip
 8008a88:	dc6e      	bgt.n	8008b68 <__kernel_rem_pio2+0x240>
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	dd04      	ble.n	8008a98 <__kernel_rem_pio2+0x170>
 8008a8e:	2c01      	cmp	r4, #1
 8008a90:	d07f      	beq.n	8008b92 <__kernel_rem_pio2+0x26a>
 8008a92:	2c02      	cmp	r4, #2
 8008a94:	f000 8087 	beq.w	8008ba6 <__kernel_rem_pio2+0x27e>
 8008a98:	2e02      	cmp	r6, #2
 8008a9a:	d12d      	bne.n	8008af8 <__kernel_rem_pio2+0x1d0>
 8008a9c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008aa0:	ee30 8b48 	vsub.f64	d8, d0, d8
 8008aa4:	b340      	cbz	r0, 8008af8 <__kernel_rem_pio2+0x1d0>
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	9105      	str	r1, [sp, #20]
 8008aaa:	f000 faad 	bl	8009008 <scalbn>
 8008aae:	9905      	ldr	r1, [sp, #20]
 8008ab0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008ab4:	e020      	b.n	8008af8 <__kernel_rem_pio2+0x1d0>
 8008ab6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8008aba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008abe:	3801      	subs	r0, #1
 8008ac0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8008ac4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8008ac8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008acc:	eca6 0a01 	vstmia	r6!, {s0}
 8008ad0:	ed92 0b00 	vldr	d0, [r2]
 8008ad4:	ee37 0b00 	vadd.f64	d0, d7, d0
 8008ad8:	e79c      	b.n	8008a14 <__kernel_rem_pio2+0xec>
 8008ada:	d105      	bne.n	8008ae8 <__kernel_rem_pio2+0x1c0>
 8008adc:	1e6a      	subs	r2, r5, #1
 8008ade:	ab06      	add	r3, sp, #24
 8008ae0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8008ae4:	15f6      	asrs	r6, r6, #23
 8008ae6:	e7c5      	b.n	8008a74 <__kernel_rem_pio2+0x14c>
 8008ae8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008aec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af4:	da36      	bge.n	8008b64 <__kernel_rem_pio2+0x23c>
 8008af6:	2600      	movs	r6, #0
 8008af8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b00:	f040 80aa 	bne.w	8008c58 <__kernel_rem_pio2+0x330>
 8008b04:	f105 3bff 	add.w	fp, r5, #4294967295
 8008b08:	4658      	mov	r0, fp
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	4548      	cmp	r0, r9
 8008b0e:	da52      	bge.n	8008bb6 <__kernel_rem_pio2+0x28e>
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	f000 8081 	beq.w	8008c18 <__kernel_rem_pio2+0x2f0>
 8008b16:	ab06      	add	r3, sp, #24
 8008b18:	3c18      	subs	r4, #24
 8008b1a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 8087 	beq.w	8008c32 <__kernel_rem_pio2+0x30a>
 8008b24:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa6d 	bl	8009008 <scalbn>
 8008b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b32:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8008c40 <__kernel_rem_pio2+0x318>
 8008b36:	a96a      	add	r1, sp, #424	; 0x1a8
 8008b38:	f103 0208 	add.w	r2, r3, #8
 8008b3c:	1888      	adds	r0, r1, r2
 8008b3e:	4659      	mov	r1, fp
 8008b40:	2900      	cmp	r1, #0
 8008b42:	f280 80b7 	bge.w	8008cb4 <__kernel_rem_pio2+0x38c>
 8008b46:	4659      	mov	r1, fp
 8008b48:	2900      	cmp	r1, #0
 8008b4a:	f2c0 80d5 	blt.w	8008cf8 <__kernel_rem_pio2+0x3d0>
 8008b4e:	a86a      	add	r0, sp, #424	; 0x1a8
 8008b50:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8008b54:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8008c38 <__kernel_rem_pio2+0x310>
 8008b58:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8008c54 <__kernel_rem_pio2+0x32c>
 8008b5c:	2400      	movs	r4, #0
 8008b5e:	ebab 0001 	sub.w	r0, fp, r1
 8008b62:	e0be      	b.n	8008ce2 <__kernel_rem_pio2+0x3ba>
 8008b64:	2602      	movs	r6, #2
 8008b66:	e787      	b.n	8008a78 <__kernel_rem_pio2+0x150>
 8008b68:	f8db 2000 	ldr.w	r2, [fp]
 8008b6c:	b958      	cbnz	r0, 8008b86 <__kernel_rem_pio2+0x25e>
 8008b6e:	b122      	cbz	r2, 8008b7a <__kernel_rem_pio2+0x252>
 8008b70:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8008b74:	f8cb 2000 	str.w	r2, [fp]
 8008b78:	2201      	movs	r2, #1
 8008b7a:	f10c 0c01 	add.w	ip, ip, #1
 8008b7e:	f10b 0b04 	add.w	fp, fp, #4
 8008b82:	4610      	mov	r0, r2
 8008b84:	e77f      	b.n	8008a86 <__kernel_rem_pio2+0x15e>
 8008b86:	ebae 0202 	sub.w	r2, lr, r2
 8008b8a:	f8cb 2000 	str.w	r2, [fp]
 8008b8e:	4602      	mov	r2, r0
 8008b90:	e7f3      	b.n	8008b7a <__kernel_rem_pio2+0x252>
 8008b92:	f105 3cff 	add.w	ip, r5, #4294967295
 8008b96:	ab06      	add	r3, sp, #24
 8008b98:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008b9c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008ba0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8008ba4:	e778      	b.n	8008a98 <__kernel_rem_pio2+0x170>
 8008ba6:	f105 3cff 	add.w	ip, r5, #4294967295
 8008baa:	ab06      	add	r3, sp, #24
 8008bac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8008bb0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8008bb4:	e7f4      	b.n	8008ba0 <__kernel_rem_pio2+0x278>
 8008bb6:	ab06      	add	r3, sp, #24
 8008bb8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008bbc:	3801      	subs	r0, #1
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	e7a4      	b.n	8008b0c <__kernel_rem_pio2+0x1e4>
 8008bc2:	f10c 0c01 	add.w	ip, ip, #1
 8008bc6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d0f9      	beq.n	8008bc2 <__kernel_rem_pio2+0x29a>
 8008bce:	9b04      	ldr	r3, [sp, #16]
 8008bd0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8008bd4:	eb0d 0203 	add.w	r2, sp, r3
 8008bd8:	9b01      	ldr	r3, [sp, #4]
 8008bda:	18e8      	adds	r0, r5, r3
 8008bdc:	ab1a      	add	r3, sp, #104	; 0x68
 8008bde:	1c6e      	adds	r6, r5, #1
 8008be0:	3a98      	subs	r2, #152	; 0x98
 8008be2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008be6:	4465      	add	r5, ip
 8008be8:	42b5      	cmp	r5, r6
 8008bea:	f6ff af05 	blt.w	80089f8 <__kernel_rem_pio2+0xd0>
 8008bee:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8008bf2:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008bfe:	f04f 0c00 	mov.w	ip, #0
 8008c02:	eca0 7b02 	vstmia	r0!, {d7}
 8008c06:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8008c38 <__kernel_rem_pio2+0x310>
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	458c      	cmp	ip, r1
 8008c0e:	dd07      	ble.n	8008c20 <__kernel_rem_pio2+0x2f8>
 8008c10:	eca2 7b02 	vstmia	r2!, {d7}
 8008c14:	3601      	adds	r6, #1
 8008c16:	e7e7      	b.n	8008be8 <__kernel_rem_pio2+0x2c0>
 8008c18:	9a03      	ldr	r2, [sp, #12]
 8008c1a:	f04f 0c01 	mov.w	ip, #1
 8008c1e:	e7d2      	b.n	8008bc6 <__kernel_rem_pio2+0x29e>
 8008c20:	ecbe 5b02 	vldmia	lr!, {d5}
 8008c24:	ed38 6b02 	vldmdb	r8!, {d6}
 8008c28:	f10c 0c01 	add.w	ip, ip, #1
 8008c2c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008c30:	e7ec      	b.n	8008c0c <__kernel_rem_pio2+0x2e4>
 8008c32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c36:	e76e      	b.n	8008b16 <__kernel_rem_pio2+0x1ee>
	...
 8008c44:	3e700000 	.word	0x3e700000
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	41700000 	.word	0x41700000
 8008c50:	08009748 	.word	0x08009748
 8008c54:	08009708 	.word	0x08009708
 8008c58:	4260      	negs	r0, r4
 8008c5a:	eeb0 0b48 	vmov.f64	d0, d8
 8008c5e:	f000 f9d3 	bl	8009008 <scalbn>
 8008c62:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8008e40 <__kernel_rem_pio2+0x518>
 8008c66:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8008c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6e:	db18      	blt.n	8008ca2 <__kernel_rem_pio2+0x37a>
 8008c70:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8008e48 <__kernel_rem_pio2+0x520>
 8008c74:	ee20 7b07 	vmul.f64	d7, d0, d7
 8008c78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8008c7c:	aa06      	add	r2, sp, #24
 8008c7e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8008c82:	eea5 0b46 	vfms.f64	d0, d5, d6
 8008c86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008c8a:	f105 0b01 	add.w	fp, r5, #1
 8008c8e:	ee10 3a10 	vmov	r3, s0
 8008c92:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008c96:	ee17 3a10 	vmov	r3, s14
 8008c9a:	3418      	adds	r4, #24
 8008c9c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8008ca0:	e740      	b.n	8008b24 <__kernel_rem_pio2+0x1fc>
 8008ca2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8008ca6:	aa06      	add	r2, sp, #24
 8008ca8:	ee10 3a10 	vmov	r3, s0
 8008cac:	46ab      	mov	fp, r5
 8008cae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8008cb2:	e737      	b.n	8008b24 <__kernel_rem_pio2+0x1fc>
 8008cb4:	ac06      	add	r4, sp, #24
 8008cb6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8008cba:	9401      	str	r4, [sp, #4]
 8008cbc:	ee07 4a90 	vmov	s15, r4
 8008cc0:	3901      	subs	r1, #1
 8008cc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008cc6:	ee27 7b00 	vmul.f64	d7, d7, d0
 8008cca:	ee20 0b06 	vmul.f64	d0, d0, d6
 8008cce:	ed20 7b02 	vstmdb	r0!, {d7}
 8008cd2:	e735      	b.n	8008b40 <__kernel_rem_pio2+0x218>
 8008cd4:	ecbc 5b02 	vldmia	ip!, {d5}
 8008cd8:	ecb5 6b02 	vldmia	r5!, {d6}
 8008cdc:	3401      	adds	r4, #1
 8008cde:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008ce2:	454c      	cmp	r4, r9
 8008ce4:	dc01      	bgt.n	8008cea <__kernel_rem_pio2+0x3c2>
 8008ce6:	4284      	cmp	r4, r0
 8008ce8:	ddf4      	ble.n	8008cd4 <__kernel_rem_pio2+0x3ac>
 8008cea:	ac42      	add	r4, sp, #264	; 0x108
 8008cec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8008cf0:	ed80 7b00 	vstr	d7, [r0]
 8008cf4:	3901      	subs	r1, #1
 8008cf6:	e727      	b.n	8008b48 <__kernel_rem_pio2+0x220>
 8008cf8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008cfa:	2902      	cmp	r1, #2
 8008cfc:	dc0a      	bgt.n	8008d14 <__kernel_rem_pio2+0x3ec>
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	dc2c      	bgt.n	8008d5c <__kernel_rem_pio2+0x434>
 8008d02:	d045      	beq.n	8008d90 <__kernel_rem_pio2+0x468>
 8008d04:	f008 0007 	and.w	r0, r8, #7
 8008d08:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8008d0c:	ecbd 8b06 	vpop	{d8-d10}
 8008d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d14:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8008d16:	2a03      	cmp	r2, #3
 8008d18:	d1f4      	bne.n	8008d04 <__kernel_rem_pio2+0x3dc>
 8008d1a:	aa42      	add	r2, sp, #264	; 0x108
 8008d1c:	4413      	add	r3, r2
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4619      	mov	r1, r3
 8008d22:	4658      	mov	r0, fp
 8008d24:	2800      	cmp	r0, #0
 8008d26:	f1a1 0108 	sub.w	r1, r1, #8
 8008d2a:	dc54      	bgt.n	8008dd6 <__kernel_rem_pio2+0x4ae>
 8008d2c:	4659      	mov	r1, fp
 8008d2e:	2901      	cmp	r1, #1
 8008d30:	f1a2 0208 	sub.w	r2, r2, #8
 8008d34:	dc5f      	bgt.n	8008df6 <__kernel_rem_pio2+0x4ce>
 8008d36:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8008e50 <__kernel_rem_pio2+0x528>
 8008d3a:	3308      	adds	r3, #8
 8008d3c:	f1bb 0f01 	cmp.w	fp, #1
 8008d40:	dc69      	bgt.n	8008e16 <__kernel_rem_pio2+0x4ee>
 8008d42:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8008d46:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8008d4a:	2e00      	cmp	r6, #0
 8008d4c:	d16a      	bne.n	8008e24 <__kernel_rem_pio2+0x4fc>
 8008d4e:	ed87 5b00 	vstr	d5, [r7]
 8008d52:	ed87 6b02 	vstr	d6, [r7, #8]
 8008d56:	ed87 7b04 	vstr	d7, [r7, #16]
 8008d5a:	e7d3      	b.n	8008d04 <__kernel_rem_pio2+0x3dc>
 8008d5c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8008e50 <__kernel_rem_pio2+0x528>
 8008d60:	ab42      	add	r3, sp, #264	; 0x108
 8008d62:	441a      	add	r2, r3
 8008d64:	465b      	mov	r3, fp
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da26      	bge.n	8008db8 <__kernel_rem_pio2+0x490>
 8008d6a:	b35e      	cbz	r6, 8008dc4 <__kernel_rem_pio2+0x49c>
 8008d6c:	eeb1 7b46 	vneg.f64	d7, d6
 8008d70:	ed87 7b00 	vstr	d7, [r7]
 8008d74:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8008d78:	aa44      	add	r2, sp, #272	; 0x110
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d80:	459b      	cmp	fp, r3
 8008d82:	da22      	bge.n	8008dca <__kernel_rem_pio2+0x4a2>
 8008d84:	b10e      	cbz	r6, 8008d8a <__kernel_rem_pio2+0x462>
 8008d86:	eeb1 7b47 	vneg.f64	d7, d7
 8008d8a:	ed87 7b02 	vstr	d7, [r7, #8]
 8008d8e:	e7b9      	b.n	8008d04 <__kernel_rem_pio2+0x3dc>
 8008d90:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008e50 <__kernel_rem_pio2+0x528>
 8008d94:	ab42      	add	r3, sp, #264	; 0x108
 8008d96:	441a      	add	r2, r3
 8008d98:	f1bb 0f00 	cmp.w	fp, #0
 8008d9c:	da05      	bge.n	8008daa <__kernel_rem_pio2+0x482>
 8008d9e:	b10e      	cbz	r6, 8008da4 <__kernel_rem_pio2+0x47c>
 8008da0:	eeb1 7b47 	vneg.f64	d7, d7
 8008da4:	ed87 7b00 	vstr	d7, [r7]
 8008da8:	e7ac      	b.n	8008d04 <__kernel_rem_pio2+0x3dc>
 8008daa:	ed32 6b02 	vldmdb	r2!, {d6}
 8008dae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008db2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008db6:	e7ef      	b.n	8008d98 <__kernel_rem_pio2+0x470>
 8008db8:	ed32 7b02 	vldmdb	r2!, {d7}
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008dc2:	e7d0      	b.n	8008d66 <__kernel_rem_pio2+0x43e>
 8008dc4:	eeb0 7b46 	vmov.f64	d7, d6
 8008dc8:	e7d2      	b.n	8008d70 <__kernel_rem_pio2+0x448>
 8008dca:	ecb2 6b02 	vldmia	r2!, {d6}
 8008dce:	3301      	adds	r3, #1
 8008dd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008dd4:	e7d4      	b.n	8008d80 <__kernel_rem_pio2+0x458>
 8008dd6:	ed91 7b00 	vldr	d7, [r1]
 8008dda:	ed91 5b02 	vldr	d5, [r1, #8]
 8008dde:	3801      	subs	r0, #1
 8008de0:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008de4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008de8:	ed81 6b00 	vstr	d6, [r1]
 8008dec:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008df0:	ed81 7b02 	vstr	d7, [r1, #8]
 8008df4:	e796      	b.n	8008d24 <__kernel_rem_pio2+0x3fc>
 8008df6:	ed92 7b00 	vldr	d7, [r2]
 8008dfa:	ed92 5b02 	vldr	d5, [r2, #8]
 8008dfe:	3901      	subs	r1, #1
 8008e00:	ee37 6b05 	vadd.f64	d6, d7, d5
 8008e04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e08:	ed82 6b00 	vstr	d6, [r2]
 8008e0c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8008e10:	ed82 7b02 	vstr	d7, [r2, #8]
 8008e14:	e78b      	b.n	8008d2e <__kernel_rem_pio2+0x406>
 8008e16:	ed33 6b02 	vldmdb	r3!, {d6}
 8008e1a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008e22:	e78b      	b.n	8008d3c <__kernel_rem_pio2+0x414>
 8008e24:	eeb1 5b45 	vneg.f64	d5, d5
 8008e28:	eeb1 6b46 	vneg.f64	d6, d6
 8008e2c:	ed87 5b00 	vstr	d5, [r7]
 8008e30:	eeb1 7b47 	vneg.f64	d7, d7
 8008e34:	ed87 6b02 	vstr	d6, [r7, #8]
 8008e38:	e78d      	b.n	8008d56 <__kernel_rem_pio2+0x42e>
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w
 8008e40:	00000000 	.word	0x00000000
 8008e44:	41700000 	.word	0x41700000
 8008e48:	00000000 	.word	0x00000000
 8008e4c:	3e700000 	.word	0x3e700000
	...

08008e58 <__kernel_sin>:
 8008e58:	ee10 3a90 	vmov	r3, s1
 8008e5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e60:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008e64:	da04      	bge.n	8008e70 <__kernel_sin+0x18>
 8008e66:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008e6a:	ee17 3a90 	vmov	r3, s15
 8008e6e:	b35b      	cbz	r3, 8008ec8 <__kernel_sin+0x70>
 8008e70:	ee20 6b00 	vmul.f64	d6, d0, d0
 8008e74:	ee20 5b06 	vmul.f64	d5, d0, d6
 8008e78:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8008ed0 <__kernel_sin+0x78>
 8008e7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008ed8 <__kernel_sin+0x80>
 8008e80:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008e84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008ee0 <__kernel_sin+0x88>
 8008e88:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008e8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008ee8 <__kernel_sin+0x90>
 8008e90:	eea7 4b06 	vfma.f64	d4, d7, d6
 8008e94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8008ef0 <__kernel_sin+0x98>
 8008e98:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008e9c:	b930      	cbnz	r0, 8008eac <__kernel_sin+0x54>
 8008e9e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8008ef8 <__kernel_sin+0xa0>
 8008ea2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8008ea6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8008eaa:	4770      	bx	lr
 8008eac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8008eb0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008eb4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8008eb8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8008ebc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008f00 <__kernel_sin+0xa8>
 8008ec0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8008ec4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	f3af 8000 	nop.w
 8008ed0:	5acfd57c 	.word	0x5acfd57c
 8008ed4:	3de5d93a 	.word	0x3de5d93a
 8008ed8:	8a2b9ceb 	.word	0x8a2b9ceb
 8008edc:	be5ae5e6 	.word	0xbe5ae5e6
 8008ee0:	57b1fe7d 	.word	0x57b1fe7d
 8008ee4:	3ec71de3 	.word	0x3ec71de3
 8008ee8:	19c161d5 	.word	0x19c161d5
 8008eec:	bf2a01a0 	.word	0xbf2a01a0
 8008ef0:	1110f8a6 	.word	0x1110f8a6
 8008ef4:	3f811111 	.word	0x3f811111
 8008ef8:	55555549 	.word	0x55555549
 8008efc:	bfc55555 	.word	0xbfc55555
 8008f00:	55555549 	.word	0x55555549
 8008f04:	3fc55555 	.word	0x3fc55555

08008f08 <fabs>:
 8008f08:	ec51 0b10 	vmov	r0, r1, d0
 8008f0c:	ee10 2a10 	vmov	r2, s0
 8008f10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f14:	ec43 2b10 	vmov	d0, r2, r3
 8008f18:	4770      	bx	lr
 8008f1a:	0000      	movs	r0, r0
 8008f1c:	0000      	movs	r0, r0
	...

08008f20 <floor>:
 8008f20:	ee10 1a90 	vmov	r1, s1
 8008f24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008f28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8008f2c:	2b13      	cmp	r3, #19
 8008f2e:	b530      	push	{r4, r5, lr}
 8008f30:	ee10 0a10 	vmov	r0, s0
 8008f34:	ee10 5a10 	vmov	r5, s0
 8008f38:	dc31      	bgt.n	8008f9e <floor+0x7e>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da15      	bge.n	8008f6a <floor+0x4a>
 8008f3e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8008ff8 <floor+0xd8>
 8008f42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008f46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4e:	dd07      	ble.n	8008f60 <floor+0x40>
 8008f50:	2900      	cmp	r1, #0
 8008f52:	da4e      	bge.n	8008ff2 <floor+0xd2>
 8008f54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f58:	4318      	orrs	r0, r3
 8008f5a:	d001      	beq.n	8008f60 <floor+0x40>
 8008f5c:	4928      	ldr	r1, [pc, #160]	; (8009000 <floor+0xe0>)
 8008f5e:	2000      	movs	r0, #0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4602      	mov	r2, r0
 8008f64:	ec43 2b10 	vmov	d0, r2, r3
 8008f68:	e020      	b.n	8008fac <floor+0x8c>
 8008f6a:	4a26      	ldr	r2, [pc, #152]	; (8009004 <floor+0xe4>)
 8008f6c:	411a      	asrs	r2, r3
 8008f6e:	ea01 0402 	and.w	r4, r1, r2
 8008f72:	4304      	orrs	r4, r0
 8008f74:	d01a      	beq.n	8008fac <floor+0x8c>
 8008f76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008ff8 <floor+0xd8>
 8008f7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008f7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f86:	ddeb      	ble.n	8008f60 <floor+0x40>
 8008f88:	2900      	cmp	r1, #0
 8008f8a:	bfbe      	ittt	lt
 8008f8c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8008f90:	fa40 f303 	asrlt.w	r3, r0, r3
 8008f94:	18c9      	addlt	r1, r1, r3
 8008f96:	ea21 0102 	bic.w	r1, r1, r2
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	e7e0      	b.n	8008f60 <floor+0x40>
 8008f9e:	2b33      	cmp	r3, #51	; 0x33
 8008fa0:	dd05      	ble.n	8008fae <floor+0x8e>
 8008fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa6:	d101      	bne.n	8008fac <floor+0x8c>
 8008fa8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8008fac:	bd30      	pop	{r4, r5, pc}
 8008fae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8008fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb6:	40e2      	lsrs	r2, r4
 8008fb8:	4202      	tst	r2, r0
 8008fba:	d0f7      	beq.n	8008fac <floor+0x8c>
 8008fbc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8008ff8 <floor+0xd8>
 8008fc0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8008fc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fcc:	ddc8      	ble.n	8008f60 <floor+0x40>
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	da02      	bge.n	8008fd8 <floor+0xb8>
 8008fd2:	2b14      	cmp	r3, #20
 8008fd4:	d103      	bne.n	8008fde <floor+0xbe>
 8008fd6:	3101      	adds	r1, #1
 8008fd8:	ea20 0002 	bic.w	r0, r0, r2
 8008fdc:	e7c0      	b.n	8008f60 <floor+0x40>
 8008fde:	2401      	movs	r4, #1
 8008fe0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008fe4:	fa04 f303 	lsl.w	r3, r4, r3
 8008fe8:	4418      	add	r0, r3
 8008fea:	42a8      	cmp	r0, r5
 8008fec:	bf38      	it	cc
 8008fee:	1909      	addcc	r1, r1, r4
 8008ff0:	e7f2      	b.n	8008fd8 <floor+0xb8>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	4601      	mov	r1, r0
 8008ff6:	e7b3      	b.n	8008f60 <floor+0x40>
 8008ff8:	8800759c 	.word	0x8800759c
 8008ffc:	7e37e43c 	.word	0x7e37e43c
 8009000:	bff00000 	.word	0xbff00000
 8009004:	000fffff 	.word	0x000fffff

08009008 <scalbn>:
 8009008:	ee10 1a90 	vmov	r1, s1
 800900c:	b510      	push	{r4, lr}
 800900e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009012:	b98c      	cbnz	r4, 8009038 <scalbn+0x30>
 8009014:	ee10 3a10 	vmov	r3, s0
 8009018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800901c:	430b      	orrs	r3, r1
 800901e:	d011      	beq.n	8009044 <scalbn+0x3c>
 8009020:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80090e8 <scalbn+0xe0>
 8009024:	4b3c      	ldr	r3, [pc, #240]	; (8009118 <scalbn+0x110>)
 8009026:	ee20 0b07 	vmul.f64	d0, d0, d7
 800902a:	4298      	cmp	r0, r3
 800902c:	da0b      	bge.n	8009046 <scalbn+0x3e>
 800902e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80090f0 <scalbn+0xe8>
 8009032:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009036:	e005      	b.n	8009044 <scalbn+0x3c>
 8009038:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800903c:	429c      	cmp	r4, r3
 800903e:	d107      	bne.n	8009050 <scalbn+0x48>
 8009040:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009044:	bd10      	pop	{r4, pc}
 8009046:	ee10 1a90 	vmov	r1, s1
 800904a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800904e:	3c36      	subs	r4, #54	; 0x36
 8009050:	4404      	add	r4, r0
 8009052:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8009056:	429c      	cmp	r4, r3
 8009058:	dd0d      	ble.n	8009076 <scalbn+0x6e>
 800905a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80090f8 <scalbn+0xf0>
 800905e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8009100 <scalbn+0xf8>
 8009062:	eeb0 6b47 	vmov.f64	d6, d7
 8009066:	ee10 3a90 	vmov	r3, s1
 800906a:	2b00      	cmp	r3, #0
 800906c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8009070:	ee27 0b06 	vmul.f64	d0, d7, d6
 8009074:	e7e6      	b.n	8009044 <scalbn+0x3c>
 8009076:	2c00      	cmp	r4, #0
 8009078:	dd0a      	ble.n	8009090 <scalbn+0x88>
 800907a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800907e:	ec53 2b10 	vmov	r2, r3, d0
 8009082:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009086:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800908a:	ec43 2b10 	vmov	d0, r2, r3
 800908e:	e7d9      	b.n	8009044 <scalbn+0x3c>
 8009090:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8009094:	da19      	bge.n	80090ca <scalbn+0xc2>
 8009096:	f24c 3350 	movw	r3, #50000	; 0xc350
 800909a:	4298      	cmp	r0, r3
 800909c:	ee10 3a90 	vmov	r3, s1
 80090a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090a4:	dd09      	ble.n	80090ba <scalbn+0xb2>
 80090a6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80090f8 <scalbn+0xf0>
 80090aa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009100 <scalbn+0xf8>
 80090ae:	eeb0 7b40 	vmov.f64	d7, d0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80090b8:	e7bb      	b.n	8009032 <scalbn+0x2a>
 80090ba:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80090f0 <scalbn+0xe8>
 80090be:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8009108 <scalbn+0x100>
 80090c2:	eeb0 7b40 	vmov.f64	d7, d0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	e7f4      	b.n	80090b4 <scalbn+0xac>
 80090ca:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80090ce:	ec53 2b10 	vmov	r2, r3, d0
 80090d2:	3436      	adds	r4, #54	; 0x36
 80090d4:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80090d8:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80090dc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009110 <scalbn+0x108>
 80090e0:	ec43 2b10 	vmov	d0, r2, r3
 80090e4:	e7a5      	b.n	8009032 <scalbn+0x2a>
 80090e6:	bf00      	nop
 80090e8:	00000000 	.word	0x00000000
 80090ec:	43500000 	.word	0x43500000
 80090f0:	c2f8f359 	.word	0xc2f8f359
 80090f4:	01a56e1f 	.word	0x01a56e1f
 80090f8:	8800759c 	.word	0x8800759c
 80090fc:	7e37e43c 	.word	0x7e37e43c
 8009100:	8800759c 	.word	0x8800759c
 8009104:	fe37e43c 	.word	0xfe37e43c
 8009108:	c2f8f359 	.word	0xc2f8f359
 800910c:	81a56e1f 	.word	0x81a56e1f
 8009110:	00000000 	.word	0x00000000
 8009114:	3c900000 	.word	0x3c900000
 8009118:	ffff3cb0 	.word	0xffff3cb0

0800911c <_init>:
 800911c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800911e:	bf00      	nop
 8009120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009122:	bc08      	pop	{r3}
 8009124:	469e      	mov	lr, r3
 8009126:	4770      	bx	lr

08009128 <_fini>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	bf00      	nop
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr
