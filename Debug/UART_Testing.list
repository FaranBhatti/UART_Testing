
UART_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f68  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08008218  08008218  00018218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800864c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000015c  240001e0  0800882c  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400033c  0800882c  0002033c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fc3f  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e53  00000000  00000000  0002fe4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b08  00000000  00000000  00031ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a50  00000000  00000000  000327a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002fbf6  00000000  00000000  000331f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ea6e  00000000  00000000  00062dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001345ff  00000000  00000000  0007185c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001a5e5b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003b70  00000000  00000000  001a5eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001e0 	.word	0x240001e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08008200 	.word	0x08008200

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001e4 	.word	0x240001e4
 80002ec:	08008200 	.word	0x08008200

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80006ac:	1d39      	adds	r1, r7, #4
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b2:	2201      	movs	r2, #1
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <__io_putchar+0x20>)
 80006b6:	f003 fed1 	bl	800445c <HAL_UART_Transmit>
  return ch;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	24000290 	.word	0x24000290

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fcc1 	bl	8001054 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t tx_data = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f821 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f935 	bl	8000948 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006de:	f000 f8df 	bl	80008a0 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006e2:	f000 f929 	bl	8000938 <MX_USB_OTG_HS_USB_Init>
  MX_UART4_Init();
 80006e6:	f000 f88f 	bl	8000808 <MX_UART4_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 80006ea:	1df9      	adds	r1, r7, #7
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f0:	2201      	movs	r2, #1
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x4c>)
 80006f4:	f003 feb2 	bl	800445c <HAL_UART_Transmit>
	tx_data++;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	71fb      	strb	r3, [r7, #7]
	printf("Transmitted: %d.\r\n", tx_data);
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	4619      	mov	r1, r3
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <main+0x50>)
 8000706:	f005 fd35 	bl	8006174 <iprintf>
  // Delay 1s
  HAL_Delay(1000);
 800070a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800070e:	f000 fd33 	bl	8001178 <HAL_Delay>
	HAL_UART_Transmit(&huart4, (uint8_t *)&tx_data, 1, HAL_MAX_DELAY);
 8000712:	e7ea      	b.n	80006ea <main+0x22>
 8000714:	240001fc 	.word	0x240001fc
 8000718:	08008218 	.word	0x08008218

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09c      	sub	sp, #112	; 0x70
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	224c      	movs	r2, #76	; 0x4c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f005 f8d8 	bl	80058e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 f8d2 	bl	80058e0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800073c:	4b30      	ldr	r3, [pc, #192]	; (8000800 <SystemClock_Config+0xe4>)
 800073e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000742:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000746:	2004      	movs	r0, #4
 8000748:	f000 ffe8 	bl	800171c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <SystemClock_Config+0xe8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a2b      	ldr	r2, [pc, #172]	; (8000804 <SystemClock_Config+0xe8>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <SystemClock_Config+0xe8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000768:	bf00      	nop
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <SystemClock_Config+0xe8>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000776:	d1f8      	bne.n	800076a <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000778:	2321      	movs	r3, #33	; 0x21
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800077c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000782:	2301      	movs	r3, #1
 8000784:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078a:	2302      	movs	r3, #2
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000792:	2318      	movs	r3, #24
 8000794:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079a:	2304      	movs	r3, #4
 800079c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079e:	2302      	movs	r3, #2
 80007a0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a2:	230c      	movs	r3, #12
 80007a4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f80c 	bl	80017d0 <HAL_RCC_OscConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007be:	f000 f9dd 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	233f      	movs	r3, #63	; 0x3f
 80007c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2303      	movs	r3, #3
 80007c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fc24 	bl	8002034 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007f2:	f000 f9c3 	bl	8000b7c <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3770      	adds	r7, #112	; 0x70
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	58024400 	.word	0x58024400
 8000804:	58024800 	.word	0x58024800

08000808 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800080c:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_UART4_Init+0x90>)
 800080e:	4a23      	ldr	r2, [pc, #140]	; (800089c <MX_UART4_Init+0x94>)
 8000810:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_UART4_Init+0x90>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_UART4_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_UART4_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_UART4_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_UART4_Init+0x90>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_UART4_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_UART4_Init+0x90>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_UART4_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_UART4_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_UART4_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart4) != HAL_OK)
 8000850:	4811      	ldr	r0, [pc, #68]	; (8000898 <MX_UART4_Init+0x90>)
 8000852:	f003 fdab 	bl	80043ac <HAL_HalfDuplex_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800085c:	f000 f98e 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_UART4_Init+0x90>)
 8000864:	f004 ff47 	bl	80056f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800086e:	f000 f985 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000872:	2100      	movs	r1, #0
 8000874:	4808      	ldr	r0, [pc, #32]	; (8000898 <MX_UART4_Init+0x90>)
 8000876:	f004 ff7c 	bl	8005772 <HAL_UARTEx_SetRxFifoThreshold>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000880:	f000 f97c 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_UART4_Init+0x90>)
 8000886:	f004 fefd 	bl	8005684 <HAL_UARTEx_DisableFifoMode>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000890:	f000 f974 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	240001fc 	.word	0x240001fc
 800089c:	40004c00 	.word	0x40004c00

080008a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a4:	4b22      	ldr	r3, [pc, #136]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <MX_USART3_UART_Init+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008aa:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008ea:	f003 fd0f 	bl	800430c <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008f4:	f000 f942 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_USART3_UART_Init+0x90>)
 80008fc:	f004 fefb 	bl	80056f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000906:	f000 f939 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <MX_USART3_UART_Init+0x90>)
 800090e:	f004 ff30 	bl	8005772 <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000918:	f000 f930 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_USART3_UART_Init+0x90>)
 800091e:	f004 feb1 	bl	8005684 <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f928 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	24000290 	.word	0x24000290
 8000934:	40004800 	.word	0x40004800

08000938 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	; 0x38
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
 800095c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b80      	ldr	r3, [pc, #512]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000960:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000964:	4a7e      	ldr	r2, [pc, #504]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800096e:	4b7c      	ldr	r3, [pc, #496]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000970:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000974:	f003 0304 	and.w	r3, r3, #4
 8000978:	623b      	str	r3, [r7, #32]
 800097a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800097c:	4b78      	ldr	r3, [pc, #480]	; (8000b60 <MX_GPIO_Init+0x218>)
 800097e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000982:	4a77      	ldr	r2, [pc, #476]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000984:	f043 0320 	orr.w	r3, r3, #32
 8000988:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800098c:	4b74      	ldr	r3, [pc, #464]	; (8000b60 <MX_GPIO_Init+0x218>)
 800098e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000992:	f003 0320 	and.w	r3, r3, #32
 8000996:	61fb      	str	r3, [r7, #28]
 8000998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	4b71      	ldr	r3, [pc, #452]	; (8000b60 <MX_GPIO_Init+0x218>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a0:	4a6f      	ldr	r2, [pc, #444]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009aa:	4b6d      	ldr	r3, [pc, #436]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b69      	ldr	r3, [pc, #420]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009be:	4a68      	ldr	r2, [pc, #416]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009c8:	4b65      	ldr	r3, [pc, #404]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b62      	ldr	r3, [pc, #392]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009dc:	4a60      	ldr	r2, [pc, #384]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009de:	f043 0302 	orr.w	r3, r3, #2
 80009e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009e6:	4b5e      	ldr	r3, [pc, #376]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ec:	f003 0302 	and.w	r3, r3, #2
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f4:	4b5a      	ldr	r3, [pc, #360]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009fa:	4a59      	ldr	r2, [pc, #356]	; (8000b60 <MX_GPIO_Init+0x218>)
 80009fc:	f043 0308 	orr.w	r3, r3, #8
 8000a00:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a04:	4b56      	ldr	r3, [pc, #344]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000a06:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a12:	4b53      	ldr	r3, [pc, #332]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000a14:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a18:	4a51      	ldr	r2, [pc, #324]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a22:	4b4f      	ldr	r3, [pc, #316]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000a24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a30:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000a32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a36:	4a4a      	ldr	r2, [pc, #296]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000a38:	f043 0310 	orr.w	r3, r3, #16
 8000a3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000a40:	4b47      	ldr	r3, [pc, #284]	; (8000b60 <MX_GPIO_Init+0x218>)
 8000a42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	4843      	ldr	r0, [pc, #268]	; (8000b64 <MX_GPIO_Init+0x21c>)
 8000a56:	f000 fe47 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a60:	4841      	ldr	r0, [pc, #260]	; (8000b68 <MX_GPIO_Init+0x220>)
 8000a62:	f000 fe41 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2102      	movs	r1, #2
 8000a6a:	4840      	ldr	r0, [pc, #256]	; (8000b6c <MX_GPIO_Init+0x224>)
 8000a6c:	f000 fe3c 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	483a      	ldr	r0, [pc, #232]	; (8000b70 <MX_GPIO_Init+0x228>)
 8000a86:	f000 fc7f 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4830      	ldr	r0, [pc, #192]	; (8000b64 <MX_GPIO_Init+0x21c>)
 8000aa4:	f000 fc70 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000aa8:	f244 0301 	movw	r3, #16385	; 0x4001
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4829      	ldr	r0, [pc, #164]	; (8000b68 <MX_GPIO_Init+0x220>)
 8000ac2:	f000 fc61 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ac6:	2380      	movs	r3, #128	; 0x80
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4826      	ldr	r0, [pc, #152]	; (8000b74 <MX_GPIO_Init+0x22c>)
 8000adc:	f000 fc54 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af2:	4619      	mov	r1, r3
 8000af4:	4820      	ldr	r0, [pc, #128]	; (8000b78 <MX_GPIO_Init+0x230>)
 8000af6:	f000 fc47 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	4818      	ldr	r0, [pc, #96]	; (8000b78 <MX_GPIO_Init+0x230>)
 8000b18:	f000 fc36 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000b1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b32:	4619      	mov	r1, r3
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <MX_GPIO_Init+0x230>)
 8000b36:	f000 fc27 	bl	8001388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <MX_GPIO_Init+0x224>)
 8000b52:	f000 fc19 	bl	8001388 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b56:	bf00      	nop
 8000b58:	3738      	adds	r7, #56	; 0x38
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	58024400 	.word	0x58024400
 8000b64:	58021400 	.word	0x58021400
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	58021000 	.word	0x58021000
 8000b70:	58020800 	.word	0x58020800
 8000b74:	58021800 	.word	0x58021800
 8000b78:	58020000 	.word	0x58020000

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x30>)
 8000b90:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x30>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x30>)
 8000ba0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ba4:	f003 0302 	and.w	r3, r3, #2
 8000ba8:	607b      	str	r3, [r7, #4]
 8000baa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	58024400 	.word	0x58024400

08000bbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0bc      	sub	sp, #240	; 0xf0
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0318 	add.w	r3, r7, #24
 8000bd8:	22c0      	movs	r2, #192	; 0xc0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f004 fe7f 	bl	80058e0 <memset>
  if(huart->Instance==UART4)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a4d      	ldr	r2, [pc, #308]	; (8000d1c <HAL_UART_MspInit+0x160>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d146      	bne.n	8000c7a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000bec:	f04f 0202 	mov.w	r2, #2
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfe:	f107 0318 	add.w	r3, r7, #24
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 fda2 	bl	800274c <HAL_RCCEx_PeriphCLKConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c0e:	f7ff ffb5 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c12:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000c14:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c18:	4a41      	ldr	r2, [pc, #260]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c1e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000c24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c36:	4a3a      	ldr	r2, [pc, #232]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c40:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000c42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c54:	2312      	movs	r3, #18
 8000c56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000c66:	2308      	movs	r3, #8
 8000c68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c70:	4619      	mov	r1, r3
 8000c72:	482c      	ldr	r0, [pc, #176]	; (8000d24 <HAL_UART_MspInit+0x168>)
 8000c74:	f000 fb88 	bl	8001388 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c78:	e04b      	b.n	8000d12 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a2a      	ldr	r2, [pc, #168]	; (8000d28 <HAL_UART_MspInit+0x16c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d146      	bne.n	8000d12 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c84:	f04f 0202 	mov.w	r2, #2
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c96:	f107 0318 	add.w	r3, r7, #24
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fd56 	bl	800274c <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0xee>
      Error_Handler();
 8000ca6:	f7ff ff69 	bl	8000b7c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000cac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000cb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000cbc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000cc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000cca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cce:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x164>)
 8000cda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d00:	2307      	movs	r3, #7
 8000d02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <HAL_UART_MspInit+0x170>)
 8000d0e:	f000 fb3b 	bl	8001388 <HAL_GPIO_Init>
}
 8000d12:	bf00      	nop
 8000d14:	37f0      	adds	r7, #240	; 0xf0
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004c00 	.word	0x40004c00
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58020000 	.word	0x58020000
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	58020c00 	.word	0x58020c00

08000d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <NMI_Handler+0x4>

08000d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <MemManage_Handler+0x4>

08000d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7c:	f000 f9dc 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return 1;
 8000d88:	2301      	movs	r3, #1
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <_kill>:

int _kill(int pid, int sig)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d9e:	f004 fd75 	bl	800588c <__errno>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2216      	movs	r2, #22
 8000da6:	601a      	str	r2, [r3, #0]
  return -1;
 8000da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_exit>:

void _exit (int status)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f7ff ffe7 	bl	8000d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dc6:	e7fe      	b.n	8000dc6 <_exit+0x12>

08000dc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e00a      	b.n	8000df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dda:	f3af 8000 	nop.w
 8000dde:	4601      	mov	r1, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf0      	blt.n	8000dda <_read+0x12>
  }

  return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e009      	b.n	8000e28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc41 	bl	80006a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbf1      	blt.n	8000e14 <_write+0x12>
  }
  return len;
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_close>:

int _close(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e62:	605a      	str	r2, [r3, #4]
  return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_isatty>:

int _isatty(int file)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f004 fcda 	bl	800588c <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24100000 	.word	0x24100000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	24000324 	.word	0x24000324
 8000f0c:	24000340 	.word	0x24000340

08000f10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f14:	4b32      	ldr	r3, [pc, #200]	; (8000fe0 <SystemInit+0xd0>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a31      	ldr	r2, [pc, #196]	; (8000fe0 <SystemInit+0xd0>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <SystemInit+0xd4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 030f 	and.w	r3, r3, #15
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d807      	bhi.n	8000f40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <SystemInit+0xd4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 030f 	bic.w	r3, r3, #15
 8000f38:	4a2a      	ldr	r2, [pc, #168]	; (8000fe4 <SystemInit+0xd4>)
 8000f3a:	f043 0303 	orr.w	r3, r3, #3
 8000f3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f40:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <SystemInit+0xd8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a28      	ldr	r2, [pc, #160]	; (8000fe8 <SystemInit+0xd8>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <SystemInit+0xd8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <SystemInit+0xd8>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4924      	ldr	r1, [pc, #144]	; (8000fe8 <SystemInit+0xd8>)
 8000f58:	4b24      	ldr	r3, [pc, #144]	; (8000fec <SystemInit+0xdc>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <SystemInit+0xd4>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 030c 	and.w	r3, r3, #12
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <SystemInit+0xd4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f023 030f 	bic.w	r3, r3, #15
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <SystemInit+0xd4>)
 8000f74:	f043 0303 	orr.w	r3, r3, #3
 8000f78:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <SystemInit+0xd8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <SystemInit+0xd8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <SystemInit+0xd8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <SystemInit+0xd8>)
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <SystemInit+0xe0>)
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <SystemInit+0xd8>)
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <SystemInit+0xe4>)
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <SystemInit+0xd8>)
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <SystemInit+0xe8>)
 8000f9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <SystemInit+0xd8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <SystemInit+0xd8>)
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <SystemInit+0xe8>)
 8000fa8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <SystemInit+0xd8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <SystemInit+0xd8>)
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <SystemInit+0xe8>)
 8000fb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <SystemInit+0xd8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <SystemInit+0xd8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a09      	ldr	r2, [pc, #36]	; (8000fe8 <SystemInit+0xd8>)
 8000fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <SystemInit+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <SystemInit+0xec>)
 8000fd0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fd4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000ed00 	.word	0xe000ed00
 8000fe4:	52002000 	.word	0x52002000
 8000fe8:	58024400 	.word	0x58024400
 8000fec:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ff0:	02020200 	.word	0x02020200
 8000ff4:	01ff0000 	.word	0x01ff0000
 8000ff8:	01010280 	.word	0x01010280
 8000ffc:	52004000 	.word	0x52004000

08001000 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001004:	f7ff ff84 	bl	8000f10 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800102e:	f004 fc33 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001032:	f7ff fb49 	bl	80006c8 <main>
  bx  lr
 8001036:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001038:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800103c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001040:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001044:	0800864c 	.word	0x0800864c
  ldr r2, =_sbss
 8001048:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 800104c:	2400033c 	.word	0x2400033c

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>
	...

08001054 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 f962 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001060:	f001 f99e 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8001064:	4602      	mov	r2, r0
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_Init+0x68>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	0a1b      	lsrs	r3, r3, #8
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	4913      	ldr	r1, [pc, #76]	; (80010c0 <HAL_Init+0x6c>)
 8001072:	5ccb      	ldrb	r3, [r1, r3]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <HAL_Init+0x68>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 030f 	and.w	r3, r3, #15
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <HAL_Init+0x6c>)
 8001088:	5cd3      	ldrb	r3, [r2, r3]
 800108a:	f003 031f 	and.w	r3, r3, #31
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	fa22 f303 	lsr.w	r3, r2, r3
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_Init+0x70>)
 8001096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_Init+0x74>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109e:	2000      	movs	r0, #0
 80010a0:	f000 f814 	bl	80010cc <HAL_InitTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e002      	b.n	80010b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ae:	f7ff fd6b 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	58024400 	.word	0x58024400
 80010c0:	0800822c 	.word	0x0800822c
 80010c4:	24000004 	.word	0x24000004
 80010c8:	24000000 	.word	0x24000000

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_InitTick+0x60>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d101      	bne.n	80010e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e021      	b.n	8001124 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_InitTick+0x64>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_InitTick+0x60>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f939 	bl	800136e <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001114:	f000 f911 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_InitTick+0x68>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	2400000c 	.word	0x2400000c
 8001130:	24000000 	.word	0x24000000
 8001134:	24000008 	.word	0x24000008

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2400000c 	.word	0x2400000c
 800115c:	24000328 	.word	0x24000328

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	; (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	24000328 	.word	0x24000328

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	2400000c 	.word	0x2400000c

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <__NVIC_SetPriorityGrouping+0x40>)
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	60d3      	str	r3, [r2, #12]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000ed00 	.word	0xe000ed00
 8001204:	05fa0000 	.word	0x05fa0000

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff47 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff5e 	bl	8001208 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff90 	bl	8001278 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5f 	bl	8001224 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ffb2 	bl	80012e0 <SysTick_Config>
 800137c:	4603      	mov	r3, r0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001396:	4b89      	ldr	r3, [pc, #548]	; (80015bc <HAL_GPIO_Init+0x234>)
 8001398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800139a:	e194      	b.n	80016c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	f000 8186 	beq.w	80016c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d005      	beq.n	80013cc <HAL_GPIO_Init+0x44>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d130      	bne.n	800142e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001402:	2201      	movs	r2, #1
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	f003 0201 	and.w	r2, r3, #1
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b03      	cmp	r3, #3
 8001438:	d017      	beq.n	800146a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	2203      	movs	r2, #3
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d123      	bne.n	80014be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f003 0307 	and.w	r3, r3, #7
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	69b9      	ldr	r1, [r7, #24]
 80014ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0203 	and.w	r2, r3, #3
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80e0 	beq.w	80016c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001500:	4b2f      	ldr	r3, [pc, #188]	; (80015c0 <HAL_GPIO_Init+0x238>)
 8001502:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001506:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <HAL_GPIO_Init+0x238>)
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001510:	4b2b      	ldr	r3, [pc, #172]	; (80015c0 <HAL_GPIO_Init+0x238>)
 8001512:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151e:	4a29      	ldr	r2, [pc, #164]	; (80015c4 <HAL_GPIO_Init+0x23c>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a20      	ldr	r2, [pc, #128]	; (80015c8 <HAL_GPIO_Init+0x240>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d052      	beq.n	80015f0 <HAL_GPIO_Init+0x268>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_GPIO_Init+0x244>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d031      	beq.n	80015b6 <HAL_GPIO_Init+0x22e>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_GPIO_Init+0x248>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d02b      	beq.n	80015b2 <HAL_GPIO_Init+0x22a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_GPIO_Init+0x24c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d025      	beq.n	80015ae <HAL_GPIO_Init+0x226>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <HAL_GPIO_Init+0x250>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d01f      	beq.n	80015aa <HAL_GPIO_Init+0x222>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_GPIO_Init+0x254>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d019      	beq.n	80015a6 <HAL_GPIO_Init+0x21e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_GPIO_Init+0x258>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x21a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_GPIO_Init+0x25c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x216>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x260>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x212>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_GPIO_Init+0x264>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x20e>
 8001592:	2309      	movs	r3, #9
 8001594:	e02d      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 8001596:	230a      	movs	r3, #10
 8001598:	e02b      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 800159a:	2308      	movs	r3, #8
 800159c:	e029      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e027      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015a2:	2306      	movs	r3, #6
 80015a4:	e025      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015a6:	2305      	movs	r3, #5
 80015a8:	e023      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015aa:	2304      	movs	r3, #4
 80015ac:	e021      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e01f      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e01d      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e01b      	b.n	80015f2 <HAL_GPIO_Init+0x26a>
 80015ba:	bf00      	nop
 80015bc:	58000080 	.word	0x58000080
 80015c0:	58024400 	.word	0x58024400
 80015c4:	58000400 	.word	0x58000400
 80015c8:	58020000 	.word	0x58020000
 80015cc:	58020400 	.word	0x58020400
 80015d0:	58020800 	.word	0x58020800
 80015d4:	58020c00 	.word	0x58020c00
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58021400 	.word	0x58021400
 80015e0:	58021800 	.word	0x58021800
 80015e4:	58021c00 	.word	0x58021c00
 80015e8:	58022000 	.word	0x58022000
 80015ec:	58022400 	.word	0x58022400
 80015f0:	2300      	movs	r3, #0
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	f002 0203 	and.w	r2, r2, #3
 80015f8:	0092      	lsls	r2, r2, #2
 80015fa:	4093      	lsls	r3, r2
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001602:	4938      	ldr	r1, [pc, #224]	; (80016e4 <HAL_GPIO_Init+0x35c>)
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	3302      	adds	r3, #2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	43db      	mvns	r3, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4013      	ands	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3301      	adds	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f47f ae63 	bne.w	800139c <HAL_GPIO_Init+0x14>
  }
}
 80016d6:	bf00      	nop
 80016d8:	bf00      	nop
 80016da:	3724      	adds	r7, #36	; 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	58000400 	.word	0x58000400

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001704:	e003      	b.n	800170e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001706:	887b      	ldrh	r3, [r7, #2]
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	619a      	str	r2, [r3, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	2b06      	cmp	r3, #6
 800172e:	d00a      	beq.n	8001746 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001730:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	d001      	beq.n	8001742 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e040      	b.n	80017c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e03e      	b.n	80017c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800174e:	491f      	ldr	r1, [pc, #124]	; (80017cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4313      	orrs	r3, r2
 8001754:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001756:	f7ff fd03 	bl	8001160 <HAL_GetTick>
 800175a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800175c:	e009      	b.n	8001772 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800175e:	f7ff fcff 	bl	8001160 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800176c:	d901      	bls.n	8001772 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e028      	b.n	80017c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_PWREx_ConfigSupply+0xb0>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800177e:	d1ee      	bne.n	800175e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b1e      	cmp	r3, #30
 8001784:	d008      	beq.n	8001798 <HAL_PWREx_ConfigSupply+0x7c>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b2e      	cmp	r3, #46	; 0x2e
 800178a:	d005      	beq.n	8001798 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b1d      	cmp	r3, #29
 8001790:	d002      	beq.n	8001798 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b2d      	cmp	r3, #45	; 0x2d
 8001796:	d114      	bne.n	80017c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001798:	f7ff fce2 	bl	8001160 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800179e:	e009      	b.n	80017b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017a0:	f7ff fcde 	bl	8001160 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ae:	d901      	bls.n	80017b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e007      	b.n	80017c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <HAL_PWREx_ConfigSupply+0xb0>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c0:	d1ee      	bne.n	80017a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	58024800 	.word	0x58024800

080017d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	f000 bc1f 	b.w	8002022 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80b3 	beq.w	8001958 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f2:	4b95      	ldr	r3, [pc, #596]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017fc:	4b92      	ldr	r3, [pc, #584]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80017fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	2b10      	cmp	r3, #16
 8001806:	d007      	beq.n	8001818 <HAL_RCC_OscConfig+0x48>
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	2b18      	cmp	r3, #24
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x64>
 800180e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4b8b      	ldr	r3, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8098 	beq.w	8001956 <HAL_RCC_OscConfig+0x186>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 8093 	bne.w	8001956 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e3f6      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x7c>
 800183e:	4b82      	ldr	r3, [pc, #520]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a81      	ldr	r2, [pc, #516]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e058      	b.n	80018fe <HAL_RCC_OscConfig+0x12e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d112      	bne.n	800187a <HAL_RCC_OscConfig+0xaa>
 8001854:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a7b      	ldr	r2, [pc, #492]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a78      	ldr	r2, [pc, #480]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001866:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b76      	ldr	r3, [pc, #472]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a75      	ldr	r2, [pc, #468]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e041      	b.n	80018fe <HAL_RCC_OscConfig+0x12e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001882:	d112      	bne.n	80018aa <HAL_RCC_OscConfig+0xda>
 8001884:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6f      	ldr	r2, [pc, #444]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 800188a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6c      	ldr	r2, [pc, #432]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001896:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	e029      	b.n	80018fe <HAL_RCC_OscConfig+0x12e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80018b2:	d112      	bne.n	80018da <HAL_RCC_OscConfig+0x10a>
 80018b4:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a63      	ldr	r2, [pc, #396]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b61      	ldr	r3, [pc, #388]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a60      	ldr	r2, [pc, #384]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a5d      	ldr	r2, [pc, #372]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e011      	b.n	80018fe <HAL_RCC_OscConfig+0x12e>
 80018da:	4b5b      	ldr	r3, [pc, #364]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a5a      	ldr	r2, [pc, #360]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a57      	ldr	r2, [pc, #348]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80018f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80018fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d013      	beq.n	800192e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001906:	f7ff fc2b 	bl	8001160 <HAL_GetTick>
 800190a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190e:	f7ff fc27 	bl	8001160 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b64      	cmp	r3, #100	; 0x64
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e380      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001920:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0f0      	beq.n	800190e <HAL_RCC_OscConfig+0x13e>
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192e:	f7ff fc17 	bl	8001160 <HAL_GetTick>
 8001932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001936:	f7ff fc13 	bl	8001160 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b64      	cmp	r3, #100	; 0x64
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e36c      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x166>
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001956:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 808c 	beq.w	8001a7e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800196e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_RCC_OscConfig+0x1bc>
 800197c:	6a3b      	ldr	r3, [r7, #32]
 800197e:	2b18      	cmp	r3, #24
 8001980:	d137      	bne.n	80019f2 <HAL_RCC_OscConfig+0x222>
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d132      	bne.n	80019f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x1d4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e33e      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 0219 	bic.w	r2, r3, #25
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4925      	ldr	r1, [pc, #148]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff fbd3 	bl	8001160 <HAL_GetTick>
 80019ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fbcf 	bl	8001160 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e328      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019dc:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	061b      	lsls	r3, r3, #24
 80019ea:	4917      	ldr	r1, [pc, #92]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019f0:	e045      	b.n	8001a7e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0219 	bic.w	r2, r3, #25
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	4910      	ldr	r1, [pc, #64]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fba8 	bl	8001160 <HAL_GetTick>
 8001a10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a14:	f7ff fba4 	bl	8001160 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e2fd      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	061b      	lsls	r3, r3, #24
 8001a40:	4901      	ldr	r1, [pc, #4]	; (8001a48 <HAL_RCC_OscConfig+0x278>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
 8001a46:	e01a      	b.n	8001a7e <HAL_RCC_OscConfig+0x2ae>
 8001a48:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4c:	4b97      	ldr	r3, [pc, #604]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a96      	ldr	r2, [pc, #600]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a58:	f7ff fb82 	bl	8001160 <HAL_GetTick>
 8001a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fb7e 	bl	8001160 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e2d7      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a72:	4b8e      	ldr	r3, [pc, #568]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1f0      	bne.n	8001a60 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d06a      	beq.n	8001b60 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8a:	4b88      	ldr	r3, [pc, #544]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a94:	4b85      	ldr	r3, [pc, #532]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d007      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x2e0>
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	2b18      	cmp	r3, #24
 8001aa4:	d11b      	bne.n	8001ade <HAL_RCC_OscConfig+0x30e>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d116      	bne.n	8001ade <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b80      	cmp	r3, #128	; 0x80
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e2ac      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac8:	4b78      	ldr	r3, [pc, #480]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	4975      	ldr	r1, [pc, #468]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001adc:	e040      	b.n	8001b60 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d023      	beq.n	8001b2e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ae6:	4b71      	ldr	r3, [pc, #452]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a70      	ldr	r2, [pc, #448]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fb35 	bl	8001160 <HAL_GetTick>
 8001af6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001afa:	f7ff fb31 	bl	8001160 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e28a      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b0c:	4b67      	ldr	r3, [pc, #412]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b18:	4b64      	ldr	r3, [pc, #400]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	061b      	lsls	r3, r3, #24
 8001b26:	4961      	ldr	r1, [pc, #388]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
 8001b2c:	e018      	b.n	8001b60 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a5e      	ldr	r2, [pc, #376]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fb11 	bl	8001160 <HAL_GetTick>
 8001b3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b42:	f7ff fb0d 	bl	8001160 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e266      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b54:	4b55      	ldr	r3, [pc, #340]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d036      	beq.n	8001bda <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d019      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b74:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b78:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b80:	f7ff faee 	bl	8001160 <HAL_GetTick>
 8001b84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b88:	f7ff faea 	bl	8001160 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e243      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b9a:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x3b8>
 8001ba6:	e018      	b.n	8001bda <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	4a3f      	ldr	r2, [pc, #252]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001bae:	f023 0301 	bic.w	r3, r3, #1
 8001bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fad4 	bl	8001160 <HAL_GetTick>
 8001bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fad0 	bl	8001160 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e229      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bce:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d036      	beq.n	8001c54 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d019      	beq.n	8001c22 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bee:	4b2f      	ldr	r3, [pc, #188]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2e      	ldr	r2, [pc, #184]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fab1 	bl	8001160 <HAL_GetTick>
 8001bfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c02:	f7ff faad 	bl	8001160 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e206      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x432>
 8001c20:	e018      	b.n	8001c54 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001c28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fa97 	bl	8001160 <HAL_GetTick>
 8001c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c36:	f7ff fa93 	bl	8001160 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e1ec      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c48:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f0      	bne.n	8001c36 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80af 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_OscConfig+0x4e0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_RCC_OscConfig+0x4e0>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c6e:	f7ff fa77 	bl	8001160 <HAL_GetTick>
 8001c72:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff fa73 	bl	8001160 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1cc      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_OscConfig+0x4e0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10b      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4e4>
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca0:	4a02      	ldr	r2, [pc, #8]	; (8001cac <HAL_RCC_OscConfig+0x4dc>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca8:	e05b      	b.n	8001d62 <HAL_RCC_OscConfig+0x592>
 8001caa:	bf00      	nop
 8001cac:	58024400 	.word	0x58024400
 8001cb0:	58024800 	.word	0x58024800
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d112      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x512>
 8001cbc:	4b9d      	ldr	r3, [pc, #628]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc0:	4a9c      	ldr	r2, [pc, #624]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc8:	4b9a      	ldr	r3, [pc, #616]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a99      	ldr	r2, [pc, #612]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	4b97      	ldr	r3, [pc, #604]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd8:	4a96      	ldr	r2, [pc, #600]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cda:	f023 0304 	bic.w	r3, r3, #4
 8001cde:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce0:	e03f      	b.n	8001d62 <HAL_RCC_OscConfig+0x592>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	2b05      	cmp	r3, #5
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x540>
 8001cea:	4b92      	ldr	r3, [pc, #584]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a91      	ldr	r2, [pc, #580]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a8e      	ldr	r2, [pc, #568]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001cfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b8c      	ldr	r3, [pc, #560]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a8b      	ldr	r2, [pc, #556]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0e:	e028      	b.n	8001d62 <HAL_RCC_OscConfig+0x592>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b85      	cmp	r3, #133	; 0x85
 8001d16:	d112      	bne.n	8001d3e <HAL_RCC_OscConfig+0x56e>
 8001d18:	4b86      	ldr	r3, [pc, #536]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	4a85      	ldr	r2, [pc, #532]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6713      	str	r3, [r2, #112]	; 0x70
 8001d24:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	4a82      	ldr	r2, [pc, #520]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d30:	4b80      	ldr	r3, [pc, #512]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d34:	4a7f      	ldr	r2, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d3c:	e011      	b.n	8001d62 <HAL_RCC_OscConfig+0x592>
 8001d3e:	4b7d      	ldr	r3, [pc, #500]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	4a7c      	ldr	r2, [pc, #496]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4a:	4b7a      	ldr	r3, [pc, #488]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	4a79      	ldr	r2, [pc, #484]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	6713      	str	r3, [r2, #112]	; 0x70
 8001d56:	4b77      	ldr	r3, [pc, #476]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a76      	ldr	r2, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d015      	beq.n	8001d96 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f9f9 	bl	8001160 <HAL_GetTick>
 8001d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d72:	f7ff f9f5 	bl	8001160 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e14c      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0ee      	beq.n	8001d72 <HAL_RCC_OscConfig+0x5a2>
 8001d94:	e014      	b.n	8001dc0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f9e3 	bl	8001160 <HAL_GetTick>
 8001d9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7ff f9df 	bl	8001160 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e136      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001db4:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1ee      	bne.n	8001d9e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 812b 	beq.w	8002020 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001dca:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dd2:	2b18      	cmp	r3, #24
 8001dd4:	f000 80bb 	beq.w	8001f4e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	f040 8095 	bne.w	8001f0c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a53      	ldr	r2, [pc, #332]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dee:	f7ff f9b7 	bl	8001160 <HAL_GetTick>
 8001df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7ff f9b3 	bl	8001160 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e10c      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e08:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e14:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x768>)
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e24:	0112      	lsls	r2, r2, #4
 8001e26:	430a      	orrs	r2, r1
 8001e28:	4942      	ldr	r1, [pc, #264]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	628b      	str	r3, [r1, #40]	; 0x28
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	025b      	lsls	r3, r3, #9
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	3b01      	subs	r3, #1
 8001e58:	061b      	lsls	r3, r3, #24
 8001e5a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e5e:	4935      	ldr	r1, [pc, #212]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	4a32      	ldr	r2, [pc, #200]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e70:	4b30      	ldr	r3, [pc, #192]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e74:	4b31      	ldr	r3, [pc, #196]	; (8001f3c <HAL_RCC_OscConfig+0x76c>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e7c:	00d2      	lsls	r2, r2, #3
 8001e7e:	492d      	ldr	r1, [pc, #180]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	f023 020c 	bic.w	r2, r3, #12
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	4928      	ldr	r1, [pc, #160]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	f023 0202 	bic.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4924      	ldr	r1, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a15      	ldr	r2, [pc, #84]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7ff f93c 	bl	8001160 <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eec:	f7ff f938 	bl	8001160 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e091      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d0f0      	beq.n	8001eec <HAL_RCC_OscConfig+0x71c>
 8001f0a:	e089      	b.n	8002020 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a08      	ldr	r2, [pc, #32]	; (8001f34 <HAL_RCC_OscConfig+0x764>)
 8001f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f922 	bl	8001160 <HAL_GetTick>
 8001f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f1e:	e00f      	b.n	8001f40 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f20:	f7ff f91e 	bl	8001160 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d908      	bls.n	8001f40 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e077      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
 8001f32:	bf00      	nop
 8001f34:	58024400 	.word	0x58024400
 8001f38:	fffffc0c 	.word	0xfffffc0c
 8001f3c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f40:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e9      	bne.n	8001f20 <HAL_RCC_OscConfig+0x750>
 8001f4c:	e068      	b.n	8002020 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d031      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0203 	and.w	r2, r3, #3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d12a      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d122      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d11a      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	0a5b      	lsrs	r3, r3, #9
 8001f94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d111      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d108      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	0e1b      	lsrs	r3, r3, #24
 8001fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e02b      	b.n	8002022 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fd4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d01f      	beq.n	8002020 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fec:	f7ff f8b8 	bl	8001160 <HAL_GetTick>
 8001ff0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff f8b4 	bl	8001160 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d0f9      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8002002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_RCC_OscConfig+0x860>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800200c:	00d2      	lsls	r2, r2, #3
 800200e:	4907      	ldr	r1, [pc, #28]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8002010:	4313      	orrs	r3, r2
 8002012:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <HAL_RCC_OscConfig+0x85c>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3730      	adds	r7, #48	; 0x30
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	58024400 	.word	0x58024400
 8002030:	ffff0007 	.word	0xffff0007

08002034 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e19c      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b8a      	ldr	r3, [pc, #552]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b87      	ldr	r3, [pc, #540]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 020f 	bic.w	r2, r3, #15
 800205e:	4985      	ldr	r1, [pc, #532]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b83      	ldr	r3, [pc, #524]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e184      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	4b7b      	ldr	r3, [pc, #492]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002090:	429a      	cmp	r2, r3
 8002092:	d908      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002094:	4b78      	ldr	r3, [pc, #480]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	4975      	ldr	r1, [pc, #468]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020be:	429a      	cmp	r2, r3
 80020c0:	d908      	bls.n	80020d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020c2:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	496a      	ldr	r1, [pc, #424]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d010      	beq.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	4b64      	ldr	r3, [pc, #400]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d908      	bls.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020f0:	4b61      	ldr	r3, [pc, #388]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	495e      	ldr	r1, [pc, #376]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d010      	beq.n	8002130 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800211a:	429a      	cmp	r2, r3
 800211c:	d908      	bls.n	8002130 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800211e:	4b56      	ldr	r3, [pc, #344]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4953      	ldr	r1, [pc, #332]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 800212c:	4313      	orrs	r3, r2
 800212e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68da      	ldr	r2, [r3, #12]
 8002140:	4b4d      	ldr	r3, [pc, #308]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	429a      	cmp	r2, r3
 800214a:	d908      	bls.n	800215e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800214c:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	f023 020f 	bic.w	r2, r3, #15
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4947      	ldr	r1, [pc, #284]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 800215a:	4313      	orrs	r3, r2
 800215c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d055      	beq.n	8002216 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800216a:	4b43      	ldr	r3, [pc, #268]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4940      	ldr	r1, [pc, #256]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002178:	4313      	orrs	r3, r2
 800217a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d107      	bne.n	8002194 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d121      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0f6      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d107      	bne.n	80021ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d115      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0ea      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d107      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021b4:	4b30      	ldr	r3, [pc, #192]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0de      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021c4:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0d6      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4925      	ldr	r1, [pc, #148]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021e6:	f7fe ffbb 	bl	8001160 <HAL_GetTick>
 80021ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ee:	f7fe ffb7 	bl	8001160 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0be      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002204:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	429a      	cmp	r2, r3
 8002214:	d1eb      	bne.n	80021ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d010      	beq.n	8002244 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	429a      	cmp	r2, r3
 8002230:	d208      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	f023 020f 	bic.w	r2, r3, #15
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	490e      	ldr	r1, [pc, #56]	; (8002278 <HAL_RCC_ClockConfig+0x244>)
 8002240:	4313      	orrs	r3, r2
 8002242:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d214      	bcs.n	800227c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	4906      	ldr	r1, [pc, #24]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_RCC_ClockConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d005      	beq.n	800227c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e086      	b.n	8002382 <HAL_RCC_ClockConfig+0x34e>
 8002274:	52002000 	.word	0x52002000
 8002278:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d010      	beq.n	80022aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	4b3f      	ldr	r3, [pc, #252]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002294:	429a      	cmp	r2, r3
 8002296:	d208      	bcs.n	80022aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002298:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	4939      	ldr	r1, [pc, #228]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	4b34      	ldr	r3, [pc, #208]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d208      	bcs.n	80022d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	492e      	ldr	r1, [pc, #184]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d010      	beq.n	8002306 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699a      	ldr	r2, [r3, #24]
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d208      	bcs.n	8002306 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4922      	ldr	r1, [pc, #136]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 8002302:	4313      	orrs	r3, r2
 8002304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0320 	and.w	r3, r3, #32
 800230e:	2b00      	cmp	r3, #0
 8002310:	d010      	beq.n	8002334 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800231e:	429a      	cmp	r2, r3
 8002320:	d208      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4917      	ldr	r1, [pc, #92]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 8002330:	4313      	orrs	r3, r2
 8002332:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002334:	f000 f834 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4912      	ldr	r1, [pc, #72]	; (8002390 <HAL_RCC_ClockConfig+0x35c>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_RCC_ClockConfig+0x358>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a0d      	ldr	r2, [pc, #52]	; (8002390 <HAL_RCC_ClockConfig+0x35c>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
 8002368:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x360>)
 800236a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800236c:	4a0a      	ldr	r2, [pc, #40]	; (8002398 <HAL_RCC_ClockConfig+0x364>)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_RCC_ClockConfig+0x368>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fea8 	bl	80010cc <HAL_InitTick>
 800237c:	4603      	mov	r3, r0
 800237e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002380:	7bfb      	ldrb	r3, [r7, #15]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	58024400 	.word	0x58024400
 8002390:	0800822c 	.word	0x0800822c
 8002394:	24000004 	.word	0x24000004
 8002398:	24000000 	.word	0x24000000
 800239c:	24000008 	.word	0x24000008

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023a6:	4bb3      	ldr	r3, [pc, #716]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ae:	2b18      	cmp	r3, #24
 80023b0:	f200 8155 	bhi.w	800265e <HAL_RCC_GetSysClockFreq+0x2be>
 80023b4:	a201      	add	r2, pc, #4	; (adr r2, 80023bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80023b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ba:	bf00      	nop
 80023bc:	08002421 	.word	0x08002421
 80023c0:	0800265f 	.word	0x0800265f
 80023c4:	0800265f 	.word	0x0800265f
 80023c8:	0800265f 	.word	0x0800265f
 80023cc:	0800265f 	.word	0x0800265f
 80023d0:	0800265f 	.word	0x0800265f
 80023d4:	0800265f 	.word	0x0800265f
 80023d8:	0800265f 	.word	0x0800265f
 80023dc:	08002447 	.word	0x08002447
 80023e0:	0800265f 	.word	0x0800265f
 80023e4:	0800265f 	.word	0x0800265f
 80023e8:	0800265f 	.word	0x0800265f
 80023ec:	0800265f 	.word	0x0800265f
 80023f0:	0800265f 	.word	0x0800265f
 80023f4:	0800265f 	.word	0x0800265f
 80023f8:	0800265f 	.word	0x0800265f
 80023fc:	0800244d 	.word	0x0800244d
 8002400:	0800265f 	.word	0x0800265f
 8002404:	0800265f 	.word	0x0800265f
 8002408:	0800265f 	.word	0x0800265f
 800240c:	0800265f 	.word	0x0800265f
 8002410:	0800265f 	.word	0x0800265f
 8002414:	0800265f 	.word	0x0800265f
 8002418:	0800265f 	.word	0x0800265f
 800241c:	08002453 	.word	0x08002453
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002420:	4b94      	ldr	r3, [pc, #592]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800242c:	4b91      	ldr	r3, [pc, #580]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	4a90      	ldr	r2, [pc, #576]	; (8002678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800243e:	e111      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002440:	4b8d      	ldr	r3, [pc, #564]	; (8002678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002442:	61bb      	str	r3, [r7, #24]
      break;
 8002444:	e10e      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002446:	4b8d      	ldr	r3, [pc, #564]	; (800267c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002448:	61bb      	str	r3, [r7, #24]
      break;
 800244a:	e10b      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800244c:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800244e:	61bb      	str	r3, [r7, #24]
      break;
 8002450:	e108      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800245c:	4b85      	ldr	r3, [pc, #532]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002466:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002468:	4b82      	ldr	r3, [pc, #520]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002472:	4b80      	ldr	r3, [pc, #512]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002476:	08db      	lsrs	r3, r3, #3
 8002478:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	fb02 f303 	mul.w	r3, r2, r3
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80e1 	beq.w	8002658 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2b02      	cmp	r3, #2
 800249a:	f000 8083 	beq.w	80025a4 <HAL_RCC_GetSysClockFreq+0x204>
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	f200 80a1 	bhi.w	80025e8 <HAL_RCC_GetSysClockFreq+0x248>
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x114>
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d056      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024b2:	e099      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024b4:	4b6f      	ldr	r3, [pc, #444]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02d      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024c0:	4b6c      	ldr	r3, [pc, #432]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	08db      	lsrs	r3, r3, #3
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	4a6b      	ldr	r2, [pc, #428]	; (8002678 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	ee07 3a90 	vmov	s15, r3
 80024d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ea:	4b62      	ldr	r3, [pc, #392]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80024fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800250a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800250e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800251a:	e087      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002526:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002688 <HAL_RCC_GetSysClockFreq+0x2e8>
 800252a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800252e:	4b51      	ldr	r3, [pc, #324]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002542:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800254a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800254e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800255e:	e065      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800256a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800268c <HAL_RCC_GetSysClockFreq+0x2ec>
 800256e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002572:	4b40      	ldr	r3, [pc, #256]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800257a:	ee07 3a90 	vmov	s15, r3
 800257e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002582:	ed97 6a02 	vldr	s12, [r7, #8]
 8002586:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002684 <HAL_RCC_GetSysClockFreq+0x2e4>
 800258a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800258e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025a2:	e043      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	ee07 3a90 	vmov	s15, r3
 80025aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002690 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025b6:	4b2f      	ldr	r3, [pc, #188]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002684 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025e6:	e021      	b.n	800262c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800268c <HAL_RCC_GetSysClockFreq+0x2ec>
 80025f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fa:	4b1e      	ldr	r3, [pc, #120]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002602:	ee07 3a90 	vmov	s15, r3
 8002606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260a:	ed97 6a02 	vldr	s12, [r7, #8]
 800260e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002684 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800261a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800261e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002626:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800262a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	0a5b      	lsrs	r3, r3, #9
 8002632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002636:	3301      	adds	r3, #1
 8002638:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002644:	edd7 6a07 	vldr	s13, [r7, #28]
 8002648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002650:	ee17 3a90 	vmov	r3, s15
 8002654:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002656:	e005      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	61bb      	str	r3, [r7, #24]
      break;
 800265c:	e002      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002660:	61bb      	str	r3, [r7, #24]
      break;
 8002662:	bf00      	nop
  }

  return sysclockfreq;
 8002664:	69bb      	ldr	r3, [r7, #24]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	58024400 	.word	0x58024400
 8002678:	03d09000 	.word	0x03d09000
 800267c:	003d0900 	.word	0x003d0900
 8002680:	007a1200 	.word	0x007a1200
 8002684:	46000000 	.word	0x46000000
 8002688:	4c742400 	.word	0x4c742400
 800268c:	4a742400 	.word	0x4a742400
 8002690:	4af42400 	.word	0x4af42400

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800269a:	f7ff fe81 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	0a1b      	lsrs	r3, r3, #8
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490f      	ldr	r1, [pc, #60]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	f003 031f 	and.w	r3, r3, #31
 80026b2:	fa22 f303 	lsr.w	r3, r2, r3
 80026b6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	4a09      	ldr	r2, [pc, #36]	; (80026e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a07      	ldr	r2, [pc, #28]	; (80026ec <HAL_RCC_GetHCLKFreq+0x58>)
 80026d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026d2:	4a07      	ldr	r2, [pc, #28]	; (80026f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_RCC_GetHCLKFreq+0x58>)
 80026da:	681b      	ldr	r3, [r3, #0]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	58024400 	.word	0x58024400
 80026e8:	0800822c 	.word	0x0800822c
 80026ec:	24000004 	.word	0x24000004
 80026f0:	24000000 	.word	0x24000000

080026f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80026f8:	f7ff ffcc 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b06      	ldr	r3, [pc, #24]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4904      	ldr	r1, [pc, #16]	; (800271c <HAL_RCC_GetPCLK1Freq+0x28>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	f003 031f 	and.w	r3, r3, #31
 8002710:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	58024400 	.word	0x58024400
 800271c:	0800822c 	.word	0x0800822c

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002724:	f7ff ffb6 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	58024400 	.word	0x58024400
 8002748:	0800822c 	.word	0x0800822c

0800274c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800274c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002750:	b0c8      	sub	sp, #288	; 0x120
 8002752:	af00      	add	r7, sp, #0
 8002754:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002758:	2300      	movs	r3, #0
 800275a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800275e:	2300      	movs	r3, #0
 8002760:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002770:	2500      	movs	r5, #0
 8002772:	ea54 0305 	orrs.w	r3, r4, r5
 8002776:	d049      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800277c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800277e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002782:	d02f      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002784:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002788:	d828      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800278a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800278e:	d01a      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002790:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002794:	d822      	bhi.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800279a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800279e:	d007      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027a0:	e01c      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027a2:	4ba7      	ldr	r3, [pc, #668]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	4aa6      	ldr	r2, [pc, #664]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027ae:	e01a      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027b4:	3308      	adds	r3, #8
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f001 fc43 	bl	8004044 <RCCEx_PLL2_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027c4:	e00f      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027ca:	3328      	adds	r3, #40	; 0x28
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f001 fcea 	bl	80041a8 <RCCEx_PLL3_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027da:	e004      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80027e2:	e000      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10a      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027ee:	4b94      	ldr	r3, [pc, #592]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80027f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fc:	4a90      	ldr	r2, [pc, #576]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027fe:	430b      	orrs	r3, r1
 8002800:	6513      	str	r3, [r2, #80]	; 0x50
 8002802:	e003      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002804:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002808:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800280c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002818:	f04f 0900 	mov.w	r9, #0
 800281c:	ea58 0309 	orrs.w	r3, r8, r9
 8002820:	d047      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002822:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002828:	2b04      	cmp	r3, #4
 800282a:	d82a      	bhi.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800282c:	a201      	add	r2, pc, #4	; (adr r2, 8002834 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002849 	.word	0x08002849
 8002838:	08002857 	.word	0x08002857
 800283c:	0800286d 	.word	0x0800286d
 8002840:	0800288b 	.word	0x0800288b
 8002844:	0800288b 	.word	0x0800288b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002848:	4b7d      	ldr	r3, [pc, #500]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002854:	e01a      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002856:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800285a:	3308      	adds	r3, #8
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f001 fbf0 	bl	8004044 <RCCEx_PLL2_Config>
 8002864:	4603      	mov	r3, r0
 8002866:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800286a:	e00f      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800286c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002870:	3328      	adds	r3, #40	; 0x28
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fc97 	bl	80041a8 <RCCEx_PLL3_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002880:	e004      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002888:	e000      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800288a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002898:	f023 0107 	bic.w	r1, r3, #7
 800289c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	4a67      	ldr	r2, [pc, #412]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028a4:	430b      	orrs	r3, r1
 80028a6:	6513      	str	r3, [r2, #80]	; 0x50
 80028a8:	e003      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80028ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80028b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80028be:	f04f 0b00 	mov.w	fp, #0
 80028c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80028c6:	d054      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80028c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80028cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028d2:	d036      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80028d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028d8:	d82f      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028de:	d032      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80028e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e4:	d829      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028e6:	2bc0      	cmp	r3, #192	; 0xc0
 80028e8:	d02f      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80028ea:	2bc0      	cmp	r3, #192	; 0xc0
 80028ec:	d825      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028ee:	2b80      	cmp	r3, #128	; 0x80
 80028f0:	d018      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80028f2:	2b80      	cmp	r3, #128	; 0x80
 80028f4:	d821      	bhi.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d007      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80028fe:	e01c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002900:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	4a4e      	ldr	r2, [pc, #312]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800290c:	e01e      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800290e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002912:	3308      	adds	r3, #8
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f001 fb94 	bl	8004044 <RCCEx_PLL2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002922:	e013      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002928:	3328      	adds	r3, #40	; 0x28
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f001 fc3b 	bl	80041a8 <RCCEx_PLL3_Config>
 8002932:	4603      	mov	r3, r0
 8002934:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8002938:	e008      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002940:	e004      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002942:	bf00      	nop
 8002944:	e002      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800294a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800294c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002958:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800295c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	4a37      	ldr	r2, [pc, #220]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002964:	430b      	orrs	r3, r1
 8002966:	6513      	str	r3, [r2, #80]	; 0x50
 8002968:	e003      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800296e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800297e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002988:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800298c:	460b      	mov	r3, r1
 800298e:	4313      	orrs	r3, r2
 8002990:	d05c      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8002992:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002998:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800299c:	d03b      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800299e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80029a2:	d834      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a8:	d037      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80029aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ae:	d82e      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80029b4:	d033      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80029b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80029ba:	d828      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d01a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c6:	d822      	bhi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80029cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029d0:	d007      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80029d2:	e01c      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029d4:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80029e0:	e01e      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029e6:	3308      	adds	r3, #8
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 fb2a 	bl	8004044 <RCCEx_PLL2_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80029f6:	e013      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029fc:	3328      	adds	r3, #40	; 0x28
 80029fe:	2100      	movs	r1, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 fbd1 	bl	80041a8 <RCCEx_PLL3_Config>
 8002a06:	4603      	mov	r3, r0
 8002a08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8002a0c:	e008      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002a14:	e004      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8002a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10d      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a36:	4a02      	ldr	r2, [pc, #8]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8002a3e:	bf00      	nop
 8002a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002a48:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002a58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002a62:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002a66:	460b      	mov	r3, r1
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	d03a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	2b30      	cmp	r3, #48	; 0x30
 8002a74:	d01f      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002a76:	2b30      	cmp	r3, #48	; 0x30
 8002a78:	d819      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002a7a:	2b20      	cmp	r3, #32
 8002a7c:	d00c      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d815      	bhi.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d019      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d111      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a8a:	4bae      	ldr	r3, [pc, #696]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	4aad      	ldr	r2, [pc, #692]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002a96:	e011      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	2102      	movs	r1, #2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f001 facf 	bl	8004044 <RCCEx_PLL2_Config>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002aac:	e006      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ab4:	e002      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002ab6:	bf00      	nop
 8002ab8:	e000      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8002aba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002abc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002ac4:	4b9f      	ldr	r3, [pc, #636]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	4a9c      	ldr	r2, [pc, #624]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ade:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002aee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002af8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4313      	orrs	r3, r2
 8002b00:	d051      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b0c:	d035      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b12:	d82e      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b18:	d031      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8002b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b1e:	d828      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b24:	d01a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8002b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b2a:	d822      	bhi.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b34:	d007      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002b36:	e01c      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b38:	4b82      	ldr	r3, [pc, #520]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	4a81      	ldr	r2, [pc, #516]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b44:	e01c      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f001 fa78 	bl	8004044 <RCCEx_PLL2_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b5a:	e011      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b60:	3328      	adds	r3, #40	; 0x28
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f001 fb1f 	bl	80041a8 <RCCEx_PLL3_Config>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002b70:	e006      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10a      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b88:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b96:	4a6b      	ldr	r2, [pc, #428]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6513      	str	r3, [r2, #80]	; 0x50
 8002b9c:	e003      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ba2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002bbc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	d053      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002bca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d033      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd6:	d82c      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bdc:	d02f      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8002bde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be2:	d826      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002be4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002be8:	d02b      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002bea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bee:	d820      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bf4:	d012      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfa:	d81a      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d022      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8002c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c04:	d115      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f001 fa18 	bl	8004044 <RCCEx_PLL2_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c1a:	e015      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c20:	3328      	adds	r3, #40	; 0x28
 8002c22:	2101      	movs	r1, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f001 fabf 	bl	80041a8 <RCCEx_PLL3_Config>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c30:	e00a      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002c38:	e006      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c3a:	bf00      	nop
 8002c3c:	e004      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c3e:	bf00      	nop
 8002c40:	e002      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8002c46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c50:	4b3c      	ldr	r3, [pc, #240]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c5e:	4a39      	ldr	r2, [pc, #228]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6513      	str	r3, [r2, #80]	; 0x50
 8002c64:	e003      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c66:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002c6a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002c7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c84:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	d060      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002c92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c96:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002c9a:	d039      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8002c9c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002ca0:	d832      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ca6:	d035      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002ca8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cac:	d82c      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb2:	d031      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb8:	d826      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cbe:	d02d      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002cc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002cc4:	d820      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cca:	d012      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd0:	d81a      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d024      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cda:	d115      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f001 f9ad 	bl	8004044 <RCCEx_PLL2_Config>
 8002cea:	4603      	mov	r3, r0
 8002cec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002cf0:	e017      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002cf6:	3328      	adds	r3, #40	; 0x28
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 fa54 	bl	80041a8 <RCCEx_PLL3_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d06:	e00c      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002d0e:	e008      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d10:	bf00      	nop
 8002d12:	e006      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d14:	bf00      	nop
 8002d16:	e004      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d18:	bf00      	nop
 8002d1a:	e002      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d1c:	bf00      	nop
 8002d1e:	e000      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8002d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d3a:	4a02      	ldr	r2, [pc, #8]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d40:	e006      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8002d42:	bf00      	nop
 8002d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002d4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002d5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002d66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	d037      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d7a:	d00e      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d80:	d816      	bhi.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d018      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8002d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d8a:	d111      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d8c:	4bc4      	ldr	r3, [pc, #784]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	4ac3      	ldr	r2, [pc, #780]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d98:	e00f      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002d9e:	3308      	adds	r3, #8
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 f94e 	bl	8004044 <RCCEx_PLL2_Config>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002dae:	e004      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002db6:	e000      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002dc2:	4bb7      	ldr	r3, [pc, #732]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002dca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002dce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dd0:	4ab3      	ldr	r2, [pc, #716]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	6513      	str	r3, [r2, #80]	; 0x50
 8002dd6:	e003      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ddc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002de0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002df0:	2300      	movs	r3, #0
 8002df2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002df6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	d039      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d81c      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002e0a:	a201      	add	r2, pc, #4	; (adr r2, 8002e10 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e10:	08002e4d 	.word	0x08002e4d
 8002e14:	08002e21 	.word	0x08002e21
 8002e18:	08002e2f 	.word	0x08002e2f
 8002e1c:	08002e4d 	.word	0x08002e4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e20:	4b9f      	ldr	r3, [pc, #636]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	4a9e      	ldr	r2, [pc, #632]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e2c:	e00f      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e32:	3308      	adds	r3, #8
 8002e34:	2102      	movs	r1, #2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f904 	bl	8004044 <RCCEx_PLL2_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e56:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	f023 0103 	bic.w	r1, r3, #3
 8002e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e64:	4a8e      	ldr	r2, [pc, #568]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002e66:	430b      	orrs	r3, r1
 8002e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e6a:	e003      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002e70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f000 8099 	beq.w	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e96:	4b83      	ldr	r3, [pc, #524]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a82      	ldr	r2, [pc, #520]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ea2:	f7fe f95d 	bl	8001160 <HAL_GetTick>
 8002ea6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eaa:	e00b      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eac:	f7fe f958 	bl	8001160 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b64      	cmp	r3, #100	; 0x64
 8002eba:	d903      	bls.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8002ec2:	e005      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ec4:	4b77      	ldr	r3, [pc, #476]	; (80030a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0ed      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002ed0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d173      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ed8:	4b71      	ldr	r3, [pc, #452]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002eda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ee0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ee4:	4053      	eors	r3, r2
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d015      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eee:	4b6c      	ldr	r3, [pc, #432]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002efa:	4b69      	ldr	r3, [pc, #420]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a68      	ldr	r2, [pc, #416]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f06:	4b66      	ldr	r3, [pc, #408]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a65      	ldr	r2, [pc, #404]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f12:	4a63      	ldr	r2, [pc, #396]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f26:	d118      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe f91a 	bl	8001160 <HAL_GetTick>
 8002f2c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f30:	e00d      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f32:	f7fe f915 	bl	8001160 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d903      	bls.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8002f4c:	e005      	b.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4e:	4b54      	ldr	r3, [pc, #336]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0eb      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8002f5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d129      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f72:	d10e      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8002f74:	4b4a      	ldr	r3, [pc, #296]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002f80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f84:	091a      	lsrs	r2, r3, #4
 8002f86:	4b48      	ldr	r3, [pc, #288]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	4a45      	ldr	r2, [pc, #276]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6113      	str	r3, [r2, #16]
 8002f90:	e005      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002f92:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002f98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f9c:	6113      	str	r3, [r2, #16]
 8002f9e:	4b40      	ldr	r3, [pc, #256]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fa0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fae:	4a3c      	ldr	r2, [pc, #240]	; (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002fb0:	430b      	orrs	r3, r1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8002fbe:	e003      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8002fc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd0:	f002 0301 	and.w	r3, r2, #1
 8002fd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fd8:	2300      	movs	r3, #0
 8002fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fde:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f000 8090 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ff2:	2b28      	cmp	r3, #40	; 0x28
 8002ff4:	d870      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	080030e1 	.word	0x080030e1
 8003000:	080030d9 	.word	0x080030d9
 8003004:	080030d9 	.word	0x080030d9
 8003008:	080030d9 	.word	0x080030d9
 800300c:	080030d9 	.word	0x080030d9
 8003010:	080030d9 	.word	0x080030d9
 8003014:	080030d9 	.word	0x080030d9
 8003018:	080030d9 	.word	0x080030d9
 800301c:	080030ad 	.word	0x080030ad
 8003020:	080030d9 	.word	0x080030d9
 8003024:	080030d9 	.word	0x080030d9
 8003028:	080030d9 	.word	0x080030d9
 800302c:	080030d9 	.word	0x080030d9
 8003030:	080030d9 	.word	0x080030d9
 8003034:	080030d9 	.word	0x080030d9
 8003038:	080030d9 	.word	0x080030d9
 800303c:	080030c3 	.word	0x080030c3
 8003040:	080030d9 	.word	0x080030d9
 8003044:	080030d9 	.word	0x080030d9
 8003048:	080030d9 	.word	0x080030d9
 800304c:	080030d9 	.word	0x080030d9
 8003050:	080030d9 	.word	0x080030d9
 8003054:	080030d9 	.word	0x080030d9
 8003058:	080030d9 	.word	0x080030d9
 800305c:	080030e1 	.word	0x080030e1
 8003060:	080030d9 	.word	0x080030d9
 8003064:	080030d9 	.word	0x080030d9
 8003068:	080030d9 	.word	0x080030d9
 800306c:	080030d9 	.word	0x080030d9
 8003070:	080030d9 	.word	0x080030d9
 8003074:	080030d9 	.word	0x080030d9
 8003078:	080030d9 	.word	0x080030d9
 800307c:	080030e1 	.word	0x080030e1
 8003080:	080030d9 	.word	0x080030d9
 8003084:	080030d9 	.word	0x080030d9
 8003088:	080030d9 	.word	0x080030d9
 800308c:	080030d9 	.word	0x080030d9
 8003090:	080030d9 	.word	0x080030d9
 8003094:	080030d9 	.word	0x080030d9
 8003098:	080030d9 	.word	0x080030d9
 800309c:	080030e1 	.word	0x080030e1
 80030a0:	58024400 	.word	0x58024400
 80030a4:	58024800 	.word	0x58024800
 80030a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030b0:	3308      	adds	r3, #8
 80030b2:	2101      	movs	r1, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ffc5 	bl	8004044 <RCCEx_PLL2_Config>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030c0:	e00f      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030c6:	3328      	adds	r3, #40	; 0x28
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f86c 	bl	80041a8 <RCCEx_PLL3_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80030d6:	e004      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80030e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030ea:	4bc0      	ldr	r3, [pc, #768]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80030f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fa:	4abc      	ldr	r2, [pc, #752]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6553      	str	r3, [r2, #84]	; 0x54
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003106:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800310a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f002 0302 	and.w	r3, r2, #2
 8003116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003120:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003124:	460b      	mov	r3, r1
 8003126:	4313      	orrs	r3, r2
 8003128:	d043      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800312a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003132:	2b05      	cmp	r3, #5
 8003134:	d824      	bhi.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8003136:	a201      	add	r2, pc, #4	; (adr r2, 800313c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003189 	.word	0x08003189
 8003140:	08003155 	.word	0x08003155
 8003144:	0800316b 	.word	0x0800316b
 8003148:	08003189 	.word	0x08003189
 800314c:	08003189 	.word	0x08003189
 8003150:	08003189 	.word	0x08003189
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003154:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003158:	3308      	adds	r3, #8
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f000 ff71 	bl	8004044 <RCCEx_PLL2_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003168:	e00f      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800316a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800316e:	3328      	adds	r3, #40	; 0x28
 8003170:	2101      	movs	r1, #1
 8003172:	4618      	mov	r0, r3
 8003174:	f001 f818 	bl	80041a8 <RCCEx_PLL3_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800317e:	e004      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003186:	e000      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8003188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10b      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003192:	4b96      	ldr	r3, [pc, #600]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	f023 0107 	bic.w	r1, r3, #7
 800319a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800319e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031a2:	4a92      	ldr	r2, [pc, #584]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6553      	str	r3, [r2, #84]	; 0x54
 80031a8:	e003      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80031ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	f002 0304 	and.w	r3, r2, #4
 80031be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031c2:	2300      	movs	r3, #0
 80031c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4313      	orrs	r3, r2
 80031d0:	d043      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80031d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80031d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d824      	bhi.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80031de:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80031e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e4:	08003231 	.word	0x08003231
 80031e8:	080031fd 	.word	0x080031fd
 80031ec:	08003213 	.word	0x08003213
 80031f0:	08003231 	.word	0x08003231
 80031f4:	08003231 	.word	0x08003231
 80031f8:	08003231 	.word	0x08003231
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003200:	3308      	adds	r3, #8
 8003202:	2101      	movs	r1, #1
 8003204:	4618      	mov	r0, r3
 8003206:	f000 ff1d 	bl	8004044 <RCCEx_PLL2_Config>
 800320a:	4603      	mov	r3, r0
 800320c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003210:	e00f      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003212:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003216:	3328      	adds	r3, #40	; 0x28
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f000 ffc4 	bl	80041a8 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003226:	e004      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8003230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003232:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800323a:	4b6c      	ldr	r3, [pc, #432]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800323c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800323e:	f023 0107 	bic.w	r1, r3, #7
 8003242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800324a:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800324c:	430b      	orrs	r3, r1
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003256:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800325a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003262:	f002 0320 	and.w	r3, r2, #32
 8003266:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800326a:	2300      	movs	r3, #0
 800326c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003274:	460b      	mov	r3, r1
 8003276:	4313      	orrs	r3, r2
 8003278:	d055      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800327e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003282:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003286:	d033      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003288:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800328c:	d82c      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800328e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003292:	d02f      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d826      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800329a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800329e:	d02b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80032a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032a4:	d820      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032aa:	d012      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80032ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b0:	d81a      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d022      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80032b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ba:	d115      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032c0:	3308      	adds	r3, #8
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 febd 	bl	8004044 <RCCEx_PLL2_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032d0:	e015      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80032d6:	3328      	adds	r3, #40	; 0x28
 80032d8:	2102      	movs	r1, #2
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 ff64 	bl	80041a8 <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80032e6:	e00a      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80032ee:	e006      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032f0:	bf00      	nop
 80032f2:	e004      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032f4:	bf00      	nop
 80032f6:	e002      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80032fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10b      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800330e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003312:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003316:	4a35      	ldr	r2, [pc, #212]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8003318:	430b      	orrs	r3, r1
 800331a:	6553      	str	r3, [r2, #84]	; 0x54
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003322:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003326:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003336:	2300      	movs	r3, #0
 8003338:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800333c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003340:	460b      	mov	r3, r1
 8003342:	4313      	orrs	r3, r2
 8003344:	d058      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003346:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800334a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800334e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003352:	d033      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003354:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003358:	d82c      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800335a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335e:	d02f      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003364:	d826      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003366:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800336a:	d02b      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800336c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003370:	d820      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8003372:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003376:	d012      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8003378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800337c:	d81a      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d022      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d115      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800338c:	3308      	adds	r3, #8
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fe57 	bl	8004044 <RCCEx_PLL2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800339c:	e015      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800339e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033a2:	3328      	adds	r3, #40	; 0x28
 80033a4:	2102      	movs	r1, #2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fefe 	bl	80041a8 <RCCEx_PLL3_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80033b2:	e00a      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80033ba:	e006      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033bc:	bf00      	nop
 80033be:	e004      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033c0:	bf00      	nop
 80033c2:	e002      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033c4:	bf00      	nop
 80033c6:	e000      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80033c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10e      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033d2:	4b06      	ldr	r3, [pc, #24]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80033da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033e2:	4a02      	ldr	r2, [pc, #8]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6593      	str	r3, [r2, #88]	; 0x58
 80033e8:	e006      	b.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80033f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80033f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800340e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003412:	460b      	mov	r3, r1
 8003414:	4313      	orrs	r3, r2
 8003416:	d055      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800341c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003420:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003424:	d033      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003426:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800342a:	d82c      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800342c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003430:	d02f      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003436:	d826      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003438:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800343c:	d02b      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800343e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003442:	d820      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003448:	d012      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800344a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344e:	d81a      	bhi.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d022      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8003454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003458:	d115      	bne.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800345a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800345e:	3308      	adds	r3, #8
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f000 fdee 	bl	8004044 <RCCEx_PLL2_Config>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800346e:	e015      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003470:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003474:	3328      	adds	r3, #40	; 0x28
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fe95 	bl	80041a8 <RCCEx_PLL3_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003484:	e00a      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800348e:	bf00      	nop
 8003490:	e004      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800349a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10b      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034a4:	4ba1      	ldr	r3, [pc, #644]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80034ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034b4:	4a9d      	ldr	r2, [pc, #628]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034b6:	430b      	orrs	r3, r1
 80034b8:	6593      	str	r3, [r2, #88]	; 0x58
 80034ba:	e003      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f002 0308 	and.w	r3, r2, #8
 80034d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80034da:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d01e      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80034e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034f6:	3328      	adds	r3, #40	; 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fe54 	bl	80041a8 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800350c:	4b87      	ldr	r3, [pc, #540]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800351c:	4a83      	ldr	r2, [pc, #524]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800351e:	430b      	orrs	r3, r1
 8003520:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f002 0310 	and.w	r3, r2, #16
 800352e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003538:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800353c:	460b      	mov	r3, r1
 800353e:	4313      	orrs	r3, r2
 8003540:	d01e      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003546:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d10c      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003550:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003554:	3328      	adds	r3, #40	; 0x28
 8003556:	2102      	movs	r1, #2
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fe25 	bl	80041a8 <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800356a:	4b70      	ldr	r3, [pc, #448]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800357a:	4a6c      	ldr	r2, [pc, #432]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800357c:	430b      	orrs	r3, r1
 800357e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003588:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800358c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003596:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800359a:	460b      	mov	r3, r1
 800359c:	4313      	orrs	r3, r2
 800359e:	d03e      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80035a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ac:	d022      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80035ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b2:	d81b      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035bc:	d00b      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80035be:	e015      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c4:	3308      	adds	r3, #8
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fd3b 	bl	8004044 <RCCEx_PLL2_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035d4:	e00f      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035da:	3328      	adds	r3, #40	; 0x28
 80035dc:	2102      	movs	r1, #2
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fde2 	bl	80041a8 <RCCEx_PLL3_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80035ea:	e004      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035fe:	4b4b      	ldr	r3, [pc, #300]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800360e:	4a47      	ldr	r2, [pc, #284]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6593      	str	r3, [r2, #88]	; 0x58
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003616:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800361a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800361e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800362a:	67bb      	str	r3, [r7, #120]	; 0x78
 800362c:	2300      	movs	r3, #0
 800362e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003630:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003634:	460b      	mov	r3, r1
 8003636:	4313      	orrs	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800363a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003646:	d01f      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8003648:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800364c:	d818      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003652:	d003      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8003654:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003658:	d007      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800365a:	e011      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4b33      	ldr	r3, [pc, #204]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4a32      	ldr	r2, [pc, #200]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003668:	e00f      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800366a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800366e:	3328      	adds	r3, #40	; 0x28
 8003670:	2101      	movs	r1, #1
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fd98 	bl	80041a8 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003696:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800369a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	4a22      	ldr	r2, [pc, #136]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6553      	str	r3, [r2, #84]	; 0x54
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80036b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80036be:	673b      	str	r3, [r7, #112]	; 0x70
 80036c0:	2300      	movs	r3, #0
 80036c2:	677b      	str	r3, [r7, #116]	; 0x74
 80036c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d034      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80036ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036dc:	d007      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80036de:	e011      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4b12      	ldr	r3, [pc, #72]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036ec:	e00e      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036f2:	3308      	adds	r3, #8
 80036f4:	2102      	movs	r1, #2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fca4 	bl	8004044 <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003702:	e003      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800370a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003718:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800371c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	4a02      	ldr	r2, [pc, #8]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003724:	430b      	orrs	r3, r1
 8003726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800372a:	bf00      	nop
 800372c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003734:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003738:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003744:	66bb      	str	r3, [r7, #104]	; 0x68
 8003746:	2300      	movs	r3, #0
 8003748:	66fb      	str	r3, [r7, #108]	; 0x6c
 800374a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800374e:	460b      	mov	r3, r1
 8003750:	4313      	orrs	r3, r2
 8003752:	d00c      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003758:	3328      	adds	r3, #40	; 0x28
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f000 fd23 	bl	80041a8 <RCCEx_PLL3_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800376e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800377a:	663b      	str	r3, [r7, #96]	; 0x60
 800377c:	2300      	movs	r3, #0
 800377e:	667b      	str	r3, [r7, #100]	; 0x64
 8003780:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003784:	460b      	mov	r3, r1
 8003786:	4313      	orrs	r3, r2
 8003788:	d038      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800378a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003792:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003796:	d018      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8003798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800379c:	d811      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800379e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a2:	d014      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80037a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a8:	d80b      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d011      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80037ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037b2:	d106      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b4:	4bc3      	ldr	r3, [pc, #780]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4ac2      	ldr	r2, [pc, #776]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80037c0:	e008      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037c8:	e004      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80037ca:	bf00      	nop
 80037cc:	e002      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80037ce:	bf00      	nop
 80037d0:	e000      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80037d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10b      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037dc:	4bb9      	ldr	r3, [pc, #740]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	4ab5      	ldr	r2, [pc, #724]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6553      	str	r3, [r2, #84]	; 0x54
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003808:	65bb      	str	r3, [r7, #88]	; 0x58
 800380a:	2300      	movs	r3, #0
 800380c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800380e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003818:	4baa      	ldr	r3, [pc, #680]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800381a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	4aa7      	ldr	r2, [pc, #668]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800382c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
 800383a:	2300      	movs	r3, #0
 800383c:	657b      	str	r3, [r7, #84]	; 0x54
 800383e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003842:	460b      	mov	r3, r1
 8003844:	4313      	orrs	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003848:	4b9e      	ldr	r3, [pc, #632]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003856:	4a9b      	ldr	r2, [pc, #620]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003858:	430b      	orrs	r3, r1
 800385a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800385c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003864:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003868:	64bb      	str	r3, [r7, #72]	; 0x48
 800386a:	2300      	movs	r3, #0
 800386c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800386e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d009      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003878:	4b92      	ldr	r3, [pc, #584]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8003880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	4a8f      	ldr	r2, [pc, #572]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003888:	430b      	orrs	r3, r1
 800388a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800388c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003898:	643b      	str	r3, [r7, #64]	; 0x40
 800389a:	2300      	movs	r3, #0
 800389c:	647b      	str	r3, [r7, #68]	; 0x44
 800389e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038a8:	4b86      	ldr	r3, [pc, #536]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	4a85      	ldr	r2, [pc, #532]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038b2:	6113      	str	r3, [r2, #16]
 80038b4:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038b6:	6919      	ldr	r1, [r3, #16]
 80038b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80038c0:	4a80      	ldr	r2, [pc, #512]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80038c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d4:	2300      	movs	r3, #0
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038dc:	460b      	mov	r3, r1
 80038de:	4313      	orrs	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038e2:	4b78      	ldr	r3, [pc, #480]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80038ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f0:	4a74      	ldr	r2, [pc, #464]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003902:	633b      	str	r3, [r7, #48]	; 0x30
 8003904:	2300      	movs	r3, #0
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
 8003908:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d00a      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003912:	4b6c      	ldr	r3, [pc, #432]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003916:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800391a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003922:	4a68      	ldr	r2, [pc, #416]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8003924:	430b      	orrs	r3, r1
 8003926:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003930:	2100      	movs	r1, #0
 8003932:	62b9      	str	r1, [r7, #40]	; 0x28
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800393e:	460b      	mov	r3, r1
 8003940:	4313      	orrs	r3, r2
 8003942:	d011      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003948:	3308      	adds	r3, #8
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fb79 	bl	8004044 <RCCEx_PLL2_Config>
 8003952:	4603      	mov	r3, r0
 8003954:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003958:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003964:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	2100      	movs	r1, #0
 8003972:	6239      	str	r1, [r7, #32]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
 800397a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d011      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003988:	3308      	adds	r3, #8
 800398a:	2101      	movs	r1, #1
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fb59 	bl	8004044 <RCCEx_PLL2_Config>
 8003992:	4603      	mov	r3, r0
 8003994:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003998:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039a4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	2100      	movs	r1, #0
 80039b2:	61b9      	str	r1, [r7, #24]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80039be:	460b      	mov	r3, r1
 80039c0:	4313      	orrs	r3, r2
 80039c2:	d011      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c8:	3308      	adds	r3, #8
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fb39 	bl	8004044 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80039d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80039e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	2100      	movs	r1, #0
 80039f2:	6139      	str	r1, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039fe:	460b      	mov	r3, r1
 8003a00:	4313      	orrs	r3, r2
 8003a02:	d011      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a08:	3328      	adds	r3, #40	; 0x28
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f000 fbcb 	bl	80041a8 <RCCEx_PLL3_Config>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8003a18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a24:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	2100      	movs	r1, #0
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4313      	orrs	r3, r2
 8003a42:	d011      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a48:	3328      	adds	r3, #40	; 0x28
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fbab 	bl	80041a8 <RCCEx_PLL3_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003a58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	2100      	movs	r1, #0
 8003a72:	6039      	str	r1, [r7, #0]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d011      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a88:	3328      	adds	r3, #40	; 0x28
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fb8b 	bl	80041a8 <RCCEx_PLL3_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8003a98:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8003aa8:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac2:	bf00      	nop
 8003ac4:	58024400 	.word	0x58024400

08003ac8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003acc:	f7fe fde2 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	091b      	lsrs	r3, r3, #4
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	4904      	ldr	r1, [pc, #16]	; (8003af0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ade:	5ccb      	ldrb	r3, [r1, r3]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	58024400 	.word	0x58024400
 8003af0:	0800822c 	.word	0x0800822c

08003af4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b089      	sub	sp, #36	; 0x24
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003afc:	4ba1      	ldr	r3, [pc, #644]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b06:	4b9f      	ldr	r3, [pc, #636]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b0a:	0b1b      	lsrs	r3, r3, #12
 8003b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b12:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	091b      	lsrs	r3, r3, #4
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b1e:	4b99      	ldr	r3, [pc, #612]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b22:	08db      	lsrs	r3, r3, #3
 8003b24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8111 	beq.w	8003d64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	f000 8083 	beq.w	8003c50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	f200 80a1 	bhi.w	8003c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d056      	beq.n	8003c0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b5e:	e099      	b.n	8003c94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b60:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d02d      	beq.n	8003bc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b6c:	4b85      	ldr	r3, [pc, #532]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	08db      	lsrs	r3, r3, #3
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	4a84      	ldr	r2, [pc, #528]	; (8003d88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b96:	4b7b      	ldr	r3, [pc, #492]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003baa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bc6:	e087      	b.n	8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bda:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be2:	ee07 3a90 	vmov	s15, r3
 8003be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c0a:	e065      	b.n	8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b59      	ldr	r3, [pc, #356]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c4e:	e043      	b.n	8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b48      	ldr	r3, [pc, #288]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c92:	e021      	b.n	8003cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	0a5b      	lsrs	r3, r3, #9
 8003cde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfe:	ee17 2a90 	vmov	r2, s15
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d06:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	0c1b      	lsrs	r3, r3, #16
 8003d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d10:	ee07 3a90 	vmov	s15, r3
 8003d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d2c:	ee17 2a90 	vmov	r2, s15
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	0e1b      	lsrs	r3, r3, #24
 8003d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5a:	ee17 2a90 	vmov	r2, s15
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d62:	e008      	b.n	8003d76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]
}
 8003d76:	bf00      	nop
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	58024400 	.word	0x58024400
 8003d88:	03d09000 	.word	0x03d09000
 8003d8c:	46000000 	.word	0x46000000
 8003d90:	4c742400 	.word	0x4c742400
 8003d94:	4a742400 	.word	0x4a742400
 8003d98:	4af42400 	.word	0x4af42400

08003d9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003da4:	4ba1      	ldr	r3, [pc, #644]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003dae:	4b9f      	ldr	r3, [pc, #636]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db2:	0d1b      	lsrs	r3, r3, #20
 8003db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003dba:	4b9c      	ldr	r3, [pc, #624]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003dc6:	4b99      	ldr	r3, [pc, #612]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	08db      	lsrs	r3, r3, #3
 8003dcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f000 8111 	beq.w	800400c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	f000 8083 	beq.w	8003ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	f200 80a1 	bhi.w	8003f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d056      	beq.n	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e06:	e099      	b.n	8003f3c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e08:	4b88      	ldr	r3, [pc, #544]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d02d      	beq.n	8003e70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e14:	4b85      	ldr	r3, [pc, #532]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	08db      	lsrs	r3, r3, #3
 8003e1a:	f003 0303 	and.w	r3, r3, #3
 8003e1e:	4a84      	ldr	r2, [pc, #528]	; (8004030 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e20:	fa22 f303 	lsr.w	r3, r2, r3
 8003e24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	ee07 3a90 	vmov	s15, r3
 8003e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e3e:	4b7b      	ldr	r3, [pc, #492]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e6e:	e087      	b.n	8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e82:	4b6a      	ldr	r3, [pc, #424]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eb2:	e065      	b.n	8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ebe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800403c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ec6:	4b59      	ldr	r3, [pc, #356]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003eda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ef6:	e043      	b.n	8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004040 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f3a:	e021      	b.n	8003f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800403c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f4e:	4b37      	ldr	r3, [pc, #220]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f62:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004034 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f7e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f80:	4b2a      	ldr	r3, [pc, #168]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	0a5b      	lsrs	r3, r3, #9
 8003f86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa6:	ee17 2a90 	vmov	r2, s15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003fae:	4b1f      	ldr	r3, [pc, #124]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	0c1b      	lsrs	r3, r3, #16
 8003fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fb8:	ee07 3a90 	vmov	s15, r3
 8003fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd4:	ee17 2a90 	vmov	r2, s15
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	0e1b      	lsrs	r3, r3, #24
 8003fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ff2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ff6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004002:	ee17 2a90 	vmov	r2, s15
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800400a:	e008      	b.n	800401e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
}
 800401e:	bf00      	nop
 8004020:	3724      	adds	r7, #36	; 0x24
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	58024400 	.word	0x58024400
 8004030:	03d09000 	.word	0x03d09000
 8004034:	46000000 	.word	0x46000000
 8004038:	4c742400 	.word	0x4c742400
 800403c:	4a742400 	.word	0x4a742400
 8004040:	4af42400 	.word	0x4af42400

08004044 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004052:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b03      	cmp	r3, #3
 800405c:	d101      	bne.n	8004062 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e099      	b.n	8004196 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004062:	4b4f      	ldr	r3, [pc, #316]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a4e      	ldr	r2, [pc, #312]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004068:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800406c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fd f877 	bl	8001160 <HAL_GetTick>
 8004072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004074:	e008      	b.n	8004088 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004076:	f7fd f873 	bl	8001160 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e086      	b.n	8004196 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004088:	4b45      	ldr	r3, [pc, #276]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004094:	4b42      	ldr	r3, [pc, #264]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	031b      	lsls	r3, r3, #12
 80040a2:	493f      	ldr	r1, [pc, #252]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	628b      	str	r3, [r1, #40]	; 0x28
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	025b      	lsls	r3, r3, #9
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	061b      	lsls	r3, r3, #24
 80040d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040d8:	4931      	ldr	r1, [pc, #196]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040de:	4b30      	ldr	r3, [pc, #192]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	492d      	ldr	r1, [pc, #180]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	f023 0220 	bic.w	r2, r3, #32
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4928      	ldr	r1, [pc, #160]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004102:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	4a26      	ldr	r2, [pc, #152]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004108:	f023 0310 	bic.w	r3, r3, #16
 800410c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004110:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <RCCEx_PLL2_Config+0x160>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	69d2      	ldr	r2, [r2, #28]
 800411a:	00d2      	lsls	r2, r2, #3
 800411c:	4920      	ldr	r1, [pc, #128]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004122:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004128:	f043 0310 	orr.w	r3, r3, #16
 800412c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	4a19      	ldr	r2, [pc, #100]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 800413a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800413e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004140:	e00f      	b.n	8004162 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d106      	bne.n	8004156 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a14      	ldr	r2, [pc, #80]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 800414e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004154:	e005      	b.n	8004162 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	4a11      	ldr	r2, [pc, #68]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 800415c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004160:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 8004168:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800416c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416e:	f7fc fff7 	bl	8001160 <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004174:	e008      	b.n	8004188 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004176:	f7fc fff3 	bl	8001160 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e006      	b.n	8004196 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <RCCEx_PLL2_Config+0x15c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400
 80041a4:	ffff0007 	.word	0xffff0007

080041a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041b6:	4b53      	ldr	r3, [pc, #332]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d101      	bne.n	80041c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e099      	b.n	80042fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041c6:	4b4f      	ldr	r3, [pc, #316]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a4e      	ldr	r2, [pc, #312]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80041cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d2:	f7fc ffc5 	bl	8001160 <HAL_GetTick>
 80041d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041d8:	e008      	b.n	80041ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041da:	f7fc ffc1 	bl	8001160 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e086      	b.n	80042fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041ec:	4b45      	ldr	r3, [pc, #276]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f0      	bne.n	80041da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041f8:	4b42      	ldr	r3, [pc, #264]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	051b      	lsls	r3, r3, #20
 8004206:	493f      	ldr	r1, [pc, #252]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004208:	4313      	orrs	r3, r2
 800420a:	628b      	str	r3, [r1, #40]	; 0x28
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	3b01      	subs	r3, #1
 8004212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	025b      	lsls	r3, r3, #9
 800421e:	b29b      	uxth	r3, r3
 8004220:	431a      	orrs	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	3b01      	subs	r3, #1
 8004228:	041b      	lsls	r3, r3, #16
 800422a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	3b01      	subs	r3, #1
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800423c:	4931      	ldr	r1, [pc, #196]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 800423e:	4313      	orrs	r3, r2
 8004240:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004242:	4b30      	ldr	r3, [pc, #192]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	492d      	ldr	r1, [pc, #180]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004250:	4313      	orrs	r3, r2
 8004252:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004254:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4928      	ldr	r1, [pc, #160]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004266:	4b27      	ldr	r3, [pc, #156]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 800426c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	4b24      	ldr	r3, [pc, #144]	; (8004308 <RCCEx_PLL3_Config+0x160>)
 8004278:	4013      	ands	r3, r2
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	69d2      	ldr	r2, [r2, #28]
 800427e:	00d2      	lsls	r2, r2, #3
 8004280:	4920      	ldr	r1, [pc, #128]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004286:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	4a1e      	ldr	r2, [pc, #120]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 800428c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004290:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004298:	4b1a      	ldr	r3, [pc, #104]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 800429e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042a4:	e00f      	b.n	80042c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80042ac:	4b15      	ldr	r3, [pc, #84]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4a14      	ldr	r2, [pc, #80]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80042b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042b8:	e005      	b.n	80042c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042ba:	4b12      	ldr	r3, [pc, #72]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	4a11      	ldr	r2, [pc, #68]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80042c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042c6:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80042cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fc ff45 	bl	8001160 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042d8:	e008      	b.n	80042ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042da:	f7fc ff41 	bl	8001160 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e006      	b.n	80042fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <RCCEx_PLL3_Config+0x15c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400
 8004308:	ffff0007 	.word	0xffff0007

0800430c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e042      	b.n	80043a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc fc43 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2224      	movs	r2, #36	; 0x24
 800433a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0201 	bic.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f912 	bl	8004578 <UART_SetConfig>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e022      	b.n	80043a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 ff72 	bl	8005250 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800437a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800438a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fff9 	bl	8005394 <UART_CheckIdleState>
 80043a2:	4603      	mov	r3, r0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e04a      	b.n	8004454 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7fc fbf3 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2224      	movs	r2, #36	; 0x24
 80043da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f8c2 	bl	8004578 <UART_SetConfig>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e02a      	b.n	8004454 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 ff22 	bl	8005250 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800441a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800442a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0208 	orr.w	r2, r2, #8
 800443a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0201 	orr.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 ffa1 	bl	8005394 <UART_CheckIdleState>
 8004452:	4603      	mov	r3, r0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af02      	add	r7, sp, #8
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	603b      	str	r3, [r7, #0]
 8004468:	4613      	mov	r3, r2
 800446a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	2b20      	cmp	r3, #32
 8004474:	d17b      	bne.n	800456e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_UART_Transmit+0x26>
 800447c:	88fb      	ldrh	r3, [r7, #6]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e074      	b.n	8004570 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2221      	movs	r2, #33	; 0x21
 8004492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004496:	f7fc fe63 	bl	8001160 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	88fa      	ldrh	r2, [r7, #6]
 80044a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d108      	bne.n	80044c8 <HAL_UART_Transmit+0x6c>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	e003      	b.n	80044d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044d0:	e030      	b.n	8004534 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2180      	movs	r1, #128	; 0x80
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f001 f803 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e03d      	b.n	8004570 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	881b      	ldrh	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004508:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	3302      	adds	r3, #2
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e007      	b.n	8004522 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3301      	adds	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1c8      	bne.n	80044d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2200      	movs	r2, #0
 8004548:	2140      	movs	r1, #64	; 0x40
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 ffcc 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d005      	beq.n	8004562 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e006      	b.n	8004570 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	e000      	b.n	8004570 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
  }
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b092      	sub	sp, #72	; 0x48
 800457e:	af00      	add	r7, sp, #0
 8004580:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	431a      	orrs	r2, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4313      	orrs	r3, r2
 800459e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4bbe      	ldr	r3, [pc, #760]	; (80048a0 <UART_SetConfig+0x328>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4ab3      	ldr	r2, [pc, #716]	; (80048a4 <UART_SetConfig+0x32c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045e0:	4313      	orrs	r3, r2
 80045e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	4baf      	ldr	r3, [pc, #700]	; (80048a8 <UART_SetConfig+0x330>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045f4:	430b      	orrs	r3, r1
 80045f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f023 010f 	bic.w	r1, r3, #15
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4aa6      	ldr	r2, [pc, #664]	; (80048ac <UART_SetConfig+0x334>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d177      	bne.n	8004708 <UART_SetConfig+0x190>
 8004618:	4ba5      	ldr	r3, [pc, #660]	; (80048b0 <UART_SetConfig+0x338>)
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004620:	2b28      	cmp	r3, #40	; 0x28
 8004622:	d86d      	bhi.n	8004700 <UART_SetConfig+0x188>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0xb4>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	080046d1 	.word	0x080046d1
 8004630:	08004701 	.word	0x08004701
 8004634:	08004701 	.word	0x08004701
 8004638:	08004701 	.word	0x08004701
 800463c:	08004701 	.word	0x08004701
 8004640:	08004701 	.word	0x08004701
 8004644:	08004701 	.word	0x08004701
 8004648:	08004701 	.word	0x08004701
 800464c:	080046d9 	.word	0x080046d9
 8004650:	08004701 	.word	0x08004701
 8004654:	08004701 	.word	0x08004701
 8004658:	08004701 	.word	0x08004701
 800465c:	08004701 	.word	0x08004701
 8004660:	08004701 	.word	0x08004701
 8004664:	08004701 	.word	0x08004701
 8004668:	08004701 	.word	0x08004701
 800466c:	080046e1 	.word	0x080046e1
 8004670:	08004701 	.word	0x08004701
 8004674:	08004701 	.word	0x08004701
 8004678:	08004701 	.word	0x08004701
 800467c:	08004701 	.word	0x08004701
 8004680:	08004701 	.word	0x08004701
 8004684:	08004701 	.word	0x08004701
 8004688:	08004701 	.word	0x08004701
 800468c:	080046e9 	.word	0x080046e9
 8004690:	08004701 	.word	0x08004701
 8004694:	08004701 	.word	0x08004701
 8004698:	08004701 	.word	0x08004701
 800469c:	08004701 	.word	0x08004701
 80046a0:	08004701 	.word	0x08004701
 80046a4:	08004701 	.word	0x08004701
 80046a8:	08004701 	.word	0x08004701
 80046ac:	080046f1 	.word	0x080046f1
 80046b0:	08004701 	.word	0x08004701
 80046b4:	08004701 	.word	0x08004701
 80046b8:	08004701 	.word	0x08004701
 80046bc:	08004701 	.word	0x08004701
 80046c0:	08004701 	.word	0x08004701
 80046c4:	08004701 	.word	0x08004701
 80046c8:	08004701 	.word	0x08004701
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046d6:	e326      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046de:	e322      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046e6:	e31e      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e31a      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80046f0:	2320      	movs	r3, #32
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f6:	e316      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80046f8:	2340      	movs	r3, #64	; 0x40
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fe:	e312      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e30e      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a69      	ldr	r2, [pc, #420]	; (80048b4 <UART_SetConfig+0x33c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d130      	bne.n	8004774 <UART_SetConfig+0x1fc>
 8004712:	4b67      	ldr	r3, [pc, #412]	; (80048b0 <UART_SetConfig+0x338>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b05      	cmp	r3, #5
 800471c:	d826      	bhi.n	800476c <UART_SetConfig+0x1f4>
 800471e:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x1ac>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	0800473d 	.word	0x0800473d
 8004728:	08004745 	.word	0x08004745
 800472c:	0800474d 	.word	0x0800474d
 8004730:	08004755 	.word	0x08004755
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004765 	.word	0x08004765
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004742:	e2f0      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800474a:	e2ec      	b.n	8004d26 <UART_SetConfig+0x7ae>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004752:	e2e8      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800475a:	e2e4      	b.n	8004d26 <UART_SetConfig+0x7ae>
 800475c:	2320      	movs	r3, #32
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004762:	e2e0      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476a:	e2dc      	b.n	8004d26 <UART_SetConfig+0x7ae>
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004772:	e2d8      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a4f      	ldr	r2, [pc, #316]	; (80048b8 <UART_SetConfig+0x340>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d130      	bne.n	80047e0 <UART_SetConfig+0x268>
 800477e:	4b4c      	ldr	r3, [pc, #304]	; (80048b0 <UART_SetConfig+0x338>)
 8004780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	2b05      	cmp	r3, #5
 8004788:	d826      	bhi.n	80047d8 <UART_SetConfig+0x260>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <UART_SetConfig+0x218>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a9 	.word	0x080047a9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047b9 	.word	0x080047b9
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ae:	e2ba      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80047b0:	2304      	movs	r3, #4
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047b6:	e2b6      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80047b8:	2308      	movs	r3, #8
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047be:	e2b2      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80047c0:	2310      	movs	r3, #16
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047c6:	e2ae      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80047c8:	2320      	movs	r3, #32
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ce:	e2aa      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047d6:	e2a6      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047de:	e2a2      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a35      	ldr	r2, [pc, #212]	; (80048bc <UART_SetConfig+0x344>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d130      	bne.n	800484c <UART_SetConfig+0x2d4>
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <UART_SetConfig+0x338>)
 80047ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d826      	bhi.n	8004844 <UART_SetConfig+0x2cc>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x284>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004815 	.word	0x08004815
 8004800:	0800481d 	.word	0x0800481d
 8004804:	08004825 	.word	0x08004825
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	2300      	movs	r3, #0
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800481a:	e284      	b.n	8004d26 <UART_SetConfig+0x7ae>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004822:	e280      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800482a:	e27c      	b.n	8004d26 <UART_SetConfig+0x7ae>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004832:	e278      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004834:	2320      	movs	r3, #32
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800483a:	e274      	b.n	8004d26 <UART_SetConfig+0x7ae>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004842:	e270      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484a:	e26c      	b.n	8004d26 <UART_SetConfig+0x7ae>
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <UART_SetConfig+0x348>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d142      	bne.n	80048dc <UART_SetConfig+0x364>
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <UART_SetConfig+0x338>)
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b05      	cmp	r3, #5
 8004860:	d838      	bhi.n	80048d4 <UART_SetConfig+0x35c>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x2f0>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004881 	.word	0x08004881
 800486c:	08004889 	.word	0x08004889
 8004870:	08004891 	.word	0x08004891
 8004874:	08004899 	.word	0x08004899
 8004878:	080048c5 	.word	0x080048c5
 800487c:	080048cd 	.word	0x080048cd
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004886:	e24e      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004888:	2304      	movs	r3, #4
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488e:	e24a      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004890:	2308      	movs	r3, #8
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004896:	e246      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489e:	e242      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80048a0:	cfff69f3 	.word	0xcfff69f3
 80048a4:	58000c00 	.word	0x58000c00
 80048a8:	11fff4ff 	.word	0x11fff4ff
 80048ac:	40011000 	.word	0x40011000
 80048b0:	58024400 	.word	0x58024400
 80048b4:	40004400 	.word	0x40004400
 80048b8:	40004800 	.word	0x40004800
 80048bc:	40004c00 	.word	0x40004c00
 80048c0:	40005000 	.word	0x40005000
 80048c4:	2320      	movs	r3, #32
 80048c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048ca:	e22c      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80048cc:	2340      	movs	r3, #64	; 0x40
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048d2:	e228      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80048da:	e224      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4ab1      	ldr	r2, [pc, #708]	; (8004ba8 <UART_SetConfig+0x630>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d176      	bne.n	80049d4 <UART_SetConfig+0x45c>
 80048e6:	4bb1      	ldr	r3, [pc, #708]	; (8004bac <UART_SetConfig+0x634>)
 80048e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ee:	2b28      	cmp	r3, #40	; 0x28
 80048f0:	d86c      	bhi.n	80049cc <UART_SetConfig+0x454>
 80048f2:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <UART_SetConfig+0x380>)
 80048f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f8:	0800499d 	.word	0x0800499d
 80048fc:	080049cd 	.word	0x080049cd
 8004900:	080049cd 	.word	0x080049cd
 8004904:	080049cd 	.word	0x080049cd
 8004908:	080049cd 	.word	0x080049cd
 800490c:	080049cd 	.word	0x080049cd
 8004910:	080049cd 	.word	0x080049cd
 8004914:	080049cd 	.word	0x080049cd
 8004918:	080049a5 	.word	0x080049a5
 800491c:	080049cd 	.word	0x080049cd
 8004920:	080049cd 	.word	0x080049cd
 8004924:	080049cd 	.word	0x080049cd
 8004928:	080049cd 	.word	0x080049cd
 800492c:	080049cd 	.word	0x080049cd
 8004930:	080049cd 	.word	0x080049cd
 8004934:	080049cd 	.word	0x080049cd
 8004938:	080049ad 	.word	0x080049ad
 800493c:	080049cd 	.word	0x080049cd
 8004940:	080049cd 	.word	0x080049cd
 8004944:	080049cd 	.word	0x080049cd
 8004948:	080049cd 	.word	0x080049cd
 800494c:	080049cd 	.word	0x080049cd
 8004950:	080049cd 	.word	0x080049cd
 8004954:	080049cd 	.word	0x080049cd
 8004958:	080049b5 	.word	0x080049b5
 800495c:	080049cd 	.word	0x080049cd
 8004960:	080049cd 	.word	0x080049cd
 8004964:	080049cd 	.word	0x080049cd
 8004968:	080049cd 	.word	0x080049cd
 800496c:	080049cd 	.word	0x080049cd
 8004970:	080049cd 	.word	0x080049cd
 8004974:	080049cd 	.word	0x080049cd
 8004978:	080049bd 	.word	0x080049bd
 800497c:	080049cd 	.word	0x080049cd
 8004980:	080049cd 	.word	0x080049cd
 8004984:	080049cd 	.word	0x080049cd
 8004988:	080049cd 	.word	0x080049cd
 800498c:	080049cd 	.word	0x080049cd
 8004990:	080049cd 	.word	0x080049cd
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049c5 	.word	0x080049c5
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049a2:	e1c0      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049aa:	e1bc      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049b2:	e1b8      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ba:	e1b4      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80049bc:	2320      	movs	r3, #32
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049c2:	e1b0      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80049c4:	2340      	movs	r3, #64	; 0x40
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ca:	e1ac      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d2:	e1a8      	b.n	8004d26 <UART_SetConfig+0x7ae>
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a75      	ldr	r2, [pc, #468]	; (8004bb0 <UART_SetConfig+0x638>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d130      	bne.n	8004a40 <UART_SetConfig+0x4c8>
 80049de:	4b73      	ldr	r3, [pc, #460]	; (8004bac <UART_SetConfig+0x634>)
 80049e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d826      	bhi.n	8004a38 <UART_SetConfig+0x4c0>
 80049ea:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <UART_SetConfig+0x478>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a09 	.word	0x08004a09
 80049f4:	08004a11 	.word	0x08004a11
 80049f8:	08004a19 	.word	0x08004a19
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a0e:	e18a      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a16:	e186      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a1e:	e182      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a26:	e17e      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a28:	2320      	movs	r3, #32
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a2e:	e17a      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a36:	e176      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3e:	e172      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a5b      	ldr	r2, [pc, #364]	; (8004bb4 <UART_SetConfig+0x63c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d130      	bne.n	8004aac <UART_SetConfig+0x534>
 8004a4a:	4b58      	ldr	r3, [pc, #352]	; (8004bac <UART_SetConfig+0x634>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d826      	bhi.n	8004aa4 <UART_SetConfig+0x52c>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x4e4>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a75 	.word	0x08004a75
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a85 	.word	0x08004a85
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a7a:	e154      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a82:	e150      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a8a:	e14c      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a92:	e148      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a94:	2320      	movs	r3, #32
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a9a:	e144      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa2:	e140      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aaa:	e13c      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a41      	ldr	r2, [pc, #260]	; (8004bb8 <UART_SetConfig+0x640>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	f040 8082 	bne.w	8004bbc <UART_SetConfig+0x644>
 8004ab8:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <UART_SetConfig+0x634>)
 8004aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ac0:	2b28      	cmp	r3, #40	; 0x28
 8004ac2:	d86d      	bhi.n	8004ba0 <UART_SetConfig+0x628>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <UART_SetConfig+0x554>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004b71 	.word	0x08004b71
 8004ad0:	08004ba1 	.word	0x08004ba1
 8004ad4:	08004ba1 	.word	0x08004ba1
 8004ad8:	08004ba1 	.word	0x08004ba1
 8004adc:	08004ba1 	.word	0x08004ba1
 8004ae0:	08004ba1 	.word	0x08004ba1
 8004ae4:	08004ba1 	.word	0x08004ba1
 8004ae8:	08004ba1 	.word	0x08004ba1
 8004aec:	08004b79 	.word	0x08004b79
 8004af0:	08004ba1 	.word	0x08004ba1
 8004af4:	08004ba1 	.word	0x08004ba1
 8004af8:	08004ba1 	.word	0x08004ba1
 8004afc:	08004ba1 	.word	0x08004ba1
 8004b00:	08004ba1 	.word	0x08004ba1
 8004b04:	08004ba1 	.word	0x08004ba1
 8004b08:	08004ba1 	.word	0x08004ba1
 8004b0c:	08004b81 	.word	0x08004b81
 8004b10:	08004ba1 	.word	0x08004ba1
 8004b14:	08004ba1 	.word	0x08004ba1
 8004b18:	08004ba1 	.word	0x08004ba1
 8004b1c:	08004ba1 	.word	0x08004ba1
 8004b20:	08004ba1 	.word	0x08004ba1
 8004b24:	08004ba1 	.word	0x08004ba1
 8004b28:	08004ba1 	.word	0x08004ba1
 8004b2c:	08004b89 	.word	0x08004b89
 8004b30:	08004ba1 	.word	0x08004ba1
 8004b34:	08004ba1 	.word	0x08004ba1
 8004b38:	08004ba1 	.word	0x08004ba1
 8004b3c:	08004ba1 	.word	0x08004ba1
 8004b40:	08004ba1 	.word	0x08004ba1
 8004b44:	08004ba1 	.word	0x08004ba1
 8004b48:	08004ba1 	.word	0x08004ba1
 8004b4c:	08004b91 	.word	0x08004b91
 8004b50:	08004ba1 	.word	0x08004ba1
 8004b54:	08004ba1 	.word	0x08004ba1
 8004b58:	08004ba1 	.word	0x08004ba1
 8004b5c:	08004ba1 	.word	0x08004ba1
 8004b60:	08004ba1 	.word	0x08004ba1
 8004b64:	08004ba1 	.word	0x08004ba1
 8004b68:	08004ba1 	.word	0x08004ba1
 8004b6c:	08004b99 	.word	0x08004b99
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b76:	e0d6      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b7e:	e0d2      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b86:	e0ce      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b8e:	e0ca      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004b90:	2320      	movs	r3, #32
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b96:	e0c6      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004b98:	2340      	movs	r3, #64	; 0x40
 8004b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004b9e:	e0c2      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004ba0:	2380      	movs	r3, #128	; 0x80
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ba6:	e0be      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004ba8:	40011400 	.word	0x40011400
 8004bac:	58024400 	.word	0x58024400
 8004bb0:	40007800 	.word	0x40007800
 8004bb4:	40007c00 	.word	0x40007c00
 8004bb8:	40011800 	.word	0x40011800
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4aad      	ldr	r2, [pc, #692]	; (8004e78 <UART_SetConfig+0x900>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d176      	bne.n	8004cb4 <UART_SetConfig+0x73c>
 8004bc6:	4bad      	ldr	r3, [pc, #692]	; (8004e7c <UART_SetConfig+0x904>)
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bce:	2b28      	cmp	r3, #40	; 0x28
 8004bd0:	d86c      	bhi.n	8004cac <UART_SetConfig+0x734>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <UART_SetConfig+0x660>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004c7d 	.word	0x08004c7d
 8004bdc:	08004cad 	.word	0x08004cad
 8004be0:	08004cad 	.word	0x08004cad
 8004be4:	08004cad 	.word	0x08004cad
 8004be8:	08004cad 	.word	0x08004cad
 8004bec:	08004cad 	.word	0x08004cad
 8004bf0:	08004cad 	.word	0x08004cad
 8004bf4:	08004cad 	.word	0x08004cad
 8004bf8:	08004c85 	.word	0x08004c85
 8004bfc:	08004cad 	.word	0x08004cad
 8004c00:	08004cad 	.word	0x08004cad
 8004c04:	08004cad 	.word	0x08004cad
 8004c08:	08004cad 	.word	0x08004cad
 8004c0c:	08004cad 	.word	0x08004cad
 8004c10:	08004cad 	.word	0x08004cad
 8004c14:	08004cad 	.word	0x08004cad
 8004c18:	08004c8d 	.word	0x08004c8d
 8004c1c:	08004cad 	.word	0x08004cad
 8004c20:	08004cad 	.word	0x08004cad
 8004c24:	08004cad 	.word	0x08004cad
 8004c28:	08004cad 	.word	0x08004cad
 8004c2c:	08004cad 	.word	0x08004cad
 8004c30:	08004cad 	.word	0x08004cad
 8004c34:	08004cad 	.word	0x08004cad
 8004c38:	08004c95 	.word	0x08004c95
 8004c3c:	08004cad 	.word	0x08004cad
 8004c40:	08004cad 	.word	0x08004cad
 8004c44:	08004cad 	.word	0x08004cad
 8004c48:	08004cad 	.word	0x08004cad
 8004c4c:	08004cad 	.word	0x08004cad
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004c9d 	.word	0x08004c9d
 8004c5c:	08004cad 	.word	0x08004cad
 8004c60:	08004cad 	.word	0x08004cad
 8004c64:	08004cad 	.word	0x08004cad
 8004c68:	08004cad 	.word	0x08004cad
 8004c6c:	08004cad 	.word	0x08004cad
 8004c70:	08004cad 	.word	0x08004cad
 8004c74:	08004cad 	.word	0x08004cad
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c82:	e050      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c8a:	e04c      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c92:	e048      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004c9a:	e044      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ca2:	e040      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004caa:	e03c      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cb2:	e038      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a71      	ldr	r2, [pc, #452]	; (8004e80 <UART_SetConfig+0x908>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d130      	bne.n	8004d20 <UART_SetConfig+0x7a8>
 8004cbe:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <UART_SetConfig+0x904>)
 8004cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d826      	bhi.n	8004d18 <UART_SetConfig+0x7a0>
 8004cca:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <UART_SetConfig+0x758>)
 8004ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd0:	08004ce9 	.word	0x08004ce9
 8004cd4:	08004cf1 	.word	0x08004cf1
 8004cd8:	08004cf9 	.word	0x08004cf9
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	2302      	movs	r3, #2
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cee:	e01a      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004cf0:	2304      	movs	r3, #4
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cf6:	e016      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004cf8:	2308      	movs	r3, #8
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004cfe:	e012      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004d00:	2310      	movs	r3, #16
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d06:	e00e      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004d08:	2320      	movs	r3, #32
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d0e:	e00a      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004d10:	2340      	movs	r3, #64	; 0x40
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d16:	e006      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d1e:	e002      	b.n	8004d26 <UART_SetConfig+0x7ae>
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a55      	ldr	r2, [pc, #340]	; (8004e80 <UART_SetConfig+0x908>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	f040 80f8 	bne.w	8004f22 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	dc46      	bgt.n	8004dc8 <UART_SetConfig+0x850>
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	db75      	blt.n	8004e2a <UART_SetConfig+0x8b2>
 8004d3e:	3b02      	subs	r3, #2
 8004d40:	2b1e      	cmp	r3, #30
 8004d42:	d872      	bhi.n	8004e2a <UART_SetConfig+0x8b2>
 8004d44:	a201      	add	r2, pc, #4	; (adr r2, 8004d4c <UART_SetConfig+0x7d4>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004dcf 	.word	0x08004dcf
 8004d50:	08004e2b 	.word	0x08004e2b
 8004d54:	08004dd7 	.word	0x08004dd7
 8004d58:	08004e2b 	.word	0x08004e2b
 8004d5c:	08004e2b 	.word	0x08004e2b
 8004d60:	08004e2b 	.word	0x08004e2b
 8004d64:	08004de7 	.word	0x08004de7
 8004d68:	08004e2b 	.word	0x08004e2b
 8004d6c:	08004e2b 	.word	0x08004e2b
 8004d70:	08004e2b 	.word	0x08004e2b
 8004d74:	08004e2b 	.word	0x08004e2b
 8004d78:	08004e2b 	.word	0x08004e2b
 8004d7c:	08004e2b 	.word	0x08004e2b
 8004d80:	08004e2b 	.word	0x08004e2b
 8004d84:	08004df7 	.word	0x08004df7
 8004d88:	08004e2b 	.word	0x08004e2b
 8004d8c:	08004e2b 	.word	0x08004e2b
 8004d90:	08004e2b 	.word	0x08004e2b
 8004d94:	08004e2b 	.word	0x08004e2b
 8004d98:	08004e2b 	.word	0x08004e2b
 8004d9c:	08004e2b 	.word	0x08004e2b
 8004da0:	08004e2b 	.word	0x08004e2b
 8004da4:	08004e2b 	.word	0x08004e2b
 8004da8:	08004e2b 	.word	0x08004e2b
 8004dac:	08004e2b 	.word	0x08004e2b
 8004db0:	08004e2b 	.word	0x08004e2b
 8004db4:	08004e2b 	.word	0x08004e2b
 8004db8:	08004e2b 	.word	0x08004e2b
 8004dbc:	08004e2b 	.word	0x08004e2b
 8004dc0:	08004e2b 	.word	0x08004e2b
 8004dc4:	08004e1d 	.word	0x08004e1d
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d02a      	beq.n	8004e22 <UART_SetConfig+0x8aa>
 8004dcc:	e02d      	b.n	8004e2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004dce:	f7fe fe7b 	bl	8003ac8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004dd4:	e02f      	b.n	8004e36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe fe8a 	bl	8003af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004de4:	e027      	b.n	8004e36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004de6:	f107 0318 	add.w	r3, r7, #24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe ffd6 	bl	8003d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004df4:	e01f      	b.n	8004e36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004df6:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <UART_SetConfig+0x904>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0320 	and.w	r3, r3, #32
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <UART_SetConfig+0x904>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	08db      	lsrs	r3, r3, #3
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	4a1d      	ldr	r2, [pc, #116]	; (8004e84 <UART_SetConfig+0x90c>)
 8004e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e14:	e00f      	b.n	8004e36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e16:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <UART_SetConfig+0x90c>)
 8004e18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e1a:	e00c      	b.n	8004e36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <UART_SetConfig+0x910>)
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e28:	e005      	b.n	8004e36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004e34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 81ee 	beq.w	800521a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <UART_SetConfig+0x914>)
 8004e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d305      	bcc.n	8004e6e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d910      	bls.n	8004e90 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e74:	e1d1      	b.n	800521a <UART_SetConfig+0xca2>
 8004e76:	bf00      	nop
 8004e78:	40011c00 	.word	0x40011c00
 8004e7c:	58024400 	.word	0x58024400
 8004e80:	58000c00 	.word	0x58000c00
 8004e84:	03d09000 	.word	0x03d09000
 8004e88:	003d0900 	.word	0x003d0900
 8004e8c:	0800823c 	.word	0x0800823c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e92:	2200      	movs	r2, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	60fa      	str	r2, [r7, #12]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	4ac0      	ldr	r2, [pc, #768]	; (80051a0 <UART_SetConfig+0xc28>)
 8004e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	607a      	str	r2, [r7, #4]
 8004eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eb2:	f7fb fa75 	bl	80003a0 <__aeabi_uldivmod>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	020b      	lsls	r3, r1, #8
 8004ec8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ecc:	0202      	lsls	r2, r0, #8
 8004ece:	6979      	ldr	r1, [r7, #20]
 8004ed0:	6849      	ldr	r1, [r1, #4]
 8004ed2:	0849      	lsrs	r1, r1, #1
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	4605      	mov	r5, r0
 8004eda:	eb12 0804 	adds.w	r8, r2, r4
 8004ede:	eb43 0905 	adc.w	r9, r3, r5
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	469a      	mov	sl, r3
 8004eea:	4693      	mov	fp, r2
 8004eec:	4652      	mov	r2, sl
 8004eee:	465b      	mov	r3, fp
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	f7fb fa54 	bl	80003a0 <__aeabi_uldivmod>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4613      	mov	r3, r2
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f06:	d308      	bcc.n	8004f1a <UART_SetConfig+0x9a2>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f0e:	d204      	bcs.n	8004f1a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f16:	60da      	str	r2, [r3, #12]
 8004f18:	e17f      	b.n	800521a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004f20:	e17b      	b.n	800521a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2a:	f040 80bd 	bne.w	80050a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8004f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	dc48      	bgt.n	8004fc8 <UART_SetConfig+0xa50>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	db7b      	blt.n	8005032 <UART_SetConfig+0xaba>
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d879      	bhi.n	8005032 <UART_SetConfig+0xaba>
 8004f3e:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0x9cc>)
 8004f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f44:	08004fcf 	.word	0x08004fcf
 8004f48:	08004fd7 	.word	0x08004fd7
 8004f4c:	08005033 	.word	0x08005033
 8004f50:	08005033 	.word	0x08005033
 8004f54:	08004fdf 	.word	0x08004fdf
 8004f58:	08005033 	.word	0x08005033
 8004f5c:	08005033 	.word	0x08005033
 8004f60:	08005033 	.word	0x08005033
 8004f64:	08004fef 	.word	0x08004fef
 8004f68:	08005033 	.word	0x08005033
 8004f6c:	08005033 	.word	0x08005033
 8004f70:	08005033 	.word	0x08005033
 8004f74:	08005033 	.word	0x08005033
 8004f78:	08005033 	.word	0x08005033
 8004f7c:	08005033 	.word	0x08005033
 8004f80:	08005033 	.word	0x08005033
 8004f84:	08004fff 	.word	0x08004fff
 8004f88:	08005033 	.word	0x08005033
 8004f8c:	08005033 	.word	0x08005033
 8004f90:	08005033 	.word	0x08005033
 8004f94:	08005033 	.word	0x08005033
 8004f98:	08005033 	.word	0x08005033
 8004f9c:	08005033 	.word	0x08005033
 8004fa0:	08005033 	.word	0x08005033
 8004fa4:	08005033 	.word	0x08005033
 8004fa8:	08005033 	.word	0x08005033
 8004fac:	08005033 	.word	0x08005033
 8004fb0:	08005033 	.word	0x08005033
 8004fb4:	08005033 	.word	0x08005033
 8004fb8:	08005033 	.word	0x08005033
 8004fbc:	08005033 	.word	0x08005033
 8004fc0:	08005033 	.word	0x08005033
 8004fc4:	08005025 	.word	0x08005025
 8004fc8:	2b40      	cmp	r3, #64	; 0x40
 8004fca:	d02e      	beq.n	800502a <UART_SetConfig+0xab2>
 8004fcc:	e031      	b.n	8005032 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fce:	f7fd fb91 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8004fd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004fd4:	e033      	b.n	800503e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd6:	f7fd fba3 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8004fda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004fdc:	e02f      	b.n	800503e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fd86 	bl	8003af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fec:	e027      	b.n	800503e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fee:	f107 0318 	add.w	r3, r7, #24
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fed2 	bl	8003d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ffc:	e01f      	b.n	800503e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ffe:	4b69      	ldr	r3, [pc, #420]	; (80051a4 <UART_SetConfig+0xc2c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800500a:	4b66      	ldr	r3, [pc, #408]	; (80051a4 <UART_SetConfig+0xc2c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	08db      	lsrs	r3, r3, #3
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	4a64      	ldr	r2, [pc, #400]	; (80051a8 <UART_SetConfig+0xc30>)
 8005016:	fa22 f303 	lsr.w	r3, r2, r3
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800501c:	e00f      	b.n	800503e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800501e:	4b62      	ldr	r3, [pc, #392]	; (80051a8 <UART_SetConfig+0xc30>)
 8005020:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005022:	e00c      	b.n	800503e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005024:	4b61      	ldr	r3, [pc, #388]	; (80051ac <UART_SetConfig+0xc34>)
 8005026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005028:	e009      	b.n	800503e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800502a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005030:	e005      	b.n	800503e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800503c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800503e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80ea 	beq.w	800521a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	4a55      	ldr	r2, [pc, #340]	; (80051a0 <UART_SetConfig+0xc28>)
 800504c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005050:	461a      	mov	r2, r3
 8005052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005054:	fbb3 f3f2 	udiv	r3, r3, r2
 8005058:	005a      	lsls	r2, r3, #1
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	441a      	add	r2, r3
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506e:	2b0f      	cmp	r3, #15
 8005070:	d916      	bls.n	80050a0 <UART_SetConfig+0xb28>
 8005072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005078:	d212      	bcs.n	80050a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	b29b      	uxth	r3, r3
 800507e:	f023 030f 	bic.w	r3, r3, #15
 8005082:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	b29b      	uxth	r3, r3
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	b29a      	uxth	r2, r3
 8005090:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005092:	4313      	orrs	r3, r2
 8005094:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	e0bc      	b.n	800521a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80050a6:	e0b8      	b.n	800521a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	dc4b      	bgt.n	8005148 <UART_SetConfig+0xbd0>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f2c0 8087 	blt.w	80051c4 <UART_SetConfig+0xc4c>
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	f200 8084 	bhi.w	80051c4 <UART_SetConfig+0xc4c>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <UART_SetConfig+0xb4c>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	0800514f 	.word	0x0800514f
 80050c8:	08005157 	.word	0x08005157
 80050cc:	080051c5 	.word	0x080051c5
 80050d0:	080051c5 	.word	0x080051c5
 80050d4:	0800515f 	.word	0x0800515f
 80050d8:	080051c5 	.word	0x080051c5
 80050dc:	080051c5 	.word	0x080051c5
 80050e0:	080051c5 	.word	0x080051c5
 80050e4:	0800516f 	.word	0x0800516f
 80050e8:	080051c5 	.word	0x080051c5
 80050ec:	080051c5 	.word	0x080051c5
 80050f0:	080051c5 	.word	0x080051c5
 80050f4:	080051c5 	.word	0x080051c5
 80050f8:	080051c5 	.word	0x080051c5
 80050fc:	080051c5 	.word	0x080051c5
 8005100:	080051c5 	.word	0x080051c5
 8005104:	0800517f 	.word	0x0800517f
 8005108:	080051c5 	.word	0x080051c5
 800510c:	080051c5 	.word	0x080051c5
 8005110:	080051c5 	.word	0x080051c5
 8005114:	080051c5 	.word	0x080051c5
 8005118:	080051c5 	.word	0x080051c5
 800511c:	080051c5 	.word	0x080051c5
 8005120:	080051c5 	.word	0x080051c5
 8005124:	080051c5 	.word	0x080051c5
 8005128:	080051c5 	.word	0x080051c5
 800512c:	080051c5 	.word	0x080051c5
 8005130:	080051c5 	.word	0x080051c5
 8005134:	080051c5 	.word	0x080051c5
 8005138:	080051c5 	.word	0x080051c5
 800513c:	080051c5 	.word	0x080051c5
 8005140:	080051c5 	.word	0x080051c5
 8005144:	080051b7 	.word	0x080051b7
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d037      	beq.n	80051bc <UART_SetConfig+0xc44>
 800514c:	e03a      	b.n	80051c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800514e:	f7fd fad1 	bl	80026f4 <HAL_RCC_GetPCLK1Freq>
 8005152:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005154:	e03c      	b.n	80051d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005156:	f7fd fae3 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 800515a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800515c:	e038      	b.n	80051d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005162:	4618      	mov	r0, r3
 8005164:	f7fe fcc6 	bl	8003af4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800516c:	e030      	b.n	80051d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800516e:	f107 0318 	add.w	r3, r7, #24
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe fe12 	bl	8003d9c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800517c:	e028      	b.n	80051d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800517e:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <UART_SetConfig+0xc2c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d012      	beq.n	80051b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800518a:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <UART_SetConfig+0xc2c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	08db      	lsrs	r3, r3, #3
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <UART_SetConfig+0xc30>)
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800519c:	e018      	b.n	80051d0 <UART_SetConfig+0xc58>
 800519e:	bf00      	nop
 80051a0:	0800823c 	.word	0x0800823c
 80051a4:	58024400 	.word	0x58024400
 80051a8:	03d09000 	.word	0x03d09000
 80051ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80051b0:	4b24      	ldr	r3, [pc, #144]	; (8005244 <UART_SetConfig+0xccc>)
 80051b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051b4:	e00c      	b.n	80051d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <UART_SetConfig+0xcd0>)
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ba:	e009      	b.n	80051d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c2:	e005      	b.n	80051d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80051ce:	bf00      	nop
    }

    if (pclk != 0U)
 80051d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d021      	beq.n	800521a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	4a1c      	ldr	r2, [pc, #112]	; (800524c <UART_SetConfig+0xcd4>)
 80051dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	441a      	add	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b0f      	cmp	r3, #15
 80051fe:	d909      	bls.n	8005214 <UART_SetConfig+0xc9c>
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005206:	d205      	bcs.n	8005214 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	b29a      	uxth	r2, r3
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60da      	str	r2, [r3, #12]
 8005212:	e002      	b.n	800521a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2201      	movs	r2, #1
 800521e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2201      	movs	r2, #1
 8005226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005236:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800523a:	4618      	mov	r0, r3
 800523c:	3748      	adds	r7, #72	; 0x48
 800523e:	46bd      	mov	sp, r7
 8005240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005244:	03d09000 	.word	0x03d09000
 8005248:	003d0900 	.word	0x003d0900
 800524c:	0800823c 	.word	0x0800823c

08005250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	430a      	orrs	r2, r1
 800529a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00a      	beq.n	80052e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00a      	beq.n	8005302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01a      	beq.n	8005366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534e:	d10a      	bne.n	8005366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	605a      	str	r2, [r3, #4]
  }
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b098      	sub	sp, #96	; 0x60
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053a4:	f7fb fedc 	bl	8001160 <HAL_GetTick>
 80053a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d12f      	bne.n	8005418 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c0:	2200      	movs	r2, #0
 80053c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f88e 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d022      	beq.n	8005418 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	e853 3f00 	ldrex	r3, [r3]
 80053de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80053e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e6:	653b      	str	r3, [r7, #80]	; 0x50
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f0:	647b      	str	r3, [r7, #68]	; 0x44
 80053f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053f8:	e841 2300 	strex	r3, r2, [r1]
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1e6      	bne.n	80053d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e063      	b.n	80054e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d149      	bne.n	80054ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542e:	2200      	movs	r2, #0
 8005430:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f857 	bl	80054e8 <UART_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d03c      	beq.n	80054ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	e853 3f00 	ldrex	r3, [r3]
 800544c:	623b      	str	r3, [r7, #32]
   return(result);
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545e:	633b      	str	r3, [r7, #48]	; 0x30
 8005460:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800546c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e6      	bne.n	8005440 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	60fb      	str	r3, [r7, #12]
   return(result);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	64bb      	str	r3, [r7, #72]	; 0x48
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3308      	adds	r3, #8
 8005490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005492:	61fa      	str	r2, [r7, #28]
 8005494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	69b9      	ldr	r1, [r7, #24]
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	617b      	str	r3, [r7, #20]
   return(result);
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e5      	bne.n	8005472 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e012      	b.n	80054e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3758      	adds	r7, #88	; 0x58
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	603b      	str	r3, [r7, #0]
 80054f4:	4613      	mov	r3, r2
 80054f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f8:	e049      	b.n	800558e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005500:	d045      	beq.n	800558e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005502:	f7fb fe2d 	bl	8001160 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	429a      	cmp	r2, r3
 8005510:	d302      	bcc.n	8005518 <UART_WaitOnFlagUntilTimeout+0x30>
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e048      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d031      	beq.n	800558e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69db      	ldr	r3, [r3, #28]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b08      	cmp	r3, #8
 8005536:	d110      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f839 	bl	80055b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2208      	movs	r2, #8
 800554a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e029      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69db      	ldr	r3, [r3, #28]
 8005560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005568:	d111      	bne.n	800558e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005572:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 f81f 	bl	80055b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e00f      	b.n	80055ae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4013      	ands	r3, r2
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	429a      	cmp	r2, r3
 800559c:	bf0c      	ite	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	2300      	movne	r3, #0
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	461a      	mov	r2, r3
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d0a6      	beq.n	80054fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b095      	sub	sp, #84	; 0x54
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055de:	643b      	str	r3, [r7, #64]	; 0x40
 80055e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e6      	bne.n	80055c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	61fb      	str	r3, [r7, #28]
   return(result);
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <UART_EndRxTransfer+0xc8>)
 8005606:	4013      	ands	r3, r2
 8005608:	64bb      	str	r3, [r7, #72]	; 0x48
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e5      	bne.n	80055f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800562a:	2b01      	cmp	r3, #1
 800562c:	d118      	bne.n	8005660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60bb      	str	r3, [r7, #8]
   return(result);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f023 0310 	bic.w	r3, r3, #16
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6979      	ldr	r1, [r7, #20]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	613b      	str	r3, [r7, #16]
   return(result);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005674:	bf00      	nop
 8005676:	3754      	adds	r7, #84	; 0x54
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	effffffe 	.word	0xeffffffe

08005684 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005692:	2b01      	cmp	r3, #1
 8005694:	d101      	bne.n	800569a <HAL_UARTEx_DisableFifoMode+0x16>
 8005696:	2302      	movs	r3, #2
 8005698:	e027      	b.n	80056ea <HAL_UARTEx_DisableFifoMode+0x66>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2224      	movs	r2, #36	; 0x24
 80056a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0201 	bic.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80056c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr

080056f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800570a:	2302      	movs	r3, #2
 800570c:	e02d      	b.n	800576a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2224      	movs	r2, #36	; 0x24
 800571a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0201 	bic.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f850 	bl	80057f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005786:	2302      	movs	r3, #2
 8005788:	e02d      	b.n	80057e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2224      	movs	r2, #36	; 0x24
 8005796:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 0201 	bic.w	r2, r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f812 	bl	80057f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
	...

080057f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d108      	bne.n	8005812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005810:	e031      	b.n	8005876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005812:	2310      	movs	r3, #16
 8005814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005816:	2310      	movs	r3, #16
 8005818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	0e5b      	lsrs	r3, r3, #25
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	0f5b      	lsrs	r3, r3, #29
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800583a:	7bbb      	ldrb	r3, [r7, #14]
 800583c:	7b3a      	ldrb	r2, [r7, #12]
 800583e:	4911      	ldr	r1, [pc, #68]	; (8005884 <UARTEx_SetNbDataToProcess+0x94>)
 8005840:	5c8a      	ldrb	r2, [r1, r2]
 8005842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005846:	7b3a      	ldrb	r2, [r7, #12]
 8005848:	490f      	ldr	r1, [pc, #60]	; (8005888 <UARTEx_SetNbDataToProcess+0x98>)
 800584a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800584c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005850:	b29a      	uxth	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	7b7a      	ldrb	r2, [r7, #13]
 800585c:	4909      	ldr	r1, [pc, #36]	; (8005884 <UARTEx_SetNbDataToProcess+0x94>)
 800585e:	5c8a      	ldrb	r2, [r1, r2]
 8005860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005864:	7b7a      	ldrb	r2, [r7, #13]
 8005866:	4908      	ldr	r1, [pc, #32]	; (8005888 <UARTEx_SetNbDataToProcess+0x98>)
 8005868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800586a:	fb93 f3f2 	sdiv	r3, r3, r2
 800586e:	b29a      	uxth	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	08008254 	.word	0x08008254
 8005888:	0800825c 	.word	0x0800825c

0800588c <__errno>:
 800588c:	4b01      	ldr	r3, [pc, #4]	; (8005894 <__errno+0x8>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	24000010 	.word	0x24000010

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4d0d      	ldr	r5, [pc, #52]	; (80058d0 <__libc_init_array+0x38>)
 800589c:	4c0d      	ldr	r4, [pc, #52]	; (80058d4 <__libc_init_array+0x3c>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	2600      	movs	r6, #0
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	4d0b      	ldr	r5, [pc, #44]	; (80058d8 <__libc_init_array+0x40>)
 80058aa:	4c0c      	ldr	r4, [pc, #48]	; (80058dc <__libc_init_array+0x44>)
 80058ac:	f002 fca8 	bl	8008200 <_init>
 80058b0:	1b64      	subs	r4, r4, r5
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	2600      	movs	r6, #0
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	08008644 	.word	0x08008644
 80058d4:	08008644 	.word	0x08008644
 80058d8:	08008644 	.word	0x08008644
 80058dc:	08008648 	.word	0x08008648

080058e0 <memset>:
 80058e0:	4402      	add	r2, r0
 80058e2:	4603      	mov	r3, r0
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d100      	bne.n	80058ea <memset+0xa>
 80058e8:	4770      	bx	lr
 80058ea:	f803 1b01 	strb.w	r1, [r3], #1
 80058ee:	e7f9      	b.n	80058e4 <memset+0x4>

080058f0 <__cvt>:
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	ed2d 8b02 	vpush	{d8}
 80058f6:	eeb0 8b40 	vmov.f64	d8, d0
 80058fa:	b085      	sub	sp, #20
 80058fc:	4617      	mov	r7, r2
 80058fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005900:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005902:	ee18 2a90 	vmov	r2, s17
 8005906:	f025 0520 	bic.w	r5, r5, #32
 800590a:	2a00      	cmp	r2, #0
 800590c:	bfb6      	itet	lt
 800590e:	222d      	movlt	r2, #45	; 0x2d
 8005910:	2200      	movge	r2, #0
 8005912:	eeb1 8b40 	vneglt.f64	d8, d0
 8005916:	2d46      	cmp	r5, #70	; 0x46
 8005918:	460c      	mov	r4, r1
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	d004      	beq.n	8005928 <__cvt+0x38>
 800591e:	2d45      	cmp	r5, #69	; 0x45
 8005920:	d100      	bne.n	8005924 <__cvt+0x34>
 8005922:	3401      	adds	r4, #1
 8005924:	2102      	movs	r1, #2
 8005926:	e000      	b.n	800592a <__cvt+0x3a>
 8005928:	2103      	movs	r1, #3
 800592a:	ab03      	add	r3, sp, #12
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	ab02      	add	r3, sp, #8
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	4622      	mov	r2, r4
 8005934:	4633      	mov	r3, r6
 8005936:	eeb0 0b48 	vmov.f64	d0, d8
 800593a:	f000 fcc1 	bl	80062c0 <_dtoa_r>
 800593e:	2d47      	cmp	r5, #71	; 0x47
 8005940:	d101      	bne.n	8005946 <__cvt+0x56>
 8005942:	07fb      	lsls	r3, r7, #31
 8005944:	d51a      	bpl.n	800597c <__cvt+0x8c>
 8005946:	2d46      	cmp	r5, #70	; 0x46
 8005948:	eb00 0204 	add.w	r2, r0, r4
 800594c:	d10c      	bne.n	8005968 <__cvt+0x78>
 800594e:	7803      	ldrb	r3, [r0, #0]
 8005950:	2b30      	cmp	r3, #48	; 0x30
 8005952:	d107      	bne.n	8005964 <__cvt+0x74>
 8005954:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8005958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800595c:	bf1c      	itt	ne
 800595e:	f1c4 0401 	rsbne	r4, r4, #1
 8005962:	6034      	strne	r4, [r6, #0]
 8005964:	6833      	ldr	r3, [r6, #0]
 8005966:	441a      	add	r2, r3
 8005968:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005970:	bf08      	it	eq
 8005972:	9203      	streq	r2, [sp, #12]
 8005974:	2130      	movs	r1, #48	; 0x30
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	4293      	cmp	r3, r2
 800597a:	d307      	bcc.n	800598c <__cvt+0x9c>
 800597c:	9b03      	ldr	r3, [sp, #12]
 800597e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005980:	1a1b      	subs	r3, r3, r0
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	b005      	add	sp, #20
 8005986:	ecbd 8b02 	vpop	{d8}
 800598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598c:	1c5c      	adds	r4, r3, #1
 800598e:	9403      	str	r4, [sp, #12]
 8005990:	7019      	strb	r1, [r3, #0]
 8005992:	e7f0      	b.n	8005976 <__cvt+0x86>

08005994 <__exponent>:
 8005994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005996:	4603      	mov	r3, r0
 8005998:	2900      	cmp	r1, #0
 800599a:	bfb8      	it	lt
 800599c:	4249      	neglt	r1, r1
 800599e:	f803 2b02 	strb.w	r2, [r3], #2
 80059a2:	bfb4      	ite	lt
 80059a4:	222d      	movlt	r2, #45	; 0x2d
 80059a6:	222b      	movge	r2, #43	; 0x2b
 80059a8:	2909      	cmp	r1, #9
 80059aa:	7042      	strb	r2, [r0, #1]
 80059ac:	dd2a      	ble.n	8005a04 <__exponent+0x70>
 80059ae:	f10d 0407 	add.w	r4, sp, #7
 80059b2:	46a4      	mov	ip, r4
 80059b4:	270a      	movs	r7, #10
 80059b6:	46a6      	mov	lr, r4
 80059b8:	460a      	mov	r2, r1
 80059ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80059be:	fb07 1516 	mls	r5, r7, r6, r1
 80059c2:	3530      	adds	r5, #48	; 0x30
 80059c4:	2a63      	cmp	r2, #99	; 0x63
 80059c6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80059ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059ce:	4631      	mov	r1, r6
 80059d0:	dcf1      	bgt.n	80059b6 <__exponent+0x22>
 80059d2:	3130      	adds	r1, #48	; 0x30
 80059d4:	f1ae 0502 	sub.w	r5, lr, #2
 80059d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059dc:	1c44      	adds	r4, r0, #1
 80059de:	4629      	mov	r1, r5
 80059e0:	4561      	cmp	r1, ip
 80059e2:	d30a      	bcc.n	80059fa <__exponent+0x66>
 80059e4:	f10d 0209 	add.w	r2, sp, #9
 80059e8:	eba2 020e 	sub.w	r2, r2, lr
 80059ec:	4565      	cmp	r5, ip
 80059ee:	bf88      	it	hi
 80059f0:	2200      	movhi	r2, #0
 80059f2:	4413      	add	r3, r2
 80059f4:	1a18      	subs	r0, r3, r0
 80059f6:	b003      	add	sp, #12
 80059f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a02:	e7ed      	b.n	80059e0 <__exponent+0x4c>
 8005a04:	2330      	movs	r3, #48	; 0x30
 8005a06:	3130      	adds	r1, #48	; 0x30
 8005a08:	7083      	strb	r3, [r0, #2]
 8005a0a:	70c1      	strb	r1, [r0, #3]
 8005a0c:	1d03      	adds	r3, r0, #4
 8005a0e:	e7f1      	b.n	80059f4 <__exponent+0x60>

08005a10 <_printf_float>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	b08b      	sub	sp, #44	; 0x2c
 8005a16:	460c      	mov	r4, r1
 8005a18:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8005a1c:	4616      	mov	r6, r2
 8005a1e:	461f      	mov	r7, r3
 8005a20:	4605      	mov	r5, r0
 8005a22:	f001 fab1 	bl	8006f88 <_localeconv_r>
 8005a26:	f8d0 b000 	ldr.w	fp, [r0]
 8005a2a:	4658      	mov	r0, fp
 8005a2c:	f7fa fc60 	bl	80002f0 <strlen>
 8005a30:	2300      	movs	r3, #0
 8005a32:	9308      	str	r3, [sp, #32]
 8005a34:	f8d8 3000 	ldr.w	r3, [r8]
 8005a38:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	3307      	adds	r3, #7
 8005a40:	f023 0307 	bic.w	r3, r3, #7
 8005a44:	f103 0108 	add.w	r1, r3, #8
 8005a48:	f8c8 1000 	str.w	r1, [r8]
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a52:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8005a56:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8005cb8 <_printf_float+0x2a8>
 8005a5a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005a5e:	eeb0 6bc0 	vabs.f64	d6, d0
 8005a62:	eeb4 6b47 	vcmp.f64	d6, d7
 8005a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a6a:	dd24      	ble.n	8005ab6 <_printf_float+0xa6>
 8005a6c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a74:	d502      	bpl.n	8005a7c <_printf_float+0x6c>
 8005a76:	232d      	movs	r3, #45	; 0x2d
 8005a78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a7c:	4b90      	ldr	r3, [pc, #576]	; (8005cc0 <_printf_float+0x2b0>)
 8005a7e:	4891      	ldr	r0, [pc, #580]	; (8005cc4 <_printf_float+0x2b4>)
 8005a80:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005a84:	bf94      	ite	ls
 8005a86:	4698      	movls	r8, r3
 8005a88:	4680      	movhi	r8, r0
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	6123      	str	r3, [r4, #16]
 8005a8e:	f022 0204 	bic.w	r2, r2, #4
 8005a92:	2300      	movs	r3, #0
 8005a94:	6022      	str	r2, [r4, #0]
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	9700      	str	r7, [sp, #0]
 8005a9a:	4633      	mov	r3, r6
 8005a9c:	aa09      	add	r2, sp, #36	; 0x24
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	f000 f9d3 	bl	8005e4c <_printf_common>
 8005aa6:	3001      	adds	r0, #1
 8005aa8:	f040 808a 	bne.w	8005bc0 <_printf_float+0x1b0>
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab0:	b00b      	add	sp, #44	; 0x2c
 8005ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab6:	eeb4 0b40 	vcmp.f64	d0, d0
 8005aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005abe:	d709      	bvc.n	8005ad4 <_printf_float+0xc4>
 8005ac0:	ee10 3a90 	vmov	r3, s1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfbc      	itt	lt
 8005ac8:	232d      	movlt	r3, #45	; 0x2d
 8005aca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ace:	487e      	ldr	r0, [pc, #504]	; (8005cc8 <_printf_float+0x2b8>)
 8005ad0:	4b7e      	ldr	r3, [pc, #504]	; (8005ccc <_printf_float+0x2bc>)
 8005ad2:	e7d5      	b.n	8005a80 <_printf_float+0x70>
 8005ad4:	6863      	ldr	r3, [r4, #4]
 8005ad6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005ada:	9104      	str	r1, [sp, #16]
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	d13c      	bne.n	8005b5a <_printf_float+0x14a>
 8005ae0:	2306      	movs	r3, #6
 8005ae2:	6063      	str	r3, [r4, #4]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9303      	str	r3, [sp, #12]
 8005ae8:	ab08      	add	r3, sp, #32
 8005aea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8005aee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005af2:	ab07      	add	r3, sp, #28
 8005af4:	6861      	ldr	r1, [r4, #4]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	6022      	str	r2, [r4, #0]
 8005afa:	f10d 031b 	add.w	r3, sp, #27
 8005afe:	4628      	mov	r0, r5
 8005b00:	f7ff fef6 	bl	80058f0 <__cvt>
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	9907      	ldr	r1, [sp, #28]
 8005b08:	2b47      	cmp	r3, #71	; 0x47
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	d108      	bne.n	8005b20 <_printf_float+0x110>
 8005b0e:	1cc8      	adds	r0, r1, #3
 8005b10:	db02      	blt.n	8005b18 <_printf_float+0x108>
 8005b12:	6863      	ldr	r3, [r4, #4]
 8005b14:	4299      	cmp	r1, r3
 8005b16:	dd41      	ble.n	8005b9c <_printf_float+0x18c>
 8005b18:	f1a9 0902 	sub.w	r9, r9, #2
 8005b1c:	fa5f f989 	uxtb.w	r9, r9
 8005b20:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b24:	d820      	bhi.n	8005b68 <_printf_float+0x158>
 8005b26:	3901      	subs	r1, #1
 8005b28:	464a      	mov	r2, r9
 8005b2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b2e:	9107      	str	r1, [sp, #28]
 8005b30:	f7ff ff30 	bl	8005994 <__exponent>
 8005b34:	9a08      	ldr	r2, [sp, #32]
 8005b36:	9004      	str	r0, [sp, #16]
 8005b38:	1813      	adds	r3, r2, r0
 8005b3a:	2a01      	cmp	r2, #1
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	dc02      	bgt.n	8005b46 <_printf_float+0x136>
 8005b40:	6822      	ldr	r2, [r4, #0]
 8005b42:	07d2      	lsls	r2, r2, #31
 8005b44:	d501      	bpl.n	8005b4a <_printf_float+0x13a>
 8005b46:	3301      	adds	r3, #1
 8005b48:	6123      	str	r3, [r4, #16]
 8005b4a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0a2      	beq.n	8005a98 <_printf_float+0x88>
 8005b52:	232d      	movs	r3, #45	; 0x2d
 8005b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b58:	e79e      	b.n	8005a98 <_printf_float+0x88>
 8005b5a:	9904      	ldr	r1, [sp, #16]
 8005b5c:	2947      	cmp	r1, #71	; 0x47
 8005b5e:	d1c1      	bne.n	8005ae4 <_printf_float+0xd4>
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1bf      	bne.n	8005ae4 <_printf_float+0xd4>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e7bc      	b.n	8005ae2 <_printf_float+0xd2>
 8005b68:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b6c:	d118      	bne.n	8005ba0 <_printf_float+0x190>
 8005b6e:	2900      	cmp	r1, #0
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	dd0b      	ble.n	8005b8c <_printf_float+0x17c>
 8005b74:	6121      	str	r1, [r4, #16]
 8005b76:	b913      	cbnz	r3, 8005b7e <_printf_float+0x16e>
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	07d0      	lsls	r0, r2, #31
 8005b7c:	d502      	bpl.n	8005b84 <_printf_float+0x174>
 8005b7e:	3301      	adds	r3, #1
 8005b80:	440b      	add	r3, r1
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	2300      	movs	r3, #0
 8005b86:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b88:	9304      	str	r3, [sp, #16]
 8005b8a:	e7de      	b.n	8005b4a <_printf_float+0x13a>
 8005b8c:	b913      	cbnz	r3, 8005b94 <_printf_float+0x184>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	07d2      	lsls	r2, r2, #31
 8005b92:	d501      	bpl.n	8005b98 <_printf_float+0x188>
 8005b94:	3302      	adds	r3, #2
 8005b96:	e7f4      	b.n	8005b82 <_printf_float+0x172>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7f2      	b.n	8005b82 <_printf_float+0x172>
 8005b9c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005ba0:	9b08      	ldr	r3, [sp, #32]
 8005ba2:	4299      	cmp	r1, r3
 8005ba4:	db05      	blt.n	8005bb2 <_printf_float+0x1a2>
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	6121      	str	r1, [r4, #16]
 8005baa:	07d8      	lsls	r0, r3, #31
 8005bac:	d5ea      	bpl.n	8005b84 <_printf_float+0x174>
 8005bae:	1c4b      	adds	r3, r1, #1
 8005bb0:	e7e7      	b.n	8005b82 <_printf_float+0x172>
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	bfd4      	ite	le
 8005bb6:	f1c1 0202 	rsble	r2, r1, #2
 8005bba:	2201      	movgt	r2, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	e7e0      	b.n	8005b82 <_printf_float+0x172>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	055a      	lsls	r2, r3, #21
 8005bc4:	d407      	bmi.n	8005bd6 <_printf_float+0x1c6>
 8005bc6:	6923      	ldr	r3, [r4, #16]
 8005bc8:	4642      	mov	r2, r8
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d12a      	bne.n	8005c2a <_printf_float+0x21a>
 8005bd4:	e76a      	b.n	8005aac <_printf_float+0x9c>
 8005bd6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005bda:	f240 80e2 	bls.w	8005da2 <_printf_float+0x392>
 8005bde:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005be2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	d133      	bne.n	8005c54 <_printf_float+0x244>
 8005bec:	4a38      	ldr	r2, [pc, #224]	; (8005cd0 <_printf_float+0x2c0>)
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	47b8      	blx	r7
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	f43f af58 	beq.w	8005aac <_printf_float+0x9c>
 8005bfc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	db02      	blt.n	8005c0a <_printf_float+0x1fa>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	07d8      	lsls	r0, r3, #31
 8005c08:	d50f      	bpl.n	8005c2a <_printf_float+0x21a>
 8005c0a:	4653      	mov	r3, sl
 8005c0c:	465a      	mov	r2, fp
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	f43f af49 	beq.w	8005aac <_printf_float+0x9c>
 8005c1a:	f04f 0800 	mov.w	r8, #0
 8005c1e:	f104 091a 	add.w	r9, r4, #26
 8005c22:	9b08      	ldr	r3, [sp, #32]
 8005c24:	3b01      	subs	r3, #1
 8005c26:	4543      	cmp	r3, r8
 8005c28:	dc09      	bgt.n	8005c3e <_printf_float+0x22e>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	079b      	lsls	r3, r3, #30
 8005c2e:	f100 8108 	bmi.w	8005e42 <_printf_float+0x432>
 8005c32:	68e0      	ldr	r0, [r4, #12]
 8005c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c36:	4298      	cmp	r0, r3
 8005c38:	bfb8      	it	lt
 8005c3a:	4618      	movlt	r0, r3
 8005c3c:	e738      	b.n	8005ab0 <_printf_float+0xa0>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	464a      	mov	r2, r9
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f af2f 	beq.w	8005aac <_printf_float+0x9c>
 8005c4e:	f108 0801 	add.w	r8, r8, #1
 8005c52:	e7e6      	b.n	8005c22 <_printf_float+0x212>
 8005c54:	9b07      	ldr	r3, [sp, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	dc3c      	bgt.n	8005cd4 <_printf_float+0x2c4>
 8005c5a:	4a1d      	ldr	r2, [pc, #116]	; (8005cd0 <_printf_float+0x2c0>)
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f af21 	beq.w	8005aac <_printf_float+0x9c>
 8005c6a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	d102      	bne.n	8005c78 <_printf_float+0x268>
 8005c72:	6823      	ldr	r3, [r4, #0]
 8005c74:	07d9      	lsls	r1, r3, #31
 8005c76:	d5d8      	bpl.n	8005c2a <_printf_float+0x21a>
 8005c78:	4653      	mov	r3, sl
 8005c7a:	465a      	mov	r2, fp
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	47b8      	blx	r7
 8005c82:	3001      	adds	r0, #1
 8005c84:	f43f af12 	beq.w	8005aac <_printf_float+0x9c>
 8005c88:	f04f 0900 	mov.w	r9, #0
 8005c8c:	f104 0a1a 	add.w	sl, r4, #26
 8005c90:	9b07      	ldr	r3, [sp, #28]
 8005c92:	425b      	negs	r3, r3
 8005c94:	454b      	cmp	r3, r9
 8005c96:	dc01      	bgt.n	8005c9c <_printf_float+0x28c>
 8005c98:	9b08      	ldr	r3, [sp, #32]
 8005c9a:	e795      	b.n	8005bc8 <_printf_float+0x1b8>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	4631      	mov	r1, r6
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	47b8      	blx	r7
 8005ca6:	3001      	adds	r0, #1
 8005ca8:	f43f af00 	beq.w	8005aac <_printf_float+0x9c>
 8005cac:	f109 0901 	add.w	r9, r9, #1
 8005cb0:	e7ee      	b.n	8005c90 <_printf_float+0x280>
 8005cb2:	bf00      	nop
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	ffffffff 	.word	0xffffffff
 8005cbc:	7fefffff 	.word	0x7fefffff
 8005cc0:	08008268 	.word	0x08008268
 8005cc4:	0800826c 	.word	0x0800826c
 8005cc8:	08008274 	.word	0x08008274
 8005ccc:	08008270 	.word	0x08008270
 8005cd0:	08008278 	.word	0x08008278
 8005cd4:	9a08      	ldr	r2, [sp, #32]
 8005cd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	bfa8      	it	ge
 8005cdc:	461a      	movge	r2, r3
 8005cde:	2a00      	cmp	r2, #0
 8005ce0:	4691      	mov	r9, r2
 8005ce2:	dc38      	bgt.n	8005d56 <_printf_float+0x346>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9305      	str	r3, [sp, #20]
 8005ce8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cec:	f104 021a 	add.w	r2, r4, #26
 8005cf0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cf2:	9905      	ldr	r1, [sp, #20]
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	eba3 0309 	sub.w	r3, r3, r9
 8005cfa:	428b      	cmp	r3, r1
 8005cfc:	dc33      	bgt.n	8005d66 <_printf_float+0x356>
 8005cfe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	db3c      	blt.n	8005d80 <_printf_float+0x370>
 8005d06:	6823      	ldr	r3, [r4, #0]
 8005d08:	07da      	lsls	r2, r3, #31
 8005d0a:	d439      	bmi.n	8005d80 <_printf_float+0x370>
 8005d0c:	9b08      	ldr	r3, [sp, #32]
 8005d0e:	9a04      	ldr	r2, [sp, #16]
 8005d10:	9907      	ldr	r1, [sp, #28]
 8005d12:	1a9a      	subs	r2, r3, r2
 8005d14:	eba3 0901 	sub.w	r9, r3, r1
 8005d18:	4591      	cmp	r9, r2
 8005d1a:	bfa8      	it	ge
 8005d1c:	4691      	movge	r9, r2
 8005d1e:	f1b9 0f00 	cmp.w	r9, #0
 8005d22:	dc35      	bgt.n	8005d90 <_printf_float+0x380>
 8005d24:	f04f 0800 	mov.w	r8, #0
 8005d28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d2c:	f104 0a1a 	add.w	sl, r4, #26
 8005d30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8005d34:	1a9b      	subs	r3, r3, r2
 8005d36:	eba3 0309 	sub.w	r3, r3, r9
 8005d3a:	4543      	cmp	r3, r8
 8005d3c:	f77f af75 	ble.w	8005c2a <_printf_float+0x21a>
 8005d40:	2301      	movs	r3, #1
 8005d42:	4652      	mov	r2, sl
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f aeae 	beq.w	8005aac <_printf_float+0x9c>
 8005d50:	f108 0801 	add.w	r8, r8, #1
 8005d54:	e7ec      	b.n	8005d30 <_printf_float+0x320>
 8005d56:	4613      	mov	r3, r2
 8005d58:	4631      	mov	r1, r6
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	47b8      	blx	r7
 8005d60:	3001      	adds	r0, #1
 8005d62:	d1bf      	bne.n	8005ce4 <_printf_float+0x2d4>
 8005d64:	e6a2      	b.n	8005aac <_printf_float+0x9c>
 8005d66:	2301      	movs	r3, #1
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	9204      	str	r2, [sp, #16]
 8005d6e:	47b8      	blx	r7
 8005d70:	3001      	adds	r0, #1
 8005d72:	f43f ae9b 	beq.w	8005aac <_printf_float+0x9c>
 8005d76:	9b05      	ldr	r3, [sp, #20]
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	e7b7      	b.n	8005cf0 <_printf_float+0x2e0>
 8005d80:	4653      	mov	r3, sl
 8005d82:	465a      	mov	r2, fp
 8005d84:	4631      	mov	r1, r6
 8005d86:	4628      	mov	r0, r5
 8005d88:	47b8      	blx	r7
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d1be      	bne.n	8005d0c <_printf_float+0x2fc>
 8005d8e:	e68d      	b.n	8005aac <_printf_float+0x9c>
 8005d90:	9a04      	ldr	r2, [sp, #16]
 8005d92:	464b      	mov	r3, r9
 8005d94:	4442      	add	r2, r8
 8005d96:	4631      	mov	r1, r6
 8005d98:	4628      	mov	r0, r5
 8005d9a:	47b8      	blx	r7
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d1c1      	bne.n	8005d24 <_printf_float+0x314>
 8005da0:	e684      	b.n	8005aac <_printf_float+0x9c>
 8005da2:	9a08      	ldr	r2, [sp, #32]
 8005da4:	2a01      	cmp	r2, #1
 8005da6:	dc01      	bgt.n	8005dac <_printf_float+0x39c>
 8005da8:	07db      	lsls	r3, r3, #31
 8005daa:	d537      	bpl.n	8005e1c <_printf_float+0x40c>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4642      	mov	r2, r8
 8005db0:	4631      	mov	r1, r6
 8005db2:	4628      	mov	r0, r5
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f ae78 	beq.w	8005aac <_printf_float+0x9c>
 8005dbc:	4653      	mov	r3, sl
 8005dbe:	465a      	mov	r2, fp
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	47b8      	blx	r7
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	f43f ae70 	beq.w	8005aac <_printf_float+0x9c>
 8005dcc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8005dd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dd8:	d01b      	beq.n	8005e12 <_printf_float+0x402>
 8005dda:	9b08      	ldr	r3, [sp, #32]
 8005ddc:	f108 0201 	add.w	r2, r8, #1
 8005de0:	3b01      	subs	r3, #1
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	d10e      	bne.n	8005e0a <_printf_float+0x3fa>
 8005dec:	e65e      	b.n	8005aac <_printf_float+0x9c>
 8005dee:	2301      	movs	r3, #1
 8005df0:	464a      	mov	r2, r9
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f43f ae57 	beq.w	8005aac <_printf_float+0x9c>
 8005dfe:	f108 0801 	add.w	r8, r8, #1
 8005e02:	9b08      	ldr	r3, [sp, #32]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	4543      	cmp	r3, r8
 8005e08:	dcf1      	bgt.n	8005dee <_printf_float+0x3de>
 8005e0a:	9b04      	ldr	r3, [sp, #16]
 8005e0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e10:	e6db      	b.n	8005bca <_printf_float+0x1ba>
 8005e12:	f04f 0800 	mov.w	r8, #0
 8005e16:	f104 091a 	add.w	r9, r4, #26
 8005e1a:	e7f2      	b.n	8005e02 <_printf_float+0x3f2>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	4642      	mov	r2, r8
 8005e20:	e7df      	b.n	8005de2 <_printf_float+0x3d2>
 8005e22:	2301      	movs	r3, #1
 8005e24:	464a      	mov	r2, r9
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	f43f ae3d 	beq.w	8005aac <_printf_float+0x9c>
 8005e32:	f108 0801 	add.w	r8, r8, #1
 8005e36:	68e3      	ldr	r3, [r4, #12]
 8005e38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e3a:	1a5b      	subs	r3, r3, r1
 8005e3c:	4543      	cmp	r3, r8
 8005e3e:	dcf0      	bgt.n	8005e22 <_printf_float+0x412>
 8005e40:	e6f7      	b.n	8005c32 <_printf_float+0x222>
 8005e42:	f04f 0800 	mov.w	r8, #0
 8005e46:	f104 0919 	add.w	r9, r4, #25
 8005e4a:	e7f4      	b.n	8005e36 <_printf_float+0x426>

08005e4c <_printf_common>:
 8005e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	4616      	mov	r6, r2
 8005e52:	4699      	mov	r9, r3
 8005e54:	688a      	ldr	r2, [r1, #8]
 8005e56:	690b      	ldr	r3, [r1, #16]
 8005e58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bfb8      	it	lt
 8005e60:	4613      	movlt	r3, r2
 8005e62:	6033      	str	r3, [r6, #0]
 8005e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e68:	4607      	mov	r7, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	b10a      	cbz	r2, 8005e72 <_printf_common+0x26>
 8005e6e:	3301      	adds	r3, #1
 8005e70:	6033      	str	r3, [r6, #0]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	0699      	lsls	r1, r3, #26
 8005e76:	bf42      	ittt	mi
 8005e78:	6833      	ldrmi	r3, [r6, #0]
 8005e7a:	3302      	addmi	r3, #2
 8005e7c:	6033      	strmi	r3, [r6, #0]
 8005e7e:	6825      	ldr	r5, [r4, #0]
 8005e80:	f015 0506 	ands.w	r5, r5, #6
 8005e84:	d106      	bne.n	8005e94 <_printf_common+0x48>
 8005e86:	f104 0a19 	add.w	sl, r4, #25
 8005e8a:	68e3      	ldr	r3, [r4, #12]
 8005e8c:	6832      	ldr	r2, [r6, #0]
 8005e8e:	1a9b      	subs	r3, r3, r2
 8005e90:	42ab      	cmp	r3, r5
 8005e92:	dc26      	bgt.n	8005ee2 <_printf_common+0x96>
 8005e94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e98:	1e13      	subs	r3, r2, #0
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	bf18      	it	ne
 8005e9e:	2301      	movne	r3, #1
 8005ea0:	0692      	lsls	r2, r2, #26
 8005ea2:	d42b      	bmi.n	8005efc <_printf_common+0xb0>
 8005ea4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	4638      	mov	r0, r7
 8005eac:	47c0      	blx	r8
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d01e      	beq.n	8005ef0 <_printf_common+0xa4>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	68e5      	ldr	r5, [r4, #12]
 8005eb6:	6832      	ldr	r2, [r6, #0]
 8005eb8:	f003 0306 	and.w	r3, r3, #6
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	bf08      	it	eq
 8005ec0:	1aad      	subeq	r5, r5, r2
 8005ec2:	68a3      	ldr	r3, [r4, #8]
 8005ec4:	6922      	ldr	r2, [r4, #16]
 8005ec6:	bf0c      	ite	eq
 8005ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ecc:	2500      	movne	r5, #0
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	bfc4      	itt	gt
 8005ed2:	1a9b      	subgt	r3, r3, r2
 8005ed4:	18ed      	addgt	r5, r5, r3
 8005ed6:	2600      	movs	r6, #0
 8005ed8:	341a      	adds	r4, #26
 8005eda:	42b5      	cmp	r5, r6
 8005edc:	d11a      	bne.n	8005f14 <_printf_common+0xc8>
 8005ede:	2000      	movs	r0, #0
 8005ee0:	e008      	b.n	8005ef4 <_printf_common+0xa8>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4652      	mov	r2, sl
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	4638      	mov	r0, r7
 8005eea:	47c0      	blx	r8
 8005eec:	3001      	adds	r0, #1
 8005eee:	d103      	bne.n	8005ef8 <_printf_common+0xac>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ef8:	3501      	adds	r5, #1
 8005efa:	e7c6      	b.n	8005e8a <_printf_common+0x3e>
 8005efc:	18e1      	adds	r1, r4, r3
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	2030      	movs	r0, #48	; 0x30
 8005f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f06:	4422      	add	r2, r4
 8005f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f10:	3302      	adds	r3, #2
 8005f12:	e7c7      	b.n	8005ea4 <_printf_common+0x58>
 8005f14:	2301      	movs	r3, #1
 8005f16:	4622      	mov	r2, r4
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	47c0      	blx	r8
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d0e6      	beq.n	8005ef0 <_printf_common+0xa4>
 8005f22:	3601      	adds	r6, #1
 8005f24:	e7d9      	b.n	8005eda <_printf_common+0x8e>
	...

08005f28 <_printf_i>:
 8005f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f2c:	7e0f      	ldrb	r7, [r1, #24]
 8005f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f30:	2f78      	cmp	r7, #120	; 0x78
 8005f32:	4691      	mov	r9, r2
 8005f34:	4680      	mov	r8, r0
 8005f36:	460c      	mov	r4, r1
 8005f38:	469a      	mov	sl, r3
 8005f3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f3e:	d807      	bhi.n	8005f50 <_printf_i+0x28>
 8005f40:	2f62      	cmp	r7, #98	; 0x62
 8005f42:	d80a      	bhi.n	8005f5a <_printf_i+0x32>
 8005f44:	2f00      	cmp	r7, #0
 8005f46:	f000 80d8 	beq.w	80060fa <_printf_i+0x1d2>
 8005f4a:	2f58      	cmp	r7, #88	; 0x58
 8005f4c:	f000 80a3 	beq.w	8006096 <_printf_i+0x16e>
 8005f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f58:	e03a      	b.n	8005fd0 <_printf_i+0xa8>
 8005f5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f5e:	2b15      	cmp	r3, #21
 8005f60:	d8f6      	bhi.n	8005f50 <_printf_i+0x28>
 8005f62:	a101      	add	r1, pc, #4	; (adr r1, 8005f68 <_printf_i+0x40>)
 8005f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f68:	08005fc1 	.word	0x08005fc1
 8005f6c:	08005fd5 	.word	0x08005fd5
 8005f70:	08005f51 	.word	0x08005f51
 8005f74:	08005f51 	.word	0x08005f51
 8005f78:	08005f51 	.word	0x08005f51
 8005f7c:	08005f51 	.word	0x08005f51
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	08005f51 	.word	0x08005f51
 8005f88:	08005f51 	.word	0x08005f51
 8005f8c:	08005f51 	.word	0x08005f51
 8005f90:	08005f51 	.word	0x08005f51
 8005f94:	080060e1 	.word	0x080060e1
 8005f98:	08006005 	.word	0x08006005
 8005f9c:	080060c3 	.word	0x080060c3
 8005fa0:	08005f51 	.word	0x08005f51
 8005fa4:	08005f51 	.word	0x08005f51
 8005fa8:	08006103 	.word	0x08006103
 8005fac:	08005f51 	.word	0x08005f51
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08005f51 	.word	0x08005f51
 8005fb8:	08005f51 	.word	0x08005f51
 8005fbc:	080060cb 	.word	0x080060cb
 8005fc0:	682b      	ldr	r3, [r5, #0]
 8005fc2:	1d1a      	adds	r2, r3, #4
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	602a      	str	r2, [r5, #0]
 8005fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0a3      	b.n	800611c <_printf_i+0x1f4>
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	6829      	ldr	r1, [r5, #0]
 8005fd8:	0606      	lsls	r6, r0, #24
 8005fda:	f101 0304 	add.w	r3, r1, #4
 8005fde:	d50a      	bpl.n	8005ff6 <_printf_i+0xce>
 8005fe0:	680e      	ldr	r6, [r1, #0]
 8005fe2:	602b      	str	r3, [r5, #0]
 8005fe4:	2e00      	cmp	r6, #0
 8005fe6:	da03      	bge.n	8005ff0 <_printf_i+0xc8>
 8005fe8:	232d      	movs	r3, #45	; 0x2d
 8005fea:	4276      	negs	r6, r6
 8005fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff0:	485e      	ldr	r0, [pc, #376]	; (800616c <_printf_i+0x244>)
 8005ff2:	230a      	movs	r3, #10
 8005ff4:	e019      	b.n	800602a <_printf_i+0x102>
 8005ff6:	680e      	ldr	r6, [r1, #0]
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ffe:	bf18      	it	ne
 8006000:	b236      	sxthne	r6, r6
 8006002:	e7ef      	b.n	8005fe4 <_printf_i+0xbc>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	6029      	str	r1, [r5, #0]
 800600c:	0601      	lsls	r1, r0, #24
 800600e:	d501      	bpl.n	8006014 <_printf_i+0xec>
 8006010:	681e      	ldr	r6, [r3, #0]
 8006012:	e002      	b.n	800601a <_printf_i+0xf2>
 8006014:	0646      	lsls	r6, r0, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0xe8>
 8006018:	881e      	ldrh	r6, [r3, #0]
 800601a:	4854      	ldr	r0, [pc, #336]	; (800616c <_printf_i+0x244>)
 800601c:	2f6f      	cmp	r7, #111	; 0x6f
 800601e:	bf0c      	ite	eq
 8006020:	2308      	moveq	r3, #8
 8006022:	230a      	movne	r3, #10
 8006024:	2100      	movs	r1, #0
 8006026:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800602a:	6865      	ldr	r5, [r4, #4]
 800602c:	60a5      	str	r5, [r4, #8]
 800602e:	2d00      	cmp	r5, #0
 8006030:	bfa2      	ittt	ge
 8006032:	6821      	ldrge	r1, [r4, #0]
 8006034:	f021 0104 	bicge.w	r1, r1, #4
 8006038:	6021      	strge	r1, [r4, #0]
 800603a:	b90e      	cbnz	r6, 8006040 <_printf_i+0x118>
 800603c:	2d00      	cmp	r5, #0
 800603e:	d04d      	beq.n	80060dc <_printf_i+0x1b4>
 8006040:	4615      	mov	r5, r2
 8006042:	fbb6 f1f3 	udiv	r1, r6, r3
 8006046:	fb03 6711 	mls	r7, r3, r1, r6
 800604a:	5dc7      	ldrb	r7, [r0, r7]
 800604c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006050:	4637      	mov	r7, r6
 8006052:	42bb      	cmp	r3, r7
 8006054:	460e      	mov	r6, r1
 8006056:	d9f4      	bls.n	8006042 <_printf_i+0x11a>
 8006058:	2b08      	cmp	r3, #8
 800605a:	d10b      	bne.n	8006074 <_printf_i+0x14c>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	07de      	lsls	r6, r3, #31
 8006060:	d508      	bpl.n	8006074 <_printf_i+0x14c>
 8006062:	6923      	ldr	r3, [r4, #16]
 8006064:	6861      	ldr	r1, [r4, #4]
 8006066:	4299      	cmp	r1, r3
 8006068:	bfde      	ittt	le
 800606a:	2330      	movle	r3, #48	; 0x30
 800606c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006070:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006074:	1b52      	subs	r2, r2, r5
 8006076:	6122      	str	r2, [r4, #16]
 8006078:	f8cd a000 	str.w	sl, [sp]
 800607c:	464b      	mov	r3, r9
 800607e:	aa03      	add	r2, sp, #12
 8006080:	4621      	mov	r1, r4
 8006082:	4640      	mov	r0, r8
 8006084:	f7ff fee2 	bl	8005e4c <_printf_common>
 8006088:	3001      	adds	r0, #1
 800608a:	d14c      	bne.n	8006126 <_printf_i+0x1fe>
 800608c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006090:	b004      	add	sp, #16
 8006092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006096:	4835      	ldr	r0, [pc, #212]	; (800616c <_printf_i+0x244>)
 8006098:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800609c:	6829      	ldr	r1, [r5, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80060a4:	6029      	str	r1, [r5, #0]
 80060a6:	061d      	lsls	r5, r3, #24
 80060a8:	d514      	bpl.n	80060d4 <_printf_i+0x1ac>
 80060aa:	07df      	lsls	r7, r3, #31
 80060ac:	bf44      	itt	mi
 80060ae:	f043 0320 	orrmi.w	r3, r3, #32
 80060b2:	6023      	strmi	r3, [r4, #0]
 80060b4:	b91e      	cbnz	r6, 80060be <_printf_i+0x196>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	f023 0320 	bic.w	r3, r3, #32
 80060bc:	6023      	str	r3, [r4, #0]
 80060be:	2310      	movs	r3, #16
 80060c0:	e7b0      	b.n	8006024 <_printf_i+0xfc>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f043 0320 	orr.w	r3, r3, #32
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	2378      	movs	r3, #120	; 0x78
 80060cc:	4828      	ldr	r0, [pc, #160]	; (8006170 <_printf_i+0x248>)
 80060ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060d2:	e7e3      	b.n	800609c <_printf_i+0x174>
 80060d4:	0659      	lsls	r1, r3, #25
 80060d6:	bf48      	it	mi
 80060d8:	b2b6      	uxthmi	r6, r6
 80060da:	e7e6      	b.n	80060aa <_printf_i+0x182>
 80060dc:	4615      	mov	r5, r2
 80060de:	e7bb      	b.n	8006058 <_printf_i+0x130>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	6826      	ldr	r6, [r4, #0]
 80060e4:	6961      	ldr	r1, [r4, #20]
 80060e6:	1d18      	adds	r0, r3, #4
 80060e8:	6028      	str	r0, [r5, #0]
 80060ea:	0635      	lsls	r5, r6, #24
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	d501      	bpl.n	80060f4 <_printf_i+0x1cc>
 80060f0:	6019      	str	r1, [r3, #0]
 80060f2:	e002      	b.n	80060fa <_printf_i+0x1d2>
 80060f4:	0670      	lsls	r0, r6, #25
 80060f6:	d5fb      	bpl.n	80060f0 <_printf_i+0x1c8>
 80060f8:	8019      	strh	r1, [r3, #0]
 80060fa:	2300      	movs	r3, #0
 80060fc:	6123      	str	r3, [r4, #16]
 80060fe:	4615      	mov	r5, r2
 8006100:	e7ba      	b.n	8006078 <_printf_i+0x150>
 8006102:	682b      	ldr	r3, [r5, #0]
 8006104:	1d1a      	adds	r2, r3, #4
 8006106:	602a      	str	r2, [r5, #0]
 8006108:	681d      	ldr	r5, [r3, #0]
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	2100      	movs	r1, #0
 800610e:	4628      	mov	r0, r5
 8006110:	f7fa f8f6 	bl	8000300 <memchr>
 8006114:	b108      	cbz	r0, 800611a <_printf_i+0x1f2>
 8006116:	1b40      	subs	r0, r0, r5
 8006118:	6060      	str	r0, [r4, #4]
 800611a:	6863      	ldr	r3, [r4, #4]
 800611c:	6123      	str	r3, [r4, #16]
 800611e:	2300      	movs	r3, #0
 8006120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006124:	e7a8      	b.n	8006078 <_printf_i+0x150>
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	462a      	mov	r2, r5
 800612a:	4649      	mov	r1, r9
 800612c:	4640      	mov	r0, r8
 800612e:	47d0      	blx	sl
 8006130:	3001      	adds	r0, #1
 8006132:	d0ab      	beq.n	800608c <_printf_i+0x164>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	079b      	lsls	r3, r3, #30
 8006138:	d413      	bmi.n	8006162 <_printf_i+0x23a>
 800613a:	68e0      	ldr	r0, [r4, #12]
 800613c:	9b03      	ldr	r3, [sp, #12]
 800613e:	4298      	cmp	r0, r3
 8006140:	bfb8      	it	lt
 8006142:	4618      	movlt	r0, r3
 8006144:	e7a4      	b.n	8006090 <_printf_i+0x168>
 8006146:	2301      	movs	r3, #1
 8006148:	4632      	mov	r2, r6
 800614a:	4649      	mov	r1, r9
 800614c:	4640      	mov	r0, r8
 800614e:	47d0      	blx	sl
 8006150:	3001      	adds	r0, #1
 8006152:	d09b      	beq.n	800608c <_printf_i+0x164>
 8006154:	3501      	adds	r5, #1
 8006156:	68e3      	ldr	r3, [r4, #12]
 8006158:	9903      	ldr	r1, [sp, #12]
 800615a:	1a5b      	subs	r3, r3, r1
 800615c:	42ab      	cmp	r3, r5
 800615e:	dcf2      	bgt.n	8006146 <_printf_i+0x21e>
 8006160:	e7eb      	b.n	800613a <_printf_i+0x212>
 8006162:	2500      	movs	r5, #0
 8006164:	f104 0619 	add.w	r6, r4, #25
 8006168:	e7f5      	b.n	8006156 <_printf_i+0x22e>
 800616a:	bf00      	nop
 800616c:	0800827a 	.word	0x0800827a
 8006170:	0800828b 	.word	0x0800828b

08006174 <iprintf>:
 8006174:	b40f      	push	{r0, r1, r2, r3}
 8006176:	4b0a      	ldr	r3, [pc, #40]	; (80061a0 <iprintf+0x2c>)
 8006178:	b513      	push	{r0, r1, r4, lr}
 800617a:	681c      	ldr	r4, [r3, #0]
 800617c:	b124      	cbz	r4, 8006188 <iprintf+0x14>
 800617e:	69a3      	ldr	r3, [r4, #24]
 8006180:	b913      	cbnz	r3, 8006188 <iprintf+0x14>
 8006182:	4620      	mov	r0, r4
 8006184:	f000 fe62 	bl	8006e4c <__sinit>
 8006188:	ab05      	add	r3, sp, #20
 800618a:	9a04      	ldr	r2, [sp, #16]
 800618c:	68a1      	ldr	r1, [r4, #8]
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	4620      	mov	r0, r4
 8006192:	f001 fbbb 	bl	800790c <_vfiprintf_r>
 8006196:	b002      	add	sp, #8
 8006198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800619c:	b004      	add	sp, #16
 800619e:	4770      	bx	lr
 80061a0:	24000010 	.word	0x24000010

080061a4 <quorem>:
 80061a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a8:	6903      	ldr	r3, [r0, #16]
 80061aa:	690c      	ldr	r4, [r1, #16]
 80061ac:	42a3      	cmp	r3, r4
 80061ae:	4607      	mov	r7, r0
 80061b0:	f2c0 8081 	blt.w	80062b6 <quorem+0x112>
 80061b4:	3c01      	subs	r4, #1
 80061b6:	f101 0814 	add.w	r8, r1, #20
 80061ba:	f100 0514 	add.w	r5, r0, #20
 80061be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061cc:	3301      	adds	r3, #1
 80061ce:	429a      	cmp	r2, r3
 80061d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80061dc:	d331      	bcc.n	8006242 <quorem+0x9e>
 80061de:	f04f 0e00 	mov.w	lr, #0
 80061e2:	4640      	mov	r0, r8
 80061e4:	46ac      	mov	ip, r5
 80061e6:	46f2      	mov	sl, lr
 80061e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80061ec:	b293      	uxth	r3, r2
 80061ee:	fb06 e303 	mla	r3, r6, r3, lr
 80061f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	ebaa 0303 	sub.w	r3, sl, r3
 80061fc:	f8dc a000 	ldr.w	sl, [ip]
 8006200:	0c12      	lsrs	r2, r2, #16
 8006202:	fa13 f38a 	uxtah	r3, r3, sl
 8006206:	fb06 e202 	mla	r2, r6, r2, lr
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	9b00      	ldr	r3, [sp, #0]
 800620e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006212:	b292      	uxth	r2, r2
 8006214:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800621c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006220:	4581      	cmp	r9, r0
 8006222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006226:	f84c 3b04 	str.w	r3, [ip], #4
 800622a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800622e:	d2db      	bcs.n	80061e8 <quorem+0x44>
 8006230:	f855 300b 	ldr.w	r3, [r5, fp]
 8006234:	b92b      	cbnz	r3, 8006242 <quorem+0x9e>
 8006236:	9b01      	ldr	r3, [sp, #4]
 8006238:	3b04      	subs	r3, #4
 800623a:	429d      	cmp	r5, r3
 800623c:	461a      	mov	r2, r3
 800623e:	d32e      	bcc.n	800629e <quorem+0xfa>
 8006240:	613c      	str	r4, [r7, #16]
 8006242:	4638      	mov	r0, r7
 8006244:	f001 f940 	bl	80074c8 <__mcmp>
 8006248:	2800      	cmp	r0, #0
 800624a:	db24      	blt.n	8006296 <quorem+0xf2>
 800624c:	3601      	adds	r6, #1
 800624e:	4628      	mov	r0, r5
 8006250:	f04f 0c00 	mov.w	ip, #0
 8006254:	f858 2b04 	ldr.w	r2, [r8], #4
 8006258:	f8d0 e000 	ldr.w	lr, [r0]
 800625c:	b293      	uxth	r3, r2
 800625e:	ebac 0303 	sub.w	r3, ip, r3
 8006262:	0c12      	lsrs	r2, r2, #16
 8006264:	fa13 f38e 	uxtah	r3, r3, lr
 8006268:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800626c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006270:	b29b      	uxth	r3, r3
 8006272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006276:	45c1      	cmp	r9, r8
 8006278:	f840 3b04 	str.w	r3, [r0], #4
 800627c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006280:	d2e8      	bcs.n	8006254 <quorem+0xb0>
 8006282:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800628a:	b922      	cbnz	r2, 8006296 <quorem+0xf2>
 800628c:	3b04      	subs	r3, #4
 800628e:	429d      	cmp	r5, r3
 8006290:	461a      	mov	r2, r3
 8006292:	d30a      	bcc.n	80062aa <quorem+0x106>
 8006294:	613c      	str	r4, [r7, #16]
 8006296:	4630      	mov	r0, r6
 8006298:	b003      	add	sp, #12
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	6812      	ldr	r2, [r2, #0]
 80062a0:	3b04      	subs	r3, #4
 80062a2:	2a00      	cmp	r2, #0
 80062a4:	d1cc      	bne.n	8006240 <quorem+0x9c>
 80062a6:	3c01      	subs	r4, #1
 80062a8:	e7c7      	b.n	800623a <quorem+0x96>
 80062aa:	6812      	ldr	r2, [r2, #0]
 80062ac:	3b04      	subs	r3, #4
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	d1f0      	bne.n	8006294 <quorem+0xf0>
 80062b2:	3c01      	subs	r4, #1
 80062b4:	e7eb      	b.n	800628e <quorem+0xea>
 80062b6:	2000      	movs	r0, #0
 80062b8:	e7ee      	b.n	8006298 <quorem+0xf4>
 80062ba:	0000      	movs	r0, r0
 80062bc:	0000      	movs	r0, r0
	...

080062c0 <_dtoa_r>:
 80062c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062c4:	ed2d 8b02 	vpush	{d8}
 80062c8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80062ca:	b091      	sub	sp, #68	; 0x44
 80062cc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80062d0:	ec59 8b10 	vmov	r8, r9, d0
 80062d4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80062d6:	9106      	str	r1, [sp, #24]
 80062d8:	4606      	mov	r6, r0
 80062da:	9208      	str	r2, [sp, #32]
 80062dc:	930c      	str	r3, [sp, #48]	; 0x30
 80062de:	b975      	cbnz	r5, 80062fe <_dtoa_r+0x3e>
 80062e0:	2010      	movs	r0, #16
 80062e2:	f000 fe59 	bl	8006f98 <malloc>
 80062e6:	4602      	mov	r2, r0
 80062e8:	6270      	str	r0, [r6, #36]	; 0x24
 80062ea:	b920      	cbnz	r0, 80062f6 <_dtoa_r+0x36>
 80062ec:	4baa      	ldr	r3, [pc, #680]	; (8006598 <_dtoa_r+0x2d8>)
 80062ee:	21ea      	movs	r1, #234	; 0xea
 80062f0:	48aa      	ldr	r0, [pc, #680]	; (800659c <_dtoa_r+0x2dc>)
 80062f2:	f001 fd61 	bl	8007db8 <__assert_func>
 80062f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80062fa:	6005      	str	r5, [r0, #0]
 80062fc:	60c5      	str	r5, [r0, #12]
 80062fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006300:	6819      	ldr	r1, [r3, #0]
 8006302:	b151      	cbz	r1, 800631a <_dtoa_r+0x5a>
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	604a      	str	r2, [r1, #4]
 8006308:	2301      	movs	r3, #1
 800630a:	4093      	lsls	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
 800630e:	4630      	mov	r0, r6
 8006310:	f000 fe98 	bl	8007044 <_Bfree>
 8006314:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006316:	2200      	movs	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	f1b9 0300 	subs.w	r3, r9, #0
 800631e:	bfbb      	ittet	lt
 8006320:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006324:	9303      	strlt	r3, [sp, #12]
 8006326:	2300      	movge	r3, #0
 8006328:	2201      	movlt	r2, #1
 800632a:	bfac      	ite	ge
 800632c:	6023      	strge	r3, [r4, #0]
 800632e:	6022      	strlt	r2, [r4, #0]
 8006330:	4b9b      	ldr	r3, [pc, #620]	; (80065a0 <_dtoa_r+0x2e0>)
 8006332:	9c03      	ldr	r4, [sp, #12]
 8006334:	43a3      	bics	r3, r4
 8006336:	d11c      	bne.n	8006372 <_dtoa_r+0xb2>
 8006338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800633a:	f242 730f 	movw	r3, #9999	; 0x270f
 800633e:	6013      	str	r3, [r2, #0]
 8006340:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006344:	ea53 0308 	orrs.w	r3, r3, r8
 8006348:	f000 84fd 	beq.w	8006d46 <_dtoa_r+0xa86>
 800634c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800634e:	b963      	cbnz	r3, 800636a <_dtoa_r+0xaa>
 8006350:	4b94      	ldr	r3, [pc, #592]	; (80065a4 <_dtoa_r+0x2e4>)
 8006352:	e01f      	b.n	8006394 <_dtoa_r+0xd4>
 8006354:	4b94      	ldr	r3, [pc, #592]	; (80065a8 <_dtoa_r+0x2e8>)
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	3308      	adds	r3, #8
 800635a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	9801      	ldr	r0, [sp, #4]
 8006360:	b011      	add	sp, #68	; 0x44
 8006362:	ecbd 8b02 	vpop	{d8}
 8006366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800636a:	4b8e      	ldr	r3, [pc, #568]	; (80065a4 <_dtoa_r+0x2e4>)
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	3303      	adds	r3, #3
 8006370:	e7f3      	b.n	800635a <_dtoa_r+0x9a>
 8006372:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006376:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800637a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637e:	d10b      	bne.n	8006398 <_dtoa_r+0xd8>
 8006380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006382:	2301      	movs	r3, #1
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 84d9 	beq.w	8006d40 <_dtoa_r+0xa80>
 800638e:	4887      	ldr	r0, [pc, #540]	; (80065ac <_dtoa_r+0x2ec>)
 8006390:	6018      	str	r0, [r3, #0]
 8006392:	1e43      	subs	r3, r0, #1
 8006394:	9301      	str	r3, [sp, #4]
 8006396:	e7e2      	b.n	800635e <_dtoa_r+0x9e>
 8006398:	a90f      	add	r1, sp, #60	; 0x3c
 800639a:	aa0e      	add	r2, sp, #56	; 0x38
 800639c:	4630      	mov	r0, r6
 800639e:	eeb0 0b48 	vmov.f64	d0, d8
 80063a2:	f001 f937 	bl	8007614 <__d2b>
 80063a6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80063aa:	4605      	mov	r5, r0
 80063ac:	980e      	ldr	r0, [sp, #56]	; 0x38
 80063ae:	2900      	cmp	r1, #0
 80063b0:	d046      	beq.n	8006440 <_dtoa_r+0x180>
 80063b2:	ee18 4a90 	vmov	r4, s17
 80063b6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063ba:	ec53 2b18 	vmov	r2, r3, d8
 80063be:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80063c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80063ca:	2400      	movs	r4, #0
 80063cc:	ec43 2b16 	vmov	d6, r2, r3
 80063d0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80063d4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006580 <_dtoa_r+0x2c0>
 80063d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80063dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8006588 <_dtoa_r+0x2c8>
 80063e0:	eea7 6b05 	vfma.f64	d6, d7, d5
 80063e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8006590 <_dtoa_r+0x2d0>
 80063e8:	ee07 1a90 	vmov	s15, r1
 80063ec:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80063f0:	eeb0 7b46 	vmov.f64	d7, d6
 80063f4:	eea4 7b05 	vfma.f64	d7, d4, d5
 80063f8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80063fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006404:	ee16 ba90 	vmov	fp, s13
 8006408:	940a      	str	r4, [sp, #40]	; 0x28
 800640a:	d508      	bpl.n	800641e <_dtoa_r+0x15e>
 800640c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006410:	eeb4 6b47 	vcmp.f64	d6, d7
 8006414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006418:	bf18      	it	ne
 800641a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800641e:	f1bb 0f16 	cmp.w	fp, #22
 8006422:	d82f      	bhi.n	8006484 <_dtoa_r+0x1c4>
 8006424:	4b62      	ldr	r3, [pc, #392]	; (80065b0 <_dtoa_r+0x2f0>)
 8006426:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800642a:	ed93 7b00 	vldr	d7, [r3]
 800642e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006436:	d501      	bpl.n	800643c <_dtoa_r+0x17c>
 8006438:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800643c:	2300      	movs	r3, #0
 800643e:	e022      	b.n	8006486 <_dtoa_r+0x1c6>
 8006440:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006442:	4401      	add	r1, r0
 8006444:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8006448:	2b20      	cmp	r3, #32
 800644a:	bfc1      	itttt	gt
 800644c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006450:	fa04 f303 	lslgt.w	r3, r4, r3
 8006454:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8006458:	fa28 f804 	lsrgt.w	r8, r8, r4
 800645c:	bfd6      	itet	le
 800645e:	f1c3 0320 	rsble	r3, r3, #32
 8006462:	ea43 0808 	orrgt.w	r8, r3, r8
 8006466:	fa08 f803 	lslle.w	r8, r8, r3
 800646a:	ee07 8a90 	vmov	s15, r8
 800646e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006472:	3901      	subs	r1, #1
 8006474:	ee17 4a90 	vmov	r4, s15
 8006478:	ec53 2b17 	vmov	r2, r3, d7
 800647c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8006480:	2401      	movs	r4, #1
 8006482:	e7a3      	b.n	80063cc <_dtoa_r+0x10c>
 8006484:	2301      	movs	r3, #1
 8006486:	930b      	str	r3, [sp, #44]	; 0x2c
 8006488:	1a43      	subs	r3, r0, r1
 800648a:	1e5a      	subs	r2, r3, #1
 800648c:	bf45      	ittet	mi
 800648e:	f1c3 0301 	rsbmi	r3, r3, #1
 8006492:	9304      	strmi	r3, [sp, #16]
 8006494:	2300      	movpl	r3, #0
 8006496:	2300      	movmi	r3, #0
 8006498:	9205      	str	r2, [sp, #20]
 800649a:	bf54      	ite	pl
 800649c:	9304      	strpl	r3, [sp, #16]
 800649e:	9305      	strmi	r3, [sp, #20]
 80064a0:	f1bb 0f00 	cmp.w	fp, #0
 80064a4:	db18      	blt.n	80064d8 <_dtoa_r+0x218>
 80064a6:	9b05      	ldr	r3, [sp, #20]
 80064a8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80064ac:	445b      	add	r3, fp
 80064ae:	9305      	str	r3, [sp, #20]
 80064b0:	2300      	movs	r3, #0
 80064b2:	9a06      	ldr	r2, [sp, #24]
 80064b4:	2a09      	cmp	r2, #9
 80064b6:	d849      	bhi.n	800654c <_dtoa_r+0x28c>
 80064b8:	2a05      	cmp	r2, #5
 80064ba:	bfc4      	itt	gt
 80064bc:	3a04      	subgt	r2, #4
 80064be:	9206      	strgt	r2, [sp, #24]
 80064c0:	9a06      	ldr	r2, [sp, #24]
 80064c2:	f1a2 0202 	sub.w	r2, r2, #2
 80064c6:	bfcc      	ite	gt
 80064c8:	2400      	movgt	r4, #0
 80064ca:	2401      	movle	r4, #1
 80064cc:	2a03      	cmp	r2, #3
 80064ce:	d848      	bhi.n	8006562 <_dtoa_r+0x2a2>
 80064d0:	e8df f002 	tbb	[pc, r2]
 80064d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80064d8:	9b04      	ldr	r3, [sp, #16]
 80064da:	2200      	movs	r2, #0
 80064dc:	eba3 030b 	sub.w	r3, r3, fp
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	9209      	str	r2, [sp, #36]	; 0x24
 80064e4:	f1cb 0300 	rsb	r3, fp, #0
 80064e8:	e7e3      	b.n	80064b2 <_dtoa_r+0x1f2>
 80064ea:	2200      	movs	r2, #0
 80064ec:	9207      	str	r2, [sp, #28]
 80064ee:	9a08      	ldr	r2, [sp, #32]
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	dc39      	bgt.n	8006568 <_dtoa_r+0x2a8>
 80064f4:	f04f 0a01 	mov.w	sl, #1
 80064f8:	46d1      	mov	r9, sl
 80064fa:	4652      	mov	r2, sl
 80064fc:	f8cd a020 	str.w	sl, [sp, #32]
 8006500:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8006502:	2100      	movs	r1, #0
 8006504:	6079      	str	r1, [r7, #4]
 8006506:	2004      	movs	r0, #4
 8006508:	f100 0c14 	add.w	ip, r0, #20
 800650c:	4594      	cmp	ip, r2
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	d92f      	bls.n	8006572 <_dtoa_r+0x2b2>
 8006512:	4630      	mov	r0, r6
 8006514:	930d      	str	r3, [sp, #52]	; 0x34
 8006516:	f000 fd55 	bl	8006fc4 <_Balloc>
 800651a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800651c:	9001      	str	r0, [sp, #4]
 800651e:	4602      	mov	r2, r0
 8006520:	2800      	cmp	r0, #0
 8006522:	d149      	bne.n	80065b8 <_dtoa_r+0x2f8>
 8006524:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <_dtoa_r+0x2f4>)
 8006526:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800652a:	e6e1      	b.n	80062f0 <_dtoa_r+0x30>
 800652c:	2201      	movs	r2, #1
 800652e:	e7dd      	b.n	80064ec <_dtoa_r+0x22c>
 8006530:	2200      	movs	r2, #0
 8006532:	9207      	str	r2, [sp, #28]
 8006534:	9a08      	ldr	r2, [sp, #32]
 8006536:	eb0b 0a02 	add.w	sl, fp, r2
 800653a:	f10a 0901 	add.w	r9, sl, #1
 800653e:	464a      	mov	r2, r9
 8006540:	2a01      	cmp	r2, #1
 8006542:	bfb8      	it	lt
 8006544:	2201      	movlt	r2, #1
 8006546:	e7db      	b.n	8006500 <_dtoa_r+0x240>
 8006548:	2201      	movs	r2, #1
 800654a:	e7f2      	b.n	8006532 <_dtoa_r+0x272>
 800654c:	2401      	movs	r4, #1
 800654e:	2200      	movs	r2, #0
 8006550:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8006554:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006558:	2100      	movs	r1, #0
 800655a:	46d1      	mov	r9, sl
 800655c:	2212      	movs	r2, #18
 800655e:	9108      	str	r1, [sp, #32]
 8006560:	e7ce      	b.n	8006500 <_dtoa_r+0x240>
 8006562:	2201      	movs	r2, #1
 8006564:	9207      	str	r2, [sp, #28]
 8006566:	e7f5      	b.n	8006554 <_dtoa_r+0x294>
 8006568:	f8dd a020 	ldr.w	sl, [sp, #32]
 800656c:	46d1      	mov	r9, sl
 800656e:	4652      	mov	r2, sl
 8006570:	e7c6      	b.n	8006500 <_dtoa_r+0x240>
 8006572:	3101      	adds	r1, #1
 8006574:	6079      	str	r1, [r7, #4]
 8006576:	0040      	lsls	r0, r0, #1
 8006578:	e7c6      	b.n	8006508 <_dtoa_r+0x248>
 800657a:	bf00      	nop
 800657c:	f3af 8000 	nop.w
 8006580:	636f4361 	.word	0x636f4361
 8006584:	3fd287a7 	.word	0x3fd287a7
 8006588:	8b60c8b3 	.word	0x8b60c8b3
 800658c:	3fc68a28 	.word	0x3fc68a28
 8006590:	509f79fb 	.word	0x509f79fb
 8006594:	3fd34413 	.word	0x3fd34413
 8006598:	080082a9 	.word	0x080082a9
 800659c:	080082c0 	.word	0x080082c0
 80065a0:	7ff00000 	.word	0x7ff00000
 80065a4:	080082a5 	.word	0x080082a5
 80065a8:	0800829c 	.word	0x0800829c
 80065ac:	08008279 	.word	0x08008279
 80065b0:	08008410 	.word	0x08008410
 80065b4:	0800831b 	.word	0x0800831b
 80065b8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80065ba:	9901      	ldr	r1, [sp, #4]
 80065bc:	6011      	str	r1, [r2, #0]
 80065be:	f1b9 0f0e 	cmp.w	r9, #14
 80065c2:	d86c      	bhi.n	800669e <_dtoa_r+0x3de>
 80065c4:	2c00      	cmp	r4, #0
 80065c6:	d06a      	beq.n	800669e <_dtoa_r+0x3de>
 80065c8:	f1bb 0f00 	cmp.w	fp, #0
 80065cc:	f340 80a0 	ble.w	8006710 <_dtoa_r+0x450>
 80065d0:	49c1      	ldr	r1, [pc, #772]	; (80068d8 <_dtoa_r+0x618>)
 80065d2:	f00b 020f 	and.w	r2, fp, #15
 80065d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80065da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80065de:	ed92 7b00 	vldr	d7, [r2]
 80065e2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80065e6:	f000 8087 	beq.w	80066f8 <_dtoa_r+0x438>
 80065ea:	4abc      	ldr	r2, [pc, #752]	; (80068dc <_dtoa_r+0x61c>)
 80065ec:	ed92 6b08 	vldr	d6, [r2, #32]
 80065f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80065f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80065f8:	f001 010f 	and.w	r1, r1, #15
 80065fc:	2203      	movs	r2, #3
 80065fe:	48b7      	ldr	r0, [pc, #732]	; (80068dc <_dtoa_r+0x61c>)
 8006600:	2900      	cmp	r1, #0
 8006602:	d17b      	bne.n	80066fc <_dtoa_r+0x43c>
 8006604:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006608:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800660c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006610:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006612:	2900      	cmp	r1, #0
 8006614:	f000 80a2 	beq.w	800675c <_dtoa_r+0x49c>
 8006618:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800661c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006620:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006628:	f140 8098 	bpl.w	800675c <_dtoa_r+0x49c>
 800662c:	f1b9 0f00 	cmp.w	r9, #0
 8006630:	f000 8094 	beq.w	800675c <_dtoa_r+0x49c>
 8006634:	f1ba 0f00 	cmp.w	sl, #0
 8006638:	dd2f      	ble.n	800669a <_dtoa_r+0x3da>
 800663a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800663e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006642:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006646:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800664a:	3201      	adds	r2, #1
 800664c:	4650      	mov	r0, sl
 800664e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006652:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006656:	ee07 2a90 	vmov	s15, r2
 800665a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800665e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006662:	ee15 4a90 	vmov	r4, s11
 8006666:	ec52 1b15 	vmov	r1, r2, d5
 800666a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800666e:	2800      	cmp	r0, #0
 8006670:	d177      	bne.n	8006762 <_dtoa_r+0x4a2>
 8006672:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006676:	ee36 6b47 	vsub.f64	d6, d6, d7
 800667a:	ec42 1b17 	vmov	d7, r1, r2
 800667e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006686:	f300 8263 	bgt.w	8006b50 <_dtoa_r+0x890>
 800668a:	eeb1 7b47 	vneg.f64	d7, d7
 800668e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006696:	f100 8258 	bmi.w	8006b4a <_dtoa_r+0x88a>
 800669a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800669e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066a0:	2a00      	cmp	r2, #0
 80066a2:	f2c0 811d 	blt.w	80068e0 <_dtoa_r+0x620>
 80066a6:	f1bb 0f0e 	cmp.w	fp, #14
 80066aa:	f300 8119 	bgt.w	80068e0 <_dtoa_r+0x620>
 80066ae:	4b8a      	ldr	r3, [pc, #552]	; (80068d8 <_dtoa_r+0x618>)
 80066b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80066b4:	ed93 6b00 	vldr	d6, [r3]
 80066b8:	9b08      	ldr	r3, [sp, #32]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f280 80b7 	bge.w	800682e <_dtoa_r+0x56e>
 80066c0:	f1b9 0f00 	cmp.w	r9, #0
 80066c4:	f300 80b3 	bgt.w	800682e <_dtoa_r+0x56e>
 80066c8:	f040 823f 	bne.w	8006b4a <_dtoa_r+0x88a>
 80066cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80066d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80066d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80066dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e0:	464c      	mov	r4, r9
 80066e2:	464f      	mov	r7, r9
 80066e4:	f280 8215 	bge.w	8006b12 <_dtoa_r+0x852>
 80066e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80066ec:	2331      	movs	r3, #49	; 0x31
 80066ee:	f808 3b01 	strb.w	r3, [r8], #1
 80066f2:	f10b 0b01 	add.w	fp, fp, #1
 80066f6:	e211      	b.n	8006b1c <_dtoa_r+0x85c>
 80066f8:	2202      	movs	r2, #2
 80066fa:	e780      	b.n	80065fe <_dtoa_r+0x33e>
 80066fc:	07cc      	lsls	r4, r1, #31
 80066fe:	d504      	bpl.n	800670a <_dtoa_r+0x44a>
 8006700:	ed90 6b00 	vldr	d6, [r0]
 8006704:	3201      	adds	r2, #1
 8006706:	ee27 7b06 	vmul.f64	d7, d7, d6
 800670a:	1049      	asrs	r1, r1, #1
 800670c:	3008      	adds	r0, #8
 800670e:	e777      	b.n	8006600 <_dtoa_r+0x340>
 8006710:	d022      	beq.n	8006758 <_dtoa_r+0x498>
 8006712:	f1cb 0100 	rsb	r1, fp, #0
 8006716:	4a70      	ldr	r2, [pc, #448]	; (80068d8 <_dtoa_r+0x618>)
 8006718:	f001 000f 	and.w	r0, r1, #15
 800671c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006720:	ed92 7b00 	vldr	d7, [r2]
 8006724:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006728:	ed8d 7b02 	vstr	d7, [sp, #8]
 800672c:	486b      	ldr	r0, [pc, #428]	; (80068dc <_dtoa_r+0x61c>)
 800672e:	1109      	asrs	r1, r1, #4
 8006730:	2400      	movs	r4, #0
 8006732:	2202      	movs	r2, #2
 8006734:	b929      	cbnz	r1, 8006742 <_dtoa_r+0x482>
 8006736:	2c00      	cmp	r4, #0
 8006738:	f43f af6a 	beq.w	8006610 <_dtoa_r+0x350>
 800673c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006740:	e766      	b.n	8006610 <_dtoa_r+0x350>
 8006742:	07cf      	lsls	r7, r1, #31
 8006744:	d505      	bpl.n	8006752 <_dtoa_r+0x492>
 8006746:	ed90 6b00 	vldr	d6, [r0]
 800674a:	3201      	adds	r2, #1
 800674c:	2401      	movs	r4, #1
 800674e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006752:	1049      	asrs	r1, r1, #1
 8006754:	3008      	adds	r0, #8
 8006756:	e7ed      	b.n	8006734 <_dtoa_r+0x474>
 8006758:	2202      	movs	r2, #2
 800675a:	e759      	b.n	8006610 <_dtoa_r+0x350>
 800675c:	465f      	mov	r7, fp
 800675e:	4648      	mov	r0, r9
 8006760:	e775      	b.n	800664e <_dtoa_r+0x38e>
 8006762:	ec42 1b17 	vmov	d7, r1, r2
 8006766:	4a5c      	ldr	r2, [pc, #368]	; (80068d8 <_dtoa_r+0x618>)
 8006768:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800676c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006770:	9a01      	ldr	r2, [sp, #4]
 8006772:	1814      	adds	r4, r2, r0
 8006774:	9a07      	ldr	r2, [sp, #28]
 8006776:	b352      	cbz	r2, 80067ce <_dtoa_r+0x50e>
 8006778:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800677c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006780:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006784:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006788:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800678c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006790:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006794:	ee14 2a90 	vmov	r2, s9
 8006798:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800679c:	3230      	adds	r2, #48	; 0x30
 800679e:	ee36 6b45 	vsub.f64	d6, d6, d5
 80067a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80067a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067aa:	f808 2b01 	strb.w	r2, [r8], #1
 80067ae:	d439      	bmi.n	8006824 <_dtoa_r+0x564>
 80067b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80067b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80067b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067bc:	d472      	bmi.n	80068a4 <_dtoa_r+0x5e4>
 80067be:	45a0      	cmp	r8, r4
 80067c0:	f43f af6b 	beq.w	800669a <_dtoa_r+0x3da>
 80067c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80067c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80067cc:	e7e0      	b.n	8006790 <_dtoa_r+0x4d0>
 80067ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80067d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80067d6:	4621      	mov	r1, r4
 80067d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80067dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80067e0:	ee14 2a90 	vmov	r2, s9
 80067e4:	3230      	adds	r2, #48	; 0x30
 80067e6:	f808 2b01 	strb.w	r2, [r8], #1
 80067ea:	45a0      	cmp	r8, r4
 80067ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80067f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80067f4:	d118      	bne.n	8006828 <_dtoa_r+0x568>
 80067f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80067fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80067fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006806:	dc4d      	bgt.n	80068a4 <_dtoa_r+0x5e4>
 8006808:	ee35 7b47 	vsub.f64	d7, d5, d7
 800680c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006814:	f57f af41 	bpl.w	800669a <_dtoa_r+0x3da>
 8006818:	4688      	mov	r8, r1
 800681a:	3901      	subs	r1, #1
 800681c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8006820:	2b30      	cmp	r3, #48	; 0x30
 8006822:	d0f9      	beq.n	8006818 <_dtoa_r+0x558>
 8006824:	46bb      	mov	fp, r7
 8006826:	e02a      	b.n	800687e <_dtoa_r+0x5be>
 8006828:	ee26 6b03 	vmul.f64	d6, d6, d3
 800682c:	e7d6      	b.n	80067dc <_dtoa_r+0x51c>
 800682e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006832:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006836:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800683a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800683e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006842:	ee15 3a10 	vmov	r3, s10
 8006846:	3330      	adds	r3, #48	; 0x30
 8006848:	f808 3b01 	strb.w	r3, [r8], #1
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	eba8 0303 	sub.w	r3, r8, r3
 8006852:	4599      	cmp	r9, r3
 8006854:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006858:	eea3 7b46 	vfms.f64	d7, d3, d6
 800685c:	d133      	bne.n	80068c6 <_dtoa_r+0x606>
 800685e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006862:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686a:	dc1a      	bgt.n	80068a2 <_dtoa_r+0x5e2>
 800686c:	eeb4 7b46 	vcmp.f64	d7, d6
 8006870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006874:	d103      	bne.n	800687e <_dtoa_r+0x5be>
 8006876:	ee15 3a10 	vmov	r3, s10
 800687a:	07d9      	lsls	r1, r3, #31
 800687c:	d411      	bmi.n	80068a2 <_dtoa_r+0x5e2>
 800687e:	4629      	mov	r1, r5
 8006880:	4630      	mov	r0, r6
 8006882:	f000 fbdf 	bl	8007044 <_Bfree>
 8006886:	2300      	movs	r3, #0
 8006888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800688a:	f888 3000 	strb.w	r3, [r8]
 800688e:	f10b 0301 	add.w	r3, fp, #1
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006896:	2b00      	cmp	r3, #0
 8006898:	f43f ad61 	beq.w	800635e <_dtoa_r+0x9e>
 800689c:	f8c3 8000 	str.w	r8, [r3]
 80068a0:	e55d      	b.n	800635e <_dtoa_r+0x9e>
 80068a2:	465f      	mov	r7, fp
 80068a4:	4643      	mov	r3, r8
 80068a6:	4698      	mov	r8, r3
 80068a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068ac:	2a39      	cmp	r2, #57	; 0x39
 80068ae:	d106      	bne.n	80068be <_dtoa_r+0x5fe>
 80068b0:	9a01      	ldr	r2, [sp, #4]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d1f7      	bne.n	80068a6 <_dtoa_r+0x5e6>
 80068b6:	9901      	ldr	r1, [sp, #4]
 80068b8:	2230      	movs	r2, #48	; 0x30
 80068ba:	3701      	adds	r7, #1
 80068bc:	700a      	strb	r2, [r1, #0]
 80068be:	781a      	ldrb	r2, [r3, #0]
 80068c0:	3201      	adds	r2, #1
 80068c2:	701a      	strb	r2, [r3, #0]
 80068c4:	e7ae      	b.n	8006824 <_dtoa_r+0x564>
 80068c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80068ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d2:	d1b2      	bne.n	800683a <_dtoa_r+0x57a>
 80068d4:	e7d3      	b.n	800687e <_dtoa_r+0x5be>
 80068d6:	bf00      	nop
 80068d8:	08008410 	.word	0x08008410
 80068dc:	080083e8 	.word	0x080083e8
 80068e0:	9907      	ldr	r1, [sp, #28]
 80068e2:	2900      	cmp	r1, #0
 80068e4:	f000 80d0 	beq.w	8006a88 <_dtoa_r+0x7c8>
 80068e8:	9906      	ldr	r1, [sp, #24]
 80068ea:	2901      	cmp	r1, #1
 80068ec:	f300 80b4 	bgt.w	8006a58 <_dtoa_r+0x798>
 80068f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80068f2:	2900      	cmp	r1, #0
 80068f4:	f000 80ac 	beq.w	8006a50 <_dtoa_r+0x790>
 80068f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006900:	461c      	mov	r4, r3
 8006902:	930a      	str	r3, [sp, #40]	; 0x28
 8006904:	9b04      	ldr	r3, [sp, #16]
 8006906:	4413      	add	r3, r2
 8006908:	9304      	str	r3, [sp, #16]
 800690a:	9b05      	ldr	r3, [sp, #20]
 800690c:	2101      	movs	r1, #1
 800690e:	4413      	add	r3, r2
 8006910:	4630      	mov	r0, r6
 8006912:	9305      	str	r3, [sp, #20]
 8006914:	f000 fc4e 	bl	80071b4 <__i2b>
 8006918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691a:	4607      	mov	r7, r0
 800691c:	f1b8 0f00 	cmp.w	r8, #0
 8006920:	dd0d      	ble.n	800693e <_dtoa_r+0x67e>
 8006922:	9a05      	ldr	r2, [sp, #20]
 8006924:	2a00      	cmp	r2, #0
 8006926:	dd0a      	ble.n	800693e <_dtoa_r+0x67e>
 8006928:	4542      	cmp	r2, r8
 800692a:	9904      	ldr	r1, [sp, #16]
 800692c:	bfa8      	it	ge
 800692e:	4642      	movge	r2, r8
 8006930:	1a89      	subs	r1, r1, r2
 8006932:	9104      	str	r1, [sp, #16]
 8006934:	9905      	ldr	r1, [sp, #20]
 8006936:	eba8 0802 	sub.w	r8, r8, r2
 800693a:	1a8a      	subs	r2, r1, r2
 800693c:	9205      	str	r2, [sp, #20]
 800693e:	b303      	cbz	r3, 8006982 <_dtoa_r+0x6c2>
 8006940:	9a07      	ldr	r2, [sp, #28]
 8006942:	2a00      	cmp	r2, #0
 8006944:	f000 80a5 	beq.w	8006a92 <_dtoa_r+0x7d2>
 8006948:	2c00      	cmp	r4, #0
 800694a:	dd13      	ble.n	8006974 <_dtoa_r+0x6b4>
 800694c:	4639      	mov	r1, r7
 800694e:	4622      	mov	r2, r4
 8006950:	4630      	mov	r0, r6
 8006952:	930d      	str	r3, [sp, #52]	; 0x34
 8006954:	f000 fcee 	bl	8007334 <__pow5mult>
 8006958:	462a      	mov	r2, r5
 800695a:	4601      	mov	r1, r0
 800695c:	4607      	mov	r7, r0
 800695e:	4630      	mov	r0, r6
 8006960:	f000 fc3e 	bl	80071e0 <__multiply>
 8006964:	4629      	mov	r1, r5
 8006966:	900a      	str	r0, [sp, #40]	; 0x28
 8006968:	4630      	mov	r0, r6
 800696a:	f000 fb6b 	bl	8007044 <_Bfree>
 800696e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006972:	4615      	mov	r5, r2
 8006974:	1b1a      	subs	r2, r3, r4
 8006976:	d004      	beq.n	8006982 <_dtoa_r+0x6c2>
 8006978:	4629      	mov	r1, r5
 800697a:	4630      	mov	r0, r6
 800697c:	f000 fcda 	bl	8007334 <__pow5mult>
 8006980:	4605      	mov	r5, r0
 8006982:	2101      	movs	r1, #1
 8006984:	4630      	mov	r0, r6
 8006986:	f000 fc15 	bl	80071b4 <__i2b>
 800698a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	4604      	mov	r4, r0
 8006990:	f340 8081 	ble.w	8006a96 <_dtoa_r+0x7d6>
 8006994:	461a      	mov	r2, r3
 8006996:	4601      	mov	r1, r0
 8006998:	4630      	mov	r0, r6
 800699a:	f000 fccb 	bl	8007334 <__pow5mult>
 800699e:	9b06      	ldr	r3, [sp, #24]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	4604      	mov	r4, r0
 80069a4:	dd7a      	ble.n	8006a9c <_dtoa_r+0x7dc>
 80069a6:	2300      	movs	r3, #0
 80069a8:	930a      	str	r3, [sp, #40]	; 0x28
 80069aa:	6922      	ldr	r2, [r4, #16]
 80069ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80069b0:	6910      	ldr	r0, [r2, #16]
 80069b2:	f000 fbaf 	bl	8007114 <__hi0bits>
 80069b6:	f1c0 0020 	rsb	r0, r0, #32
 80069ba:	9b05      	ldr	r3, [sp, #20]
 80069bc:	4418      	add	r0, r3
 80069be:	f010 001f 	ands.w	r0, r0, #31
 80069c2:	f000 808c 	beq.w	8006ade <_dtoa_r+0x81e>
 80069c6:	f1c0 0220 	rsb	r2, r0, #32
 80069ca:	2a04      	cmp	r2, #4
 80069cc:	f340 8085 	ble.w	8006ada <_dtoa_r+0x81a>
 80069d0:	f1c0 001c 	rsb	r0, r0, #28
 80069d4:	9b04      	ldr	r3, [sp, #16]
 80069d6:	4403      	add	r3, r0
 80069d8:	9304      	str	r3, [sp, #16]
 80069da:	9b05      	ldr	r3, [sp, #20]
 80069dc:	4403      	add	r3, r0
 80069de:	4480      	add	r8, r0
 80069e0:	9305      	str	r3, [sp, #20]
 80069e2:	9b04      	ldr	r3, [sp, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dd05      	ble.n	80069f4 <_dtoa_r+0x734>
 80069e8:	4629      	mov	r1, r5
 80069ea:	461a      	mov	r2, r3
 80069ec:	4630      	mov	r0, r6
 80069ee:	f000 fcfb 	bl	80073e8 <__lshift>
 80069f2:	4605      	mov	r5, r0
 80069f4:	9b05      	ldr	r3, [sp, #20]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dd05      	ble.n	8006a06 <_dtoa_r+0x746>
 80069fa:	4621      	mov	r1, r4
 80069fc:	461a      	mov	r2, r3
 80069fe:	4630      	mov	r0, r6
 8006a00:	f000 fcf2 	bl	80073e8 <__lshift>
 8006a04:	4604      	mov	r4, r0
 8006a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d06a      	beq.n	8006ae2 <_dtoa_r+0x822>
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 fd5a 	bl	80074c8 <__mcmp>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	da64      	bge.n	8006ae2 <_dtoa_r+0x822>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	220a      	movs	r2, #10
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f000 fb32 	bl	8007088 <__multadd>
 8006a24:	9b07      	ldr	r3, [sp, #28]
 8006a26:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8191 	beq.w	8006d54 <_dtoa_r+0xa94>
 8006a32:	4639      	mov	r1, r7
 8006a34:	2300      	movs	r3, #0
 8006a36:	220a      	movs	r2, #10
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f000 fb25 	bl	8007088 <__multadd>
 8006a3e:	f1ba 0f00 	cmp.w	sl, #0
 8006a42:	4607      	mov	r7, r0
 8006a44:	f300 808d 	bgt.w	8006b62 <_dtoa_r+0x8a2>
 8006a48:	9b06      	ldr	r3, [sp, #24]
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	dc50      	bgt.n	8006af0 <_dtoa_r+0x830>
 8006a4e:	e088      	b.n	8006b62 <_dtoa_r+0x8a2>
 8006a50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006a56:	e751      	b.n	80068fc <_dtoa_r+0x63c>
 8006a58:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	bfbf      	itttt	lt
 8006a60:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8006a62:	1ae3      	sublt	r3, r4, r3
 8006a64:	18d2      	addlt	r2, r2, r3
 8006a66:	9209      	strlt	r2, [sp, #36]	; 0x24
 8006a68:	bfb6      	itet	lt
 8006a6a:	4623      	movlt	r3, r4
 8006a6c:	1b1c      	subge	r4, r3, r4
 8006a6e:	2400      	movlt	r4, #0
 8006a70:	f1b9 0f00 	cmp.w	r9, #0
 8006a74:	bfb5      	itete	lt
 8006a76:	9a04      	ldrlt	r2, [sp, #16]
 8006a78:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8006a7c:	eba2 0809 	sublt.w	r8, r2, r9
 8006a80:	464a      	movge	r2, r9
 8006a82:	bfb8      	it	lt
 8006a84:	2200      	movlt	r2, #0
 8006a86:	e73c      	b.n	8006902 <_dtoa_r+0x642>
 8006a88:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006a8c:	9f07      	ldr	r7, [sp, #28]
 8006a8e:	461c      	mov	r4, r3
 8006a90:	e744      	b.n	800691c <_dtoa_r+0x65c>
 8006a92:	461a      	mov	r2, r3
 8006a94:	e770      	b.n	8006978 <_dtoa_r+0x6b8>
 8006a96:	9b06      	ldr	r3, [sp, #24]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	dc18      	bgt.n	8006ace <_dtoa_r+0x80e>
 8006a9c:	9b02      	ldr	r3, [sp, #8]
 8006a9e:	b9b3      	cbnz	r3, 8006ace <_dtoa_r+0x80e>
 8006aa0:	9b03      	ldr	r3, [sp, #12]
 8006aa2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006aa6:	b9a2      	cbnz	r2, 8006ad2 <_dtoa_r+0x812>
 8006aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006aac:	0d12      	lsrs	r2, r2, #20
 8006aae:	0512      	lsls	r2, r2, #20
 8006ab0:	b18a      	cbz	r2, 8006ad6 <_dtoa_r+0x816>
 8006ab2:	9b04      	ldr	r3, [sp, #16]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	9304      	str	r3, [sp, #16]
 8006ab8:	9b05      	ldr	r3, [sp, #20]
 8006aba:	3301      	adds	r3, #1
 8006abc:	9305      	str	r3, [sp, #20]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f af70 	bne.w	80069aa <_dtoa_r+0x6ea>
 8006aca:	2001      	movs	r0, #1
 8006acc:	e775      	b.n	80069ba <_dtoa_r+0x6fa>
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e7f6      	b.n	8006ac0 <_dtoa_r+0x800>
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	e7f4      	b.n	8006ac0 <_dtoa_r+0x800>
 8006ad6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ad8:	e7f3      	b.n	8006ac2 <_dtoa_r+0x802>
 8006ada:	d082      	beq.n	80069e2 <_dtoa_r+0x722>
 8006adc:	4610      	mov	r0, r2
 8006ade:	301c      	adds	r0, #28
 8006ae0:	e778      	b.n	80069d4 <_dtoa_r+0x714>
 8006ae2:	f1b9 0f00 	cmp.w	r9, #0
 8006ae6:	dc37      	bgt.n	8006b58 <_dtoa_r+0x898>
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd34      	ble.n	8006b58 <_dtoa_r+0x898>
 8006aee:	46ca      	mov	sl, r9
 8006af0:	f1ba 0f00 	cmp.w	sl, #0
 8006af4:	d10d      	bne.n	8006b12 <_dtoa_r+0x852>
 8006af6:	4621      	mov	r1, r4
 8006af8:	4653      	mov	r3, sl
 8006afa:	2205      	movs	r2, #5
 8006afc:	4630      	mov	r0, r6
 8006afe:	f000 fac3 	bl	8007088 <__multadd>
 8006b02:	4601      	mov	r1, r0
 8006b04:	4604      	mov	r4, r0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f000 fcde 	bl	80074c8 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	f73f adeb 	bgt.w	80066e8 <_dtoa_r+0x428>
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b18:	ea6f 0b03 	mvn.w	fp, r3
 8006b1c:	f04f 0900 	mov.w	r9, #0
 8006b20:	4621      	mov	r1, r4
 8006b22:	4630      	mov	r0, r6
 8006b24:	f000 fa8e 	bl	8007044 <_Bfree>
 8006b28:	2f00      	cmp	r7, #0
 8006b2a:	f43f aea8 	beq.w	800687e <_dtoa_r+0x5be>
 8006b2e:	f1b9 0f00 	cmp.w	r9, #0
 8006b32:	d005      	beq.n	8006b40 <_dtoa_r+0x880>
 8006b34:	45b9      	cmp	r9, r7
 8006b36:	d003      	beq.n	8006b40 <_dtoa_r+0x880>
 8006b38:	4649      	mov	r1, r9
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f000 fa82 	bl	8007044 <_Bfree>
 8006b40:	4639      	mov	r1, r7
 8006b42:	4630      	mov	r0, r6
 8006b44:	f000 fa7e 	bl	8007044 <_Bfree>
 8006b48:	e699      	b.n	800687e <_dtoa_r+0x5be>
 8006b4a:	2400      	movs	r4, #0
 8006b4c:	4627      	mov	r7, r4
 8006b4e:	e7e0      	b.n	8006b12 <_dtoa_r+0x852>
 8006b50:	46bb      	mov	fp, r7
 8006b52:	4604      	mov	r4, r0
 8006b54:	4607      	mov	r7, r0
 8006b56:	e5c7      	b.n	80066e8 <_dtoa_r+0x428>
 8006b58:	9b07      	ldr	r3, [sp, #28]
 8006b5a:	46ca      	mov	sl, r9
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8100 	beq.w	8006d62 <_dtoa_r+0xaa2>
 8006b62:	f1b8 0f00 	cmp.w	r8, #0
 8006b66:	dd05      	ble.n	8006b74 <_dtoa_r+0x8b4>
 8006b68:	4639      	mov	r1, r7
 8006b6a:	4642      	mov	r2, r8
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 fc3b 	bl	80073e8 <__lshift>
 8006b72:	4607      	mov	r7, r0
 8006b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d05d      	beq.n	8006c36 <_dtoa_r+0x976>
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	f000 fa21 	bl	8006fc4 <_Balloc>
 8006b82:	4680      	mov	r8, r0
 8006b84:	b928      	cbnz	r0, 8006b92 <_dtoa_r+0x8d2>
 8006b86:	4b82      	ldr	r3, [pc, #520]	; (8006d90 <_dtoa_r+0xad0>)
 8006b88:	4602      	mov	r2, r0
 8006b8a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b8e:	f7ff bbaf 	b.w	80062f0 <_dtoa_r+0x30>
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	3202      	adds	r2, #2
 8006b96:	0092      	lsls	r2, r2, #2
 8006b98:	f107 010c 	add.w	r1, r7, #12
 8006b9c:	300c      	adds	r0, #12
 8006b9e:	f000 fa03 	bl	8006fa8 <memcpy>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4641      	mov	r1, r8
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	f000 fc1e 	bl	80073e8 <__lshift>
 8006bac:	9b01      	ldr	r3, [sp, #4]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	9b01      	ldr	r3, [sp, #4]
 8006bb4:	4453      	add	r3, sl
 8006bb6:	9308      	str	r3, [sp, #32]
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	46b9      	mov	r9, r7
 8006bc0:	9307      	str	r3, [sp, #28]
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	4621      	mov	r1, r4
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	4628      	mov	r0, r5
 8006bcc:	9302      	str	r3, [sp, #8]
 8006bce:	f7ff fae9 	bl	80061a4 <quorem>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	3330      	adds	r3, #48	; 0x30
 8006bd6:	9005      	str	r0, [sp, #20]
 8006bd8:	4649      	mov	r1, r9
 8006bda:	4628      	mov	r0, r5
 8006bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8006bde:	f000 fc73 	bl	80074c8 <__mcmp>
 8006be2:	463a      	mov	r2, r7
 8006be4:	4682      	mov	sl, r0
 8006be6:	4621      	mov	r1, r4
 8006be8:	4630      	mov	r0, r6
 8006bea:	f000 fc89 	bl	8007500 <__mdiff>
 8006bee:	68c2      	ldr	r2, [r0, #12]
 8006bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	bb0a      	cbnz	r2, 8006c3a <_dtoa_r+0x97a>
 8006bf6:	4601      	mov	r1, r0
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 fc65 	bl	80074c8 <__mcmp>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c00:	4602      	mov	r2, r0
 8006c02:	4641      	mov	r1, r8
 8006c04:	4630      	mov	r0, r6
 8006c06:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8006c0a:	f000 fa1b 	bl	8007044 <_Bfree>
 8006c0e:	9b06      	ldr	r3, [sp, #24]
 8006c10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c12:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006c16:	ea43 0102 	orr.w	r1, r3, r2
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c20:	d10d      	bne.n	8006c3e <_dtoa_r+0x97e>
 8006c22:	2b39      	cmp	r3, #57	; 0x39
 8006c24:	d029      	beq.n	8006c7a <_dtoa_r+0x9ba>
 8006c26:	f1ba 0f00 	cmp.w	sl, #0
 8006c2a:	dd01      	ble.n	8006c30 <_dtoa_r+0x970>
 8006c2c:	9b05      	ldr	r3, [sp, #20]
 8006c2e:	3331      	adds	r3, #49	; 0x31
 8006c30:	9a02      	ldr	r2, [sp, #8]
 8006c32:	7013      	strb	r3, [r2, #0]
 8006c34:	e774      	b.n	8006b20 <_dtoa_r+0x860>
 8006c36:	4638      	mov	r0, r7
 8006c38:	e7b8      	b.n	8006bac <_dtoa_r+0x8ec>
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	e7e1      	b.n	8006c02 <_dtoa_r+0x942>
 8006c3e:	f1ba 0f00 	cmp.w	sl, #0
 8006c42:	db06      	blt.n	8006c52 <_dtoa_r+0x992>
 8006c44:	9906      	ldr	r1, [sp, #24]
 8006c46:	ea41 0a0a 	orr.w	sl, r1, sl
 8006c4a:	9907      	ldr	r1, [sp, #28]
 8006c4c:	ea5a 0101 	orrs.w	r1, sl, r1
 8006c50:	d120      	bne.n	8006c94 <_dtoa_r+0x9d4>
 8006c52:	2a00      	cmp	r2, #0
 8006c54:	ddec      	ble.n	8006c30 <_dtoa_r+0x970>
 8006c56:	4629      	mov	r1, r5
 8006c58:	2201      	movs	r2, #1
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	f000 fbc3 	bl	80073e8 <__lshift>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4605      	mov	r5, r0
 8006c66:	f000 fc2f 	bl	80074c8 <__mcmp>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	9b04      	ldr	r3, [sp, #16]
 8006c6e:	dc02      	bgt.n	8006c76 <_dtoa_r+0x9b6>
 8006c70:	d1de      	bne.n	8006c30 <_dtoa_r+0x970>
 8006c72:	07da      	lsls	r2, r3, #31
 8006c74:	d5dc      	bpl.n	8006c30 <_dtoa_r+0x970>
 8006c76:	2b39      	cmp	r3, #57	; 0x39
 8006c78:	d1d8      	bne.n	8006c2c <_dtoa_r+0x96c>
 8006c7a:	9a02      	ldr	r2, [sp, #8]
 8006c7c:	2339      	movs	r3, #57	; 0x39
 8006c7e:	7013      	strb	r3, [r2, #0]
 8006c80:	4643      	mov	r3, r8
 8006c82:	4698      	mov	r8, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8006c8a:	2a39      	cmp	r2, #57	; 0x39
 8006c8c:	d051      	beq.n	8006d32 <_dtoa_r+0xa72>
 8006c8e:	3201      	adds	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e745      	b.n	8006b20 <_dtoa_r+0x860>
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	dd03      	ble.n	8006ca0 <_dtoa_r+0x9e0>
 8006c98:	2b39      	cmp	r3, #57	; 0x39
 8006c9a:	d0ee      	beq.n	8006c7a <_dtoa_r+0x9ba>
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	e7c7      	b.n	8006c30 <_dtoa_r+0x970>
 8006ca0:	9a04      	ldr	r2, [sp, #16]
 8006ca2:	9908      	ldr	r1, [sp, #32]
 8006ca4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ca8:	428a      	cmp	r2, r1
 8006caa:	d02b      	beq.n	8006d04 <_dtoa_r+0xa44>
 8006cac:	4629      	mov	r1, r5
 8006cae:	2300      	movs	r3, #0
 8006cb0:	220a      	movs	r2, #10
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f000 f9e8 	bl	8007088 <__multadd>
 8006cb8:	45b9      	cmp	r9, r7
 8006cba:	4605      	mov	r5, r0
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	f04f 020a 	mov.w	r2, #10
 8006cc4:	4649      	mov	r1, r9
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	d107      	bne.n	8006cda <_dtoa_r+0xa1a>
 8006cca:	f000 f9dd 	bl	8007088 <__multadd>
 8006cce:	4681      	mov	r9, r0
 8006cd0:	4607      	mov	r7, r0
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	9304      	str	r3, [sp, #16]
 8006cd8:	e774      	b.n	8006bc4 <_dtoa_r+0x904>
 8006cda:	f000 f9d5 	bl	8007088 <__multadd>
 8006cde:	4639      	mov	r1, r7
 8006ce0:	4681      	mov	r9, r0
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	220a      	movs	r2, #10
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f000 f9ce 	bl	8007088 <__multadd>
 8006cec:	4607      	mov	r7, r0
 8006cee:	e7f0      	b.n	8006cd2 <_dtoa_r+0xa12>
 8006cf0:	f1ba 0f00 	cmp.w	sl, #0
 8006cf4:	9a01      	ldr	r2, [sp, #4]
 8006cf6:	bfcc      	ite	gt
 8006cf8:	46d0      	movgt	r8, sl
 8006cfa:	f04f 0801 	movle.w	r8, #1
 8006cfe:	4490      	add	r8, r2
 8006d00:	f04f 0900 	mov.w	r9, #0
 8006d04:	4629      	mov	r1, r5
 8006d06:	2201      	movs	r2, #1
 8006d08:	4630      	mov	r0, r6
 8006d0a:	9302      	str	r3, [sp, #8]
 8006d0c:	f000 fb6c 	bl	80073e8 <__lshift>
 8006d10:	4621      	mov	r1, r4
 8006d12:	4605      	mov	r5, r0
 8006d14:	f000 fbd8 	bl	80074c8 <__mcmp>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	dcb1      	bgt.n	8006c80 <_dtoa_r+0x9c0>
 8006d1c:	d102      	bne.n	8006d24 <_dtoa_r+0xa64>
 8006d1e:	9b02      	ldr	r3, [sp, #8]
 8006d20:	07db      	lsls	r3, r3, #31
 8006d22:	d4ad      	bmi.n	8006c80 <_dtoa_r+0x9c0>
 8006d24:	4643      	mov	r3, r8
 8006d26:	4698      	mov	r8, r3
 8006d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d2c:	2a30      	cmp	r2, #48	; 0x30
 8006d2e:	d0fa      	beq.n	8006d26 <_dtoa_r+0xa66>
 8006d30:	e6f6      	b.n	8006b20 <_dtoa_r+0x860>
 8006d32:	9a01      	ldr	r2, [sp, #4]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d1a4      	bne.n	8006c82 <_dtoa_r+0x9c2>
 8006d38:	f10b 0b01 	add.w	fp, fp, #1
 8006d3c:	2331      	movs	r3, #49	; 0x31
 8006d3e:	e778      	b.n	8006c32 <_dtoa_r+0x972>
 8006d40:	4b14      	ldr	r3, [pc, #80]	; (8006d94 <_dtoa_r+0xad4>)
 8006d42:	f7ff bb27 	b.w	8006394 <_dtoa_r+0xd4>
 8006d46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f47f ab03 	bne.w	8006354 <_dtoa_r+0x94>
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <_dtoa_r+0xad8>)
 8006d50:	f7ff bb20 	b.w	8006394 <_dtoa_r+0xd4>
 8006d54:	f1ba 0f00 	cmp.w	sl, #0
 8006d58:	dc03      	bgt.n	8006d62 <_dtoa_r+0xaa2>
 8006d5a:	9b06      	ldr	r3, [sp, #24]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	f73f aec7 	bgt.w	8006af0 <_dtoa_r+0x830>
 8006d62:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff fa1b 	bl	80061a4 <quorem>
 8006d6e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d72:	f808 3b01 	strb.w	r3, [r8], #1
 8006d76:	9a01      	ldr	r2, [sp, #4]
 8006d78:	eba8 0202 	sub.w	r2, r8, r2
 8006d7c:	4592      	cmp	sl, r2
 8006d7e:	ddb7      	ble.n	8006cf0 <_dtoa_r+0xa30>
 8006d80:	4629      	mov	r1, r5
 8006d82:	2300      	movs	r3, #0
 8006d84:	220a      	movs	r2, #10
 8006d86:	4630      	mov	r0, r6
 8006d88:	f000 f97e 	bl	8007088 <__multadd>
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	e7ea      	b.n	8006d66 <_dtoa_r+0xaa6>
 8006d90:	0800831b 	.word	0x0800831b
 8006d94:	08008278 	.word	0x08008278
 8006d98:	0800829c 	.word	0x0800829c

08006d9c <std>:
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	b510      	push	{r4, lr}
 8006da0:	4604      	mov	r4, r0
 8006da2:	e9c0 3300 	strd	r3, r3, [r0]
 8006da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006daa:	6083      	str	r3, [r0, #8]
 8006dac:	8181      	strh	r1, [r0, #12]
 8006dae:	6643      	str	r3, [r0, #100]	; 0x64
 8006db0:	81c2      	strh	r2, [r0, #14]
 8006db2:	6183      	str	r3, [r0, #24]
 8006db4:	4619      	mov	r1, r3
 8006db6:	2208      	movs	r2, #8
 8006db8:	305c      	adds	r0, #92	; 0x5c
 8006dba:	f7fe fd91 	bl	80058e0 <memset>
 8006dbe:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <std+0x38>)
 8006dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <std+0x3c>)
 8006dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8006dc6:	4b05      	ldr	r3, [pc, #20]	; (8006ddc <std+0x40>)
 8006dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006dca:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <std+0x44>)
 8006dcc:	6224      	str	r4, [r4, #32]
 8006dce:	6323      	str	r3, [r4, #48]	; 0x30
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	bf00      	nop
 8006dd4:	08007b8d 	.word	0x08007b8d
 8006dd8:	08007baf 	.word	0x08007baf
 8006ddc:	08007be7 	.word	0x08007be7
 8006de0:	08007c0b 	.word	0x08007c0b

08006de4 <_cleanup_r>:
 8006de4:	4901      	ldr	r1, [pc, #4]	; (8006dec <_cleanup_r+0x8>)
 8006de6:	f000 b8af 	b.w	8006f48 <_fwalk_reent>
 8006dea:	bf00      	nop
 8006dec:	08007f21 	.word	0x08007f21

08006df0 <__sfmoreglue>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	2268      	movs	r2, #104	; 0x68
 8006df4:	1e4d      	subs	r5, r1, #1
 8006df6:	4355      	muls	r5, r2
 8006df8:	460e      	mov	r6, r1
 8006dfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dfe:	f000 fce7 	bl	80077d0 <_malloc_r>
 8006e02:	4604      	mov	r4, r0
 8006e04:	b140      	cbz	r0, 8006e18 <__sfmoreglue+0x28>
 8006e06:	2100      	movs	r1, #0
 8006e08:	e9c0 1600 	strd	r1, r6, [r0]
 8006e0c:	300c      	adds	r0, #12
 8006e0e:	60a0      	str	r0, [r4, #8]
 8006e10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e14:	f7fe fd64 	bl	80058e0 <memset>
 8006e18:	4620      	mov	r0, r4
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}

08006e1c <__sfp_lock_acquire>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	; (8006e24 <__sfp_lock_acquire+0x8>)
 8006e1e:	f000 b8b8 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 8006e22:	bf00      	nop
 8006e24:	2400032d 	.word	0x2400032d

08006e28 <__sfp_lock_release>:
 8006e28:	4801      	ldr	r0, [pc, #4]	; (8006e30 <__sfp_lock_release+0x8>)
 8006e2a:	f000 b8b3 	b.w	8006f94 <__retarget_lock_release_recursive>
 8006e2e:	bf00      	nop
 8006e30:	2400032d 	.word	0x2400032d

08006e34 <__sinit_lock_acquire>:
 8006e34:	4801      	ldr	r0, [pc, #4]	; (8006e3c <__sinit_lock_acquire+0x8>)
 8006e36:	f000 b8ac 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 8006e3a:	bf00      	nop
 8006e3c:	2400032e 	.word	0x2400032e

08006e40 <__sinit_lock_release>:
 8006e40:	4801      	ldr	r0, [pc, #4]	; (8006e48 <__sinit_lock_release+0x8>)
 8006e42:	f000 b8a7 	b.w	8006f94 <__retarget_lock_release_recursive>
 8006e46:	bf00      	nop
 8006e48:	2400032e 	.word	0x2400032e

08006e4c <__sinit>:
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	4604      	mov	r4, r0
 8006e50:	f7ff fff0 	bl	8006e34 <__sinit_lock_acquire>
 8006e54:	69a3      	ldr	r3, [r4, #24]
 8006e56:	b11b      	cbz	r3, 8006e60 <__sinit+0x14>
 8006e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e5c:	f7ff bff0 	b.w	8006e40 <__sinit_lock_release>
 8006e60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006e64:	6523      	str	r3, [r4, #80]	; 0x50
 8006e66:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <__sinit+0x68>)
 8006e68:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <__sinit+0x6c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8006e6e:	42a3      	cmp	r3, r4
 8006e70:	bf04      	itt	eq
 8006e72:	2301      	moveq	r3, #1
 8006e74:	61a3      	streq	r3, [r4, #24]
 8006e76:	4620      	mov	r0, r4
 8006e78:	f000 f820 	bl	8006ebc <__sfp>
 8006e7c:	6060      	str	r0, [r4, #4]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f000 f81c 	bl	8006ebc <__sfp>
 8006e84:	60a0      	str	r0, [r4, #8]
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 f818 	bl	8006ebc <__sfp>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	60e0      	str	r0, [r4, #12]
 8006e90:	2104      	movs	r1, #4
 8006e92:	6860      	ldr	r0, [r4, #4]
 8006e94:	f7ff ff82 	bl	8006d9c <std>
 8006e98:	68a0      	ldr	r0, [r4, #8]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	2109      	movs	r1, #9
 8006e9e:	f7ff ff7d 	bl	8006d9c <std>
 8006ea2:	68e0      	ldr	r0, [r4, #12]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	2112      	movs	r1, #18
 8006ea8:	f7ff ff78 	bl	8006d9c <std>
 8006eac:	2301      	movs	r3, #1
 8006eae:	61a3      	str	r3, [r4, #24]
 8006eb0:	e7d2      	b.n	8006e58 <__sinit+0xc>
 8006eb2:	bf00      	nop
 8006eb4:	08008264 	.word	0x08008264
 8006eb8:	08006de5 	.word	0x08006de5

08006ebc <__sfp>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	f7ff ffac 	bl	8006e1c <__sfp_lock_acquire>
 8006ec4:	4b1e      	ldr	r3, [pc, #120]	; (8006f40 <__sfp+0x84>)
 8006ec6:	681e      	ldr	r6, [r3, #0]
 8006ec8:	69b3      	ldr	r3, [r6, #24]
 8006eca:	b913      	cbnz	r3, 8006ed2 <__sfp+0x16>
 8006ecc:	4630      	mov	r0, r6
 8006ece:	f7ff ffbd 	bl	8006e4c <__sinit>
 8006ed2:	3648      	adds	r6, #72	; 0x48
 8006ed4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	d503      	bpl.n	8006ee4 <__sfp+0x28>
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	b30b      	cbz	r3, 8006f24 <__sfp+0x68>
 8006ee0:	6836      	ldr	r6, [r6, #0]
 8006ee2:	e7f7      	b.n	8006ed4 <__sfp+0x18>
 8006ee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ee8:	b9d5      	cbnz	r5, 8006f20 <__sfp+0x64>
 8006eea:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <__sfp+0x88>)
 8006eec:	60e3      	str	r3, [r4, #12]
 8006eee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ef2:	6665      	str	r5, [r4, #100]	; 0x64
 8006ef4:	f000 f84c 	bl	8006f90 <__retarget_lock_init_recursive>
 8006ef8:	f7ff ff96 	bl	8006e28 <__sfp_lock_release>
 8006efc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006f04:	6025      	str	r5, [r4, #0]
 8006f06:	61a5      	str	r5, [r4, #24]
 8006f08:	2208      	movs	r2, #8
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f10:	f7fe fce6 	bl	80058e0 <memset>
 8006f14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f20:	3468      	adds	r4, #104	; 0x68
 8006f22:	e7d9      	b.n	8006ed8 <__sfp+0x1c>
 8006f24:	2104      	movs	r1, #4
 8006f26:	4638      	mov	r0, r7
 8006f28:	f7ff ff62 	bl	8006df0 <__sfmoreglue>
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	6030      	str	r0, [r6, #0]
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d1d5      	bne.n	8006ee0 <__sfp+0x24>
 8006f34:	f7ff ff78 	bl	8006e28 <__sfp_lock_release>
 8006f38:	230c      	movs	r3, #12
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	e7ee      	b.n	8006f1c <__sfp+0x60>
 8006f3e:	bf00      	nop
 8006f40:	08008264 	.word	0x08008264
 8006f44:	ffff0001 	.word	0xffff0001

08006f48 <_fwalk_reent>:
 8006f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	4688      	mov	r8, r1
 8006f50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f54:	2700      	movs	r7, #0
 8006f56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f5a:	f1b9 0901 	subs.w	r9, r9, #1
 8006f5e:	d505      	bpl.n	8006f6c <_fwalk_reent+0x24>
 8006f60:	6824      	ldr	r4, [r4, #0]
 8006f62:	2c00      	cmp	r4, #0
 8006f64:	d1f7      	bne.n	8006f56 <_fwalk_reent+0xe>
 8006f66:	4638      	mov	r0, r7
 8006f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6c:	89ab      	ldrh	r3, [r5, #12]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d907      	bls.n	8006f82 <_fwalk_reent+0x3a>
 8006f72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f76:	3301      	adds	r3, #1
 8006f78:	d003      	beq.n	8006f82 <_fwalk_reent+0x3a>
 8006f7a:	4629      	mov	r1, r5
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	47c0      	blx	r8
 8006f80:	4307      	orrs	r7, r0
 8006f82:	3568      	adds	r5, #104	; 0x68
 8006f84:	e7e9      	b.n	8006f5a <_fwalk_reent+0x12>
	...

08006f88 <_localeconv_r>:
 8006f88:	4800      	ldr	r0, [pc, #0]	; (8006f8c <_localeconv_r+0x4>)
 8006f8a:	4770      	bx	lr
 8006f8c:	24000164 	.word	0x24000164

08006f90 <__retarget_lock_init_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <__retarget_lock_acquire_recursive>:
 8006f92:	4770      	bx	lr

08006f94 <__retarget_lock_release_recursive>:
 8006f94:	4770      	bx	lr
	...

08006f98 <malloc>:
 8006f98:	4b02      	ldr	r3, [pc, #8]	; (8006fa4 <malloc+0xc>)
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	f000 bc17 	b.w	80077d0 <_malloc_r>
 8006fa2:	bf00      	nop
 8006fa4:	24000010 	.word	0x24000010

08006fa8 <memcpy>:
 8006fa8:	440a      	add	r2, r1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006fb0:	d100      	bne.n	8006fb4 <memcpy+0xc>
 8006fb2:	4770      	bx	lr
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fbe:	4291      	cmp	r1, r2
 8006fc0:	d1f9      	bne.n	8006fb6 <memcpy+0xe>
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <_Balloc>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fc8:	4604      	mov	r4, r0
 8006fca:	460d      	mov	r5, r1
 8006fcc:	b976      	cbnz	r6, 8006fec <_Balloc+0x28>
 8006fce:	2010      	movs	r0, #16
 8006fd0:	f7ff ffe2 	bl	8006f98 <malloc>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8006fd8:	b920      	cbnz	r0, 8006fe4 <_Balloc+0x20>
 8006fda:	4b18      	ldr	r3, [pc, #96]	; (800703c <_Balloc+0x78>)
 8006fdc:	4818      	ldr	r0, [pc, #96]	; (8007040 <_Balloc+0x7c>)
 8006fde:	2166      	movs	r1, #102	; 0x66
 8006fe0:	f000 feea 	bl	8007db8 <__assert_func>
 8006fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fe8:	6006      	str	r6, [r0, #0]
 8006fea:	60c6      	str	r6, [r0, #12]
 8006fec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fee:	68f3      	ldr	r3, [r6, #12]
 8006ff0:	b183      	cbz	r3, 8007014 <_Balloc+0x50>
 8006ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ffa:	b9b8      	cbnz	r0, 800702c <_Balloc+0x68>
 8006ffc:	2101      	movs	r1, #1
 8006ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8007002:	1d72      	adds	r2, r6, #5
 8007004:	0092      	lsls	r2, r2, #2
 8007006:	4620      	mov	r0, r4
 8007008:	f000 fb60 	bl	80076cc <_calloc_r>
 800700c:	b160      	cbz	r0, 8007028 <_Balloc+0x64>
 800700e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007012:	e00e      	b.n	8007032 <_Balloc+0x6e>
 8007014:	2221      	movs	r2, #33	; 0x21
 8007016:	2104      	movs	r1, #4
 8007018:	4620      	mov	r0, r4
 800701a:	f000 fb57 	bl	80076cc <_calloc_r>
 800701e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007020:	60f0      	str	r0, [r6, #12]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e4      	bne.n	8006ff2 <_Balloc+0x2e>
 8007028:	2000      	movs	r0, #0
 800702a:	bd70      	pop	{r4, r5, r6, pc}
 800702c:	6802      	ldr	r2, [r0, #0]
 800702e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007032:	2300      	movs	r3, #0
 8007034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007038:	e7f7      	b.n	800702a <_Balloc+0x66>
 800703a:	bf00      	nop
 800703c:	080082a9 	.word	0x080082a9
 8007040:	0800838c 	.word	0x0800838c

08007044 <_Bfree>:
 8007044:	b570      	push	{r4, r5, r6, lr}
 8007046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007048:	4605      	mov	r5, r0
 800704a:	460c      	mov	r4, r1
 800704c:	b976      	cbnz	r6, 800706c <_Bfree+0x28>
 800704e:	2010      	movs	r0, #16
 8007050:	f7ff ffa2 	bl	8006f98 <malloc>
 8007054:	4602      	mov	r2, r0
 8007056:	6268      	str	r0, [r5, #36]	; 0x24
 8007058:	b920      	cbnz	r0, 8007064 <_Bfree+0x20>
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <_Bfree+0x3c>)
 800705c:	4809      	ldr	r0, [pc, #36]	; (8007084 <_Bfree+0x40>)
 800705e:	218a      	movs	r1, #138	; 0x8a
 8007060:	f000 feaa 	bl	8007db8 <__assert_func>
 8007064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007068:	6006      	str	r6, [r0, #0]
 800706a:	60c6      	str	r6, [r0, #12]
 800706c:	b13c      	cbz	r4, 800707e <_Bfree+0x3a>
 800706e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007070:	6862      	ldr	r2, [r4, #4]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007078:	6021      	str	r1, [r4, #0]
 800707a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800707e:	bd70      	pop	{r4, r5, r6, pc}
 8007080:	080082a9 	.word	0x080082a9
 8007084:	0800838c 	.word	0x0800838c

08007088 <__multadd>:
 8007088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708c:	690d      	ldr	r5, [r1, #16]
 800708e:	4607      	mov	r7, r0
 8007090:	460c      	mov	r4, r1
 8007092:	461e      	mov	r6, r3
 8007094:	f101 0c14 	add.w	ip, r1, #20
 8007098:	2000      	movs	r0, #0
 800709a:	f8dc 3000 	ldr.w	r3, [ip]
 800709e:	b299      	uxth	r1, r3
 80070a0:	fb02 6101 	mla	r1, r2, r1, r6
 80070a4:	0c1e      	lsrs	r6, r3, #16
 80070a6:	0c0b      	lsrs	r3, r1, #16
 80070a8:	fb02 3306 	mla	r3, r2, r6, r3
 80070ac:	b289      	uxth	r1, r1
 80070ae:	3001      	adds	r0, #1
 80070b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070b4:	4285      	cmp	r5, r0
 80070b6:	f84c 1b04 	str.w	r1, [ip], #4
 80070ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070be:	dcec      	bgt.n	800709a <__multadd+0x12>
 80070c0:	b30e      	cbz	r6, 8007106 <__multadd+0x7e>
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	42ab      	cmp	r3, r5
 80070c6:	dc19      	bgt.n	80070fc <__multadd+0x74>
 80070c8:	6861      	ldr	r1, [r4, #4]
 80070ca:	4638      	mov	r0, r7
 80070cc:	3101      	adds	r1, #1
 80070ce:	f7ff ff79 	bl	8006fc4 <_Balloc>
 80070d2:	4680      	mov	r8, r0
 80070d4:	b928      	cbnz	r0, 80070e2 <__multadd+0x5a>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <__multadd+0x84>)
 80070da:	480d      	ldr	r0, [pc, #52]	; (8007110 <__multadd+0x88>)
 80070dc:	21b5      	movs	r1, #181	; 0xb5
 80070de:	f000 fe6b 	bl	8007db8 <__assert_func>
 80070e2:	6922      	ldr	r2, [r4, #16]
 80070e4:	3202      	adds	r2, #2
 80070e6:	f104 010c 	add.w	r1, r4, #12
 80070ea:	0092      	lsls	r2, r2, #2
 80070ec:	300c      	adds	r0, #12
 80070ee:	f7ff ff5b 	bl	8006fa8 <memcpy>
 80070f2:	4621      	mov	r1, r4
 80070f4:	4638      	mov	r0, r7
 80070f6:	f7ff ffa5 	bl	8007044 <_Bfree>
 80070fa:	4644      	mov	r4, r8
 80070fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007100:	3501      	adds	r5, #1
 8007102:	615e      	str	r6, [r3, #20]
 8007104:	6125      	str	r5, [r4, #16]
 8007106:	4620      	mov	r0, r4
 8007108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800710c:	0800831b 	.word	0x0800831b
 8007110:	0800838c 	.word	0x0800838c

08007114 <__hi0bits>:
 8007114:	0c03      	lsrs	r3, r0, #16
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	b9d3      	cbnz	r3, 8007150 <__hi0bits+0x3c>
 800711a:	0400      	lsls	r0, r0, #16
 800711c:	2310      	movs	r3, #16
 800711e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007122:	bf04      	itt	eq
 8007124:	0200      	lsleq	r0, r0, #8
 8007126:	3308      	addeq	r3, #8
 8007128:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800712c:	bf04      	itt	eq
 800712e:	0100      	lsleq	r0, r0, #4
 8007130:	3304      	addeq	r3, #4
 8007132:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007136:	bf04      	itt	eq
 8007138:	0080      	lsleq	r0, r0, #2
 800713a:	3302      	addeq	r3, #2
 800713c:	2800      	cmp	r0, #0
 800713e:	db05      	blt.n	800714c <__hi0bits+0x38>
 8007140:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007144:	f103 0301 	add.w	r3, r3, #1
 8007148:	bf08      	it	eq
 800714a:	2320      	moveq	r3, #32
 800714c:	4618      	mov	r0, r3
 800714e:	4770      	bx	lr
 8007150:	2300      	movs	r3, #0
 8007152:	e7e4      	b.n	800711e <__hi0bits+0xa>

08007154 <__lo0bits>:
 8007154:	6803      	ldr	r3, [r0, #0]
 8007156:	f013 0207 	ands.w	r2, r3, #7
 800715a:	4601      	mov	r1, r0
 800715c:	d00b      	beq.n	8007176 <__lo0bits+0x22>
 800715e:	07da      	lsls	r2, r3, #31
 8007160:	d423      	bmi.n	80071aa <__lo0bits+0x56>
 8007162:	0798      	lsls	r0, r3, #30
 8007164:	bf49      	itett	mi
 8007166:	085b      	lsrmi	r3, r3, #1
 8007168:	089b      	lsrpl	r3, r3, #2
 800716a:	2001      	movmi	r0, #1
 800716c:	600b      	strmi	r3, [r1, #0]
 800716e:	bf5c      	itt	pl
 8007170:	600b      	strpl	r3, [r1, #0]
 8007172:	2002      	movpl	r0, #2
 8007174:	4770      	bx	lr
 8007176:	b298      	uxth	r0, r3
 8007178:	b9a8      	cbnz	r0, 80071a6 <__lo0bits+0x52>
 800717a:	0c1b      	lsrs	r3, r3, #16
 800717c:	2010      	movs	r0, #16
 800717e:	b2da      	uxtb	r2, r3
 8007180:	b90a      	cbnz	r2, 8007186 <__lo0bits+0x32>
 8007182:	3008      	adds	r0, #8
 8007184:	0a1b      	lsrs	r3, r3, #8
 8007186:	071a      	lsls	r2, r3, #28
 8007188:	bf04      	itt	eq
 800718a:	091b      	lsreq	r3, r3, #4
 800718c:	3004      	addeq	r0, #4
 800718e:	079a      	lsls	r2, r3, #30
 8007190:	bf04      	itt	eq
 8007192:	089b      	lsreq	r3, r3, #2
 8007194:	3002      	addeq	r0, #2
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d403      	bmi.n	80071a2 <__lo0bits+0x4e>
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	f100 0001 	add.w	r0, r0, #1
 80071a0:	d005      	beq.n	80071ae <__lo0bits+0x5a>
 80071a2:	600b      	str	r3, [r1, #0]
 80071a4:	4770      	bx	lr
 80071a6:	4610      	mov	r0, r2
 80071a8:	e7e9      	b.n	800717e <__lo0bits+0x2a>
 80071aa:	2000      	movs	r0, #0
 80071ac:	4770      	bx	lr
 80071ae:	2020      	movs	r0, #32
 80071b0:	4770      	bx	lr
	...

080071b4 <__i2b>:
 80071b4:	b510      	push	{r4, lr}
 80071b6:	460c      	mov	r4, r1
 80071b8:	2101      	movs	r1, #1
 80071ba:	f7ff ff03 	bl	8006fc4 <_Balloc>
 80071be:	4602      	mov	r2, r0
 80071c0:	b928      	cbnz	r0, 80071ce <__i2b+0x1a>
 80071c2:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <__i2b+0x24>)
 80071c4:	4805      	ldr	r0, [pc, #20]	; (80071dc <__i2b+0x28>)
 80071c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80071ca:	f000 fdf5 	bl	8007db8 <__assert_func>
 80071ce:	2301      	movs	r3, #1
 80071d0:	6144      	str	r4, [r0, #20]
 80071d2:	6103      	str	r3, [r0, #16]
 80071d4:	bd10      	pop	{r4, pc}
 80071d6:	bf00      	nop
 80071d8:	0800831b 	.word	0x0800831b
 80071dc:	0800838c 	.word	0x0800838c

080071e0 <__multiply>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	4691      	mov	r9, r2
 80071e6:	690a      	ldr	r2, [r1, #16]
 80071e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bfb8      	it	lt
 80071f0:	460b      	movlt	r3, r1
 80071f2:	460c      	mov	r4, r1
 80071f4:	bfbc      	itt	lt
 80071f6:	464c      	movlt	r4, r9
 80071f8:	4699      	movlt	r9, r3
 80071fa:	6927      	ldr	r7, [r4, #16]
 80071fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007200:	68a3      	ldr	r3, [r4, #8]
 8007202:	6861      	ldr	r1, [r4, #4]
 8007204:	eb07 060a 	add.w	r6, r7, sl
 8007208:	42b3      	cmp	r3, r6
 800720a:	b085      	sub	sp, #20
 800720c:	bfb8      	it	lt
 800720e:	3101      	addlt	r1, #1
 8007210:	f7ff fed8 	bl	8006fc4 <_Balloc>
 8007214:	b930      	cbnz	r0, 8007224 <__multiply+0x44>
 8007216:	4602      	mov	r2, r0
 8007218:	4b44      	ldr	r3, [pc, #272]	; (800732c <__multiply+0x14c>)
 800721a:	4845      	ldr	r0, [pc, #276]	; (8007330 <__multiply+0x150>)
 800721c:	f240 115d 	movw	r1, #349	; 0x15d
 8007220:	f000 fdca 	bl	8007db8 <__assert_func>
 8007224:	f100 0514 	add.w	r5, r0, #20
 8007228:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800722c:	462b      	mov	r3, r5
 800722e:	2200      	movs	r2, #0
 8007230:	4543      	cmp	r3, r8
 8007232:	d321      	bcc.n	8007278 <__multiply+0x98>
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800723c:	f109 0314 	add.w	r3, r9, #20
 8007240:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007244:	9202      	str	r2, [sp, #8]
 8007246:	1b3a      	subs	r2, r7, r4
 8007248:	3a15      	subs	r2, #21
 800724a:	f022 0203 	bic.w	r2, r2, #3
 800724e:	3204      	adds	r2, #4
 8007250:	f104 0115 	add.w	r1, r4, #21
 8007254:	428f      	cmp	r7, r1
 8007256:	bf38      	it	cc
 8007258:	2204      	movcc	r2, #4
 800725a:	9201      	str	r2, [sp, #4]
 800725c:	9a02      	ldr	r2, [sp, #8]
 800725e:	9303      	str	r3, [sp, #12]
 8007260:	429a      	cmp	r2, r3
 8007262:	d80c      	bhi.n	800727e <__multiply+0x9e>
 8007264:	2e00      	cmp	r6, #0
 8007266:	dd03      	ble.n	8007270 <__multiply+0x90>
 8007268:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800726c:	2b00      	cmp	r3, #0
 800726e:	d05a      	beq.n	8007326 <__multiply+0x146>
 8007270:	6106      	str	r6, [r0, #16]
 8007272:	b005      	add	sp, #20
 8007274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007278:	f843 2b04 	str.w	r2, [r3], #4
 800727c:	e7d8      	b.n	8007230 <__multiply+0x50>
 800727e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007282:	f1ba 0f00 	cmp.w	sl, #0
 8007286:	d024      	beq.n	80072d2 <__multiply+0xf2>
 8007288:	f104 0e14 	add.w	lr, r4, #20
 800728c:	46a9      	mov	r9, r5
 800728e:	f04f 0c00 	mov.w	ip, #0
 8007292:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007296:	f8d9 1000 	ldr.w	r1, [r9]
 800729a:	fa1f fb82 	uxth.w	fp, r2
 800729e:	b289      	uxth	r1, r1
 80072a0:	fb0a 110b 	mla	r1, sl, fp, r1
 80072a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072a8:	f8d9 2000 	ldr.w	r2, [r9]
 80072ac:	4461      	add	r1, ip
 80072ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072b2:	fb0a c20b 	mla	r2, sl, fp, ip
 80072b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072ba:	b289      	uxth	r1, r1
 80072bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072c0:	4577      	cmp	r7, lr
 80072c2:	f849 1b04 	str.w	r1, [r9], #4
 80072c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072ca:	d8e2      	bhi.n	8007292 <__multiply+0xb2>
 80072cc:	9a01      	ldr	r2, [sp, #4]
 80072ce:	f845 c002 	str.w	ip, [r5, r2]
 80072d2:	9a03      	ldr	r2, [sp, #12]
 80072d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80072d8:	3304      	adds	r3, #4
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	d020      	beq.n	8007322 <__multiply+0x142>
 80072e0:	6829      	ldr	r1, [r5, #0]
 80072e2:	f104 0c14 	add.w	ip, r4, #20
 80072e6:	46ae      	mov	lr, r5
 80072e8:	f04f 0a00 	mov.w	sl, #0
 80072ec:	f8bc b000 	ldrh.w	fp, [ip]
 80072f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072f4:	fb09 220b 	mla	r2, r9, fp, r2
 80072f8:	4492      	add	sl, r2
 80072fa:	b289      	uxth	r1, r1
 80072fc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007300:	f84e 1b04 	str.w	r1, [lr], #4
 8007304:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007308:	f8be 1000 	ldrh.w	r1, [lr]
 800730c:	0c12      	lsrs	r2, r2, #16
 800730e:	fb09 1102 	mla	r1, r9, r2, r1
 8007312:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007316:	4567      	cmp	r7, ip
 8007318:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800731c:	d8e6      	bhi.n	80072ec <__multiply+0x10c>
 800731e:	9a01      	ldr	r2, [sp, #4]
 8007320:	50a9      	str	r1, [r5, r2]
 8007322:	3504      	adds	r5, #4
 8007324:	e79a      	b.n	800725c <__multiply+0x7c>
 8007326:	3e01      	subs	r6, #1
 8007328:	e79c      	b.n	8007264 <__multiply+0x84>
 800732a:	bf00      	nop
 800732c:	0800831b 	.word	0x0800831b
 8007330:	0800838c 	.word	0x0800838c

08007334 <__pow5mult>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4615      	mov	r5, r2
 800733a:	f012 0203 	ands.w	r2, r2, #3
 800733e:	4606      	mov	r6, r0
 8007340:	460f      	mov	r7, r1
 8007342:	d007      	beq.n	8007354 <__pow5mult+0x20>
 8007344:	4c25      	ldr	r4, [pc, #148]	; (80073dc <__pow5mult+0xa8>)
 8007346:	3a01      	subs	r2, #1
 8007348:	2300      	movs	r3, #0
 800734a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800734e:	f7ff fe9b 	bl	8007088 <__multadd>
 8007352:	4607      	mov	r7, r0
 8007354:	10ad      	asrs	r5, r5, #2
 8007356:	d03d      	beq.n	80073d4 <__pow5mult+0xa0>
 8007358:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800735a:	b97c      	cbnz	r4, 800737c <__pow5mult+0x48>
 800735c:	2010      	movs	r0, #16
 800735e:	f7ff fe1b 	bl	8006f98 <malloc>
 8007362:	4602      	mov	r2, r0
 8007364:	6270      	str	r0, [r6, #36]	; 0x24
 8007366:	b928      	cbnz	r0, 8007374 <__pow5mult+0x40>
 8007368:	4b1d      	ldr	r3, [pc, #116]	; (80073e0 <__pow5mult+0xac>)
 800736a:	481e      	ldr	r0, [pc, #120]	; (80073e4 <__pow5mult+0xb0>)
 800736c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007370:	f000 fd22 	bl	8007db8 <__assert_func>
 8007374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007378:	6004      	str	r4, [r0, #0]
 800737a:	60c4      	str	r4, [r0, #12]
 800737c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007384:	b94c      	cbnz	r4, 800739a <__pow5mult+0x66>
 8007386:	f240 2171 	movw	r1, #625	; 0x271
 800738a:	4630      	mov	r0, r6
 800738c:	f7ff ff12 	bl	80071b4 <__i2b>
 8007390:	2300      	movs	r3, #0
 8007392:	f8c8 0008 	str.w	r0, [r8, #8]
 8007396:	4604      	mov	r4, r0
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	07eb      	lsls	r3, r5, #31
 80073a0:	d50a      	bpl.n	80073b8 <__pow5mult+0x84>
 80073a2:	4639      	mov	r1, r7
 80073a4:	4622      	mov	r2, r4
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff ff1a 	bl	80071e0 <__multiply>
 80073ac:	4639      	mov	r1, r7
 80073ae:	4680      	mov	r8, r0
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7ff fe47 	bl	8007044 <_Bfree>
 80073b6:	4647      	mov	r7, r8
 80073b8:	106d      	asrs	r5, r5, #1
 80073ba:	d00b      	beq.n	80073d4 <__pow5mult+0xa0>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	b938      	cbnz	r0, 80073d0 <__pow5mult+0x9c>
 80073c0:	4622      	mov	r2, r4
 80073c2:	4621      	mov	r1, r4
 80073c4:	4630      	mov	r0, r6
 80073c6:	f7ff ff0b 	bl	80071e0 <__multiply>
 80073ca:	6020      	str	r0, [r4, #0]
 80073cc:	f8c0 9000 	str.w	r9, [r0]
 80073d0:	4604      	mov	r4, r0
 80073d2:	e7e4      	b.n	800739e <__pow5mult+0x6a>
 80073d4:	4638      	mov	r0, r7
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	bf00      	nop
 80073dc:	080084d8 	.word	0x080084d8
 80073e0:	080082a9 	.word	0x080082a9
 80073e4:	0800838c 	.word	0x0800838c

080073e8 <__lshift>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	460c      	mov	r4, r1
 80073ee:	6849      	ldr	r1, [r1, #4]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	4607      	mov	r7, r0
 80073fa:	4691      	mov	r9, r2
 80073fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007400:	f108 0601 	add.w	r6, r8, #1
 8007404:	42b3      	cmp	r3, r6
 8007406:	db0b      	blt.n	8007420 <__lshift+0x38>
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff fddb 	bl	8006fc4 <_Balloc>
 800740e:	4605      	mov	r5, r0
 8007410:	b948      	cbnz	r0, 8007426 <__lshift+0x3e>
 8007412:	4602      	mov	r2, r0
 8007414:	4b2a      	ldr	r3, [pc, #168]	; (80074c0 <__lshift+0xd8>)
 8007416:	482b      	ldr	r0, [pc, #172]	; (80074c4 <__lshift+0xdc>)
 8007418:	f240 11d9 	movw	r1, #473	; 0x1d9
 800741c:	f000 fccc 	bl	8007db8 <__assert_func>
 8007420:	3101      	adds	r1, #1
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	e7ee      	b.n	8007404 <__lshift+0x1c>
 8007426:	2300      	movs	r3, #0
 8007428:	f100 0114 	add.w	r1, r0, #20
 800742c:	f100 0210 	add.w	r2, r0, #16
 8007430:	4618      	mov	r0, r3
 8007432:	4553      	cmp	r3, sl
 8007434:	db37      	blt.n	80074a6 <__lshift+0xbe>
 8007436:	6920      	ldr	r0, [r4, #16]
 8007438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800743c:	f104 0314 	add.w	r3, r4, #20
 8007440:	f019 091f 	ands.w	r9, r9, #31
 8007444:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007448:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800744c:	d02f      	beq.n	80074ae <__lshift+0xc6>
 800744e:	f1c9 0e20 	rsb	lr, r9, #32
 8007452:	468a      	mov	sl, r1
 8007454:	f04f 0c00 	mov.w	ip, #0
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	fa02 f209 	lsl.w	r2, r2, r9
 800745e:	ea42 020c 	orr.w	r2, r2, ip
 8007462:	f84a 2b04 	str.w	r2, [sl], #4
 8007466:	f853 2b04 	ldr.w	r2, [r3], #4
 800746a:	4298      	cmp	r0, r3
 800746c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007470:	d8f2      	bhi.n	8007458 <__lshift+0x70>
 8007472:	1b03      	subs	r3, r0, r4
 8007474:	3b15      	subs	r3, #21
 8007476:	f023 0303 	bic.w	r3, r3, #3
 800747a:	3304      	adds	r3, #4
 800747c:	f104 0215 	add.w	r2, r4, #21
 8007480:	4290      	cmp	r0, r2
 8007482:	bf38      	it	cc
 8007484:	2304      	movcc	r3, #4
 8007486:	f841 c003 	str.w	ip, [r1, r3]
 800748a:	f1bc 0f00 	cmp.w	ip, #0
 800748e:	d001      	beq.n	8007494 <__lshift+0xac>
 8007490:	f108 0602 	add.w	r6, r8, #2
 8007494:	3e01      	subs	r6, #1
 8007496:	4638      	mov	r0, r7
 8007498:	612e      	str	r6, [r5, #16]
 800749a:	4621      	mov	r1, r4
 800749c:	f7ff fdd2 	bl	8007044 <_Bfree>
 80074a0:	4628      	mov	r0, r5
 80074a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80074aa:	3301      	adds	r3, #1
 80074ac:	e7c1      	b.n	8007432 <__lshift+0x4a>
 80074ae:	3904      	subs	r1, #4
 80074b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80074b8:	4298      	cmp	r0, r3
 80074ba:	d8f9      	bhi.n	80074b0 <__lshift+0xc8>
 80074bc:	e7ea      	b.n	8007494 <__lshift+0xac>
 80074be:	bf00      	nop
 80074c0:	0800831b 	.word	0x0800831b
 80074c4:	0800838c 	.word	0x0800838c

080074c8 <__mcmp>:
 80074c8:	b530      	push	{r4, r5, lr}
 80074ca:	6902      	ldr	r2, [r0, #16]
 80074cc:	690c      	ldr	r4, [r1, #16]
 80074ce:	1b12      	subs	r2, r2, r4
 80074d0:	d10e      	bne.n	80074f0 <__mcmp+0x28>
 80074d2:	f100 0314 	add.w	r3, r0, #20
 80074d6:	3114      	adds	r1, #20
 80074d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80074dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80074e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80074e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80074e8:	42a5      	cmp	r5, r4
 80074ea:	d003      	beq.n	80074f4 <__mcmp+0x2c>
 80074ec:	d305      	bcc.n	80074fa <__mcmp+0x32>
 80074ee:	2201      	movs	r2, #1
 80074f0:	4610      	mov	r0, r2
 80074f2:	bd30      	pop	{r4, r5, pc}
 80074f4:	4283      	cmp	r3, r0
 80074f6:	d3f3      	bcc.n	80074e0 <__mcmp+0x18>
 80074f8:	e7fa      	b.n	80074f0 <__mcmp+0x28>
 80074fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074fe:	e7f7      	b.n	80074f0 <__mcmp+0x28>

08007500 <__mdiff>:
 8007500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007504:	460c      	mov	r4, r1
 8007506:	4606      	mov	r6, r0
 8007508:	4611      	mov	r1, r2
 800750a:	4620      	mov	r0, r4
 800750c:	4690      	mov	r8, r2
 800750e:	f7ff ffdb 	bl	80074c8 <__mcmp>
 8007512:	1e05      	subs	r5, r0, #0
 8007514:	d110      	bne.n	8007538 <__mdiff+0x38>
 8007516:	4629      	mov	r1, r5
 8007518:	4630      	mov	r0, r6
 800751a:	f7ff fd53 	bl	8006fc4 <_Balloc>
 800751e:	b930      	cbnz	r0, 800752e <__mdiff+0x2e>
 8007520:	4b3a      	ldr	r3, [pc, #232]	; (800760c <__mdiff+0x10c>)
 8007522:	4602      	mov	r2, r0
 8007524:	f240 2132 	movw	r1, #562	; 0x232
 8007528:	4839      	ldr	r0, [pc, #228]	; (8007610 <__mdiff+0x110>)
 800752a:	f000 fc45 	bl	8007db8 <__assert_func>
 800752e:	2301      	movs	r3, #1
 8007530:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007538:	bfa4      	itt	ge
 800753a:	4643      	movge	r3, r8
 800753c:	46a0      	movge	r8, r4
 800753e:	4630      	mov	r0, r6
 8007540:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007544:	bfa6      	itte	ge
 8007546:	461c      	movge	r4, r3
 8007548:	2500      	movge	r5, #0
 800754a:	2501      	movlt	r5, #1
 800754c:	f7ff fd3a 	bl	8006fc4 <_Balloc>
 8007550:	b920      	cbnz	r0, 800755c <__mdiff+0x5c>
 8007552:	4b2e      	ldr	r3, [pc, #184]	; (800760c <__mdiff+0x10c>)
 8007554:	4602      	mov	r2, r0
 8007556:	f44f 7110 	mov.w	r1, #576	; 0x240
 800755a:	e7e5      	b.n	8007528 <__mdiff+0x28>
 800755c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007560:	6926      	ldr	r6, [r4, #16]
 8007562:	60c5      	str	r5, [r0, #12]
 8007564:	f104 0914 	add.w	r9, r4, #20
 8007568:	f108 0514 	add.w	r5, r8, #20
 800756c:	f100 0e14 	add.w	lr, r0, #20
 8007570:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007574:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007578:	f108 0210 	add.w	r2, r8, #16
 800757c:	46f2      	mov	sl, lr
 800757e:	2100      	movs	r1, #0
 8007580:	f859 3b04 	ldr.w	r3, [r9], #4
 8007584:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007588:	fa1f f883 	uxth.w	r8, r3
 800758c:	fa11 f18b 	uxtah	r1, r1, fp
 8007590:	0c1b      	lsrs	r3, r3, #16
 8007592:	eba1 0808 	sub.w	r8, r1, r8
 8007596:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800759a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800759e:	fa1f f888 	uxth.w	r8, r8
 80075a2:	1419      	asrs	r1, r3, #16
 80075a4:	454e      	cmp	r6, r9
 80075a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075aa:	f84a 3b04 	str.w	r3, [sl], #4
 80075ae:	d8e7      	bhi.n	8007580 <__mdiff+0x80>
 80075b0:	1b33      	subs	r3, r6, r4
 80075b2:	3b15      	subs	r3, #21
 80075b4:	f023 0303 	bic.w	r3, r3, #3
 80075b8:	3304      	adds	r3, #4
 80075ba:	3415      	adds	r4, #21
 80075bc:	42a6      	cmp	r6, r4
 80075be:	bf38      	it	cc
 80075c0:	2304      	movcc	r3, #4
 80075c2:	441d      	add	r5, r3
 80075c4:	4473      	add	r3, lr
 80075c6:	469e      	mov	lr, r3
 80075c8:	462e      	mov	r6, r5
 80075ca:	4566      	cmp	r6, ip
 80075cc:	d30e      	bcc.n	80075ec <__mdiff+0xec>
 80075ce:	f10c 0203 	add.w	r2, ip, #3
 80075d2:	1b52      	subs	r2, r2, r5
 80075d4:	f022 0203 	bic.w	r2, r2, #3
 80075d8:	3d03      	subs	r5, #3
 80075da:	45ac      	cmp	ip, r5
 80075dc:	bf38      	it	cc
 80075de:	2200      	movcc	r2, #0
 80075e0:	441a      	add	r2, r3
 80075e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80075e6:	b17b      	cbz	r3, 8007608 <__mdiff+0x108>
 80075e8:	6107      	str	r7, [r0, #16]
 80075ea:	e7a3      	b.n	8007534 <__mdiff+0x34>
 80075ec:	f856 8b04 	ldr.w	r8, [r6], #4
 80075f0:	fa11 f288 	uxtah	r2, r1, r8
 80075f4:	1414      	asrs	r4, r2, #16
 80075f6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075fa:	b292      	uxth	r2, r2
 80075fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007600:	f84e 2b04 	str.w	r2, [lr], #4
 8007604:	1421      	asrs	r1, r4, #16
 8007606:	e7e0      	b.n	80075ca <__mdiff+0xca>
 8007608:	3f01      	subs	r7, #1
 800760a:	e7ea      	b.n	80075e2 <__mdiff+0xe2>
 800760c:	0800831b 	.word	0x0800831b
 8007610:	0800838c 	.word	0x0800838c

08007614 <__d2b>:
 8007614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007618:	4689      	mov	r9, r1
 800761a:	2101      	movs	r1, #1
 800761c:	ec57 6b10 	vmov	r6, r7, d0
 8007620:	4690      	mov	r8, r2
 8007622:	f7ff fccf 	bl	8006fc4 <_Balloc>
 8007626:	4604      	mov	r4, r0
 8007628:	b930      	cbnz	r0, 8007638 <__d2b+0x24>
 800762a:	4602      	mov	r2, r0
 800762c:	4b25      	ldr	r3, [pc, #148]	; (80076c4 <__d2b+0xb0>)
 800762e:	4826      	ldr	r0, [pc, #152]	; (80076c8 <__d2b+0xb4>)
 8007630:	f240 310a 	movw	r1, #778	; 0x30a
 8007634:	f000 fbc0 	bl	8007db8 <__assert_func>
 8007638:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800763c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007640:	bb35      	cbnz	r5, 8007690 <__d2b+0x7c>
 8007642:	2e00      	cmp	r6, #0
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	d028      	beq.n	800769a <__d2b+0x86>
 8007648:	4668      	mov	r0, sp
 800764a:	9600      	str	r6, [sp, #0]
 800764c:	f7ff fd82 	bl	8007154 <__lo0bits>
 8007650:	9900      	ldr	r1, [sp, #0]
 8007652:	b300      	cbz	r0, 8007696 <__d2b+0x82>
 8007654:	9a01      	ldr	r2, [sp, #4]
 8007656:	f1c0 0320 	rsb	r3, r0, #32
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	430b      	orrs	r3, r1
 8007660:	40c2      	lsrs	r2, r0
 8007662:	6163      	str	r3, [r4, #20]
 8007664:	9201      	str	r2, [sp, #4]
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	61a3      	str	r3, [r4, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	bf14      	ite	ne
 800766e:	2202      	movne	r2, #2
 8007670:	2201      	moveq	r2, #1
 8007672:	6122      	str	r2, [r4, #16]
 8007674:	b1d5      	cbz	r5, 80076ac <__d2b+0x98>
 8007676:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800767a:	4405      	add	r5, r0
 800767c:	f8c9 5000 	str.w	r5, [r9]
 8007680:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007684:	f8c8 0000 	str.w	r0, [r8]
 8007688:	4620      	mov	r0, r4
 800768a:	b003      	add	sp, #12
 800768c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007690:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007694:	e7d5      	b.n	8007642 <__d2b+0x2e>
 8007696:	6161      	str	r1, [r4, #20]
 8007698:	e7e5      	b.n	8007666 <__d2b+0x52>
 800769a:	a801      	add	r0, sp, #4
 800769c:	f7ff fd5a 	bl	8007154 <__lo0bits>
 80076a0:	9b01      	ldr	r3, [sp, #4]
 80076a2:	6163      	str	r3, [r4, #20]
 80076a4:	2201      	movs	r2, #1
 80076a6:	6122      	str	r2, [r4, #16]
 80076a8:	3020      	adds	r0, #32
 80076aa:	e7e3      	b.n	8007674 <__d2b+0x60>
 80076ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076b4:	f8c9 0000 	str.w	r0, [r9]
 80076b8:	6918      	ldr	r0, [r3, #16]
 80076ba:	f7ff fd2b 	bl	8007114 <__hi0bits>
 80076be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076c2:	e7df      	b.n	8007684 <__d2b+0x70>
 80076c4:	0800831b 	.word	0x0800831b
 80076c8:	0800838c 	.word	0x0800838c

080076cc <_calloc_r>:
 80076cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ce:	fba1 2402 	umull	r2, r4, r1, r2
 80076d2:	b94c      	cbnz	r4, 80076e8 <_calloc_r+0x1c>
 80076d4:	4611      	mov	r1, r2
 80076d6:	9201      	str	r2, [sp, #4]
 80076d8:	f000 f87a 	bl	80077d0 <_malloc_r>
 80076dc:	9a01      	ldr	r2, [sp, #4]
 80076de:	4605      	mov	r5, r0
 80076e0:	b930      	cbnz	r0, 80076f0 <_calloc_r+0x24>
 80076e2:	4628      	mov	r0, r5
 80076e4:	b003      	add	sp, #12
 80076e6:	bd30      	pop	{r4, r5, pc}
 80076e8:	220c      	movs	r2, #12
 80076ea:	6002      	str	r2, [r0, #0]
 80076ec:	2500      	movs	r5, #0
 80076ee:	e7f8      	b.n	80076e2 <_calloc_r+0x16>
 80076f0:	4621      	mov	r1, r4
 80076f2:	f7fe f8f5 	bl	80058e0 <memset>
 80076f6:	e7f4      	b.n	80076e2 <_calloc_r+0x16>

080076f8 <_free_r>:
 80076f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076fa:	2900      	cmp	r1, #0
 80076fc:	d044      	beq.n	8007788 <_free_r+0x90>
 80076fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007702:	9001      	str	r0, [sp, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f1a1 0404 	sub.w	r4, r1, #4
 800770a:	bfb8      	it	lt
 800770c:	18e4      	addlt	r4, r4, r3
 800770e:	f000 fcdf 	bl	80080d0 <__malloc_lock>
 8007712:	4a1e      	ldr	r2, [pc, #120]	; (800778c <_free_r+0x94>)
 8007714:	9801      	ldr	r0, [sp, #4]
 8007716:	6813      	ldr	r3, [r2, #0]
 8007718:	b933      	cbnz	r3, 8007728 <_free_r+0x30>
 800771a:	6063      	str	r3, [r4, #4]
 800771c:	6014      	str	r4, [r2, #0]
 800771e:	b003      	add	sp, #12
 8007720:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007724:	f000 bcda 	b.w	80080dc <__malloc_unlock>
 8007728:	42a3      	cmp	r3, r4
 800772a:	d908      	bls.n	800773e <_free_r+0x46>
 800772c:	6825      	ldr	r5, [r4, #0]
 800772e:	1961      	adds	r1, r4, r5
 8007730:	428b      	cmp	r3, r1
 8007732:	bf01      	itttt	eq
 8007734:	6819      	ldreq	r1, [r3, #0]
 8007736:	685b      	ldreq	r3, [r3, #4]
 8007738:	1949      	addeq	r1, r1, r5
 800773a:	6021      	streq	r1, [r4, #0]
 800773c:	e7ed      	b.n	800771a <_free_r+0x22>
 800773e:	461a      	mov	r2, r3
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	b10b      	cbz	r3, 8007748 <_free_r+0x50>
 8007744:	42a3      	cmp	r3, r4
 8007746:	d9fa      	bls.n	800773e <_free_r+0x46>
 8007748:	6811      	ldr	r1, [r2, #0]
 800774a:	1855      	adds	r5, r2, r1
 800774c:	42a5      	cmp	r5, r4
 800774e:	d10b      	bne.n	8007768 <_free_r+0x70>
 8007750:	6824      	ldr	r4, [r4, #0]
 8007752:	4421      	add	r1, r4
 8007754:	1854      	adds	r4, r2, r1
 8007756:	42a3      	cmp	r3, r4
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	d1e0      	bne.n	800771e <_free_r+0x26>
 800775c:	681c      	ldr	r4, [r3, #0]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	6053      	str	r3, [r2, #4]
 8007762:	4421      	add	r1, r4
 8007764:	6011      	str	r1, [r2, #0]
 8007766:	e7da      	b.n	800771e <_free_r+0x26>
 8007768:	d902      	bls.n	8007770 <_free_r+0x78>
 800776a:	230c      	movs	r3, #12
 800776c:	6003      	str	r3, [r0, #0]
 800776e:	e7d6      	b.n	800771e <_free_r+0x26>
 8007770:	6825      	ldr	r5, [r4, #0]
 8007772:	1961      	adds	r1, r4, r5
 8007774:	428b      	cmp	r3, r1
 8007776:	bf04      	itt	eq
 8007778:	6819      	ldreq	r1, [r3, #0]
 800777a:	685b      	ldreq	r3, [r3, #4]
 800777c:	6063      	str	r3, [r4, #4]
 800777e:	bf04      	itt	eq
 8007780:	1949      	addeq	r1, r1, r5
 8007782:	6021      	streq	r1, [r4, #0]
 8007784:	6054      	str	r4, [r2, #4]
 8007786:	e7ca      	b.n	800771e <_free_r+0x26>
 8007788:	b003      	add	sp, #12
 800778a:	bd30      	pop	{r4, r5, pc}
 800778c:	24000330 	.word	0x24000330

08007790 <sbrk_aligned>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	4e0e      	ldr	r6, [pc, #56]	; (80077cc <sbrk_aligned+0x3c>)
 8007794:	460c      	mov	r4, r1
 8007796:	6831      	ldr	r1, [r6, #0]
 8007798:	4605      	mov	r5, r0
 800779a:	b911      	cbnz	r1, 80077a2 <sbrk_aligned+0x12>
 800779c:	f000 f9e6 	bl	8007b6c <_sbrk_r>
 80077a0:	6030      	str	r0, [r6, #0]
 80077a2:	4621      	mov	r1, r4
 80077a4:	4628      	mov	r0, r5
 80077a6:	f000 f9e1 	bl	8007b6c <_sbrk_r>
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	d00a      	beq.n	80077c4 <sbrk_aligned+0x34>
 80077ae:	1cc4      	adds	r4, r0, #3
 80077b0:	f024 0403 	bic.w	r4, r4, #3
 80077b4:	42a0      	cmp	r0, r4
 80077b6:	d007      	beq.n	80077c8 <sbrk_aligned+0x38>
 80077b8:	1a21      	subs	r1, r4, r0
 80077ba:	4628      	mov	r0, r5
 80077bc:	f000 f9d6 	bl	8007b6c <_sbrk_r>
 80077c0:	3001      	adds	r0, #1
 80077c2:	d101      	bne.n	80077c8 <sbrk_aligned+0x38>
 80077c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077c8:	4620      	mov	r0, r4
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	24000334 	.word	0x24000334

080077d0 <_malloc_r>:
 80077d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077d4:	1ccd      	adds	r5, r1, #3
 80077d6:	f025 0503 	bic.w	r5, r5, #3
 80077da:	3508      	adds	r5, #8
 80077dc:	2d0c      	cmp	r5, #12
 80077de:	bf38      	it	cc
 80077e0:	250c      	movcc	r5, #12
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	4607      	mov	r7, r0
 80077e6:	db01      	blt.n	80077ec <_malloc_r+0x1c>
 80077e8:	42a9      	cmp	r1, r5
 80077ea:	d905      	bls.n	80077f8 <_malloc_r+0x28>
 80077ec:	230c      	movs	r3, #12
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	2600      	movs	r6, #0
 80077f2:	4630      	mov	r0, r6
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	4e2e      	ldr	r6, [pc, #184]	; (80078b4 <_malloc_r+0xe4>)
 80077fa:	f000 fc69 	bl	80080d0 <__malloc_lock>
 80077fe:	6833      	ldr	r3, [r6, #0]
 8007800:	461c      	mov	r4, r3
 8007802:	bb34      	cbnz	r4, 8007852 <_malloc_r+0x82>
 8007804:	4629      	mov	r1, r5
 8007806:	4638      	mov	r0, r7
 8007808:	f7ff ffc2 	bl	8007790 <sbrk_aligned>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	4604      	mov	r4, r0
 8007810:	d14d      	bne.n	80078ae <_malloc_r+0xde>
 8007812:	6834      	ldr	r4, [r6, #0]
 8007814:	4626      	mov	r6, r4
 8007816:	2e00      	cmp	r6, #0
 8007818:	d140      	bne.n	800789c <_malloc_r+0xcc>
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	4631      	mov	r1, r6
 800781e:	4638      	mov	r0, r7
 8007820:	eb04 0803 	add.w	r8, r4, r3
 8007824:	f000 f9a2 	bl	8007b6c <_sbrk_r>
 8007828:	4580      	cmp	r8, r0
 800782a:	d13a      	bne.n	80078a2 <_malloc_r+0xd2>
 800782c:	6821      	ldr	r1, [r4, #0]
 800782e:	3503      	adds	r5, #3
 8007830:	1a6d      	subs	r5, r5, r1
 8007832:	f025 0503 	bic.w	r5, r5, #3
 8007836:	3508      	adds	r5, #8
 8007838:	2d0c      	cmp	r5, #12
 800783a:	bf38      	it	cc
 800783c:	250c      	movcc	r5, #12
 800783e:	4629      	mov	r1, r5
 8007840:	4638      	mov	r0, r7
 8007842:	f7ff ffa5 	bl	8007790 <sbrk_aligned>
 8007846:	3001      	adds	r0, #1
 8007848:	d02b      	beq.n	80078a2 <_malloc_r+0xd2>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	442b      	add	r3, r5
 800784e:	6023      	str	r3, [r4, #0]
 8007850:	e00e      	b.n	8007870 <_malloc_r+0xa0>
 8007852:	6822      	ldr	r2, [r4, #0]
 8007854:	1b52      	subs	r2, r2, r5
 8007856:	d41e      	bmi.n	8007896 <_malloc_r+0xc6>
 8007858:	2a0b      	cmp	r2, #11
 800785a:	d916      	bls.n	800788a <_malloc_r+0xba>
 800785c:	1961      	adds	r1, r4, r5
 800785e:	42a3      	cmp	r3, r4
 8007860:	6025      	str	r5, [r4, #0]
 8007862:	bf18      	it	ne
 8007864:	6059      	strne	r1, [r3, #4]
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	bf08      	it	eq
 800786a:	6031      	streq	r1, [r6, #0]
 800786c:	5162      	str	r2, [r4, r5]
 800786e:	604b      	str	r3, [r1, #4]
 8007870:	4638      	mov	r0, r7
 8007872:	f104 060b 	add.w	r6, r4, #11
 8007876:	f000 fc31 	bl	80080dc <__malloc_unlock>
 800787a:	f026 0607 	bic.w	r6, r6, #7
 800787e:	1d23      	adds	r3, r4, #4
 8007880:	1af2      	subs	r2, r6, r3
 8007882:	d0b6      	beq.n	80077f2 <_malloc_r+0x22>
 8007884:	1b9b      	subs	r3, r3, r6
 8007886:	50a3      	str	r3, [r4, r2]
 8007888:	e7b3      	b.n	80077f2 <_malloc_r+0x22>
 800788a:	6862      	ldr	r2, [r4, #4]
 800788c:	42a3      	cmp	r3, r4
 800788e:	bf0c      	ite	eq
 8007890:	6032      	streq	r2, [r6, #0]
 8007892:	605a      	strne	r2, [r3, #4]
 8007894:	e7ec      	b.n	8007870 <_malloc_r+0xa0>
 8007896:	4623      	mov	r3, r4
 8007898:	6864      	ldr	r4, [r4, #4]
 800789a:	e7b2      	b.n	8007802 <_malloc_r+0x32>
 800789c:	4634      	mov	r4, r6
 800789e:	6876      	ldr	r6, [r6, #4]
 80078a0:	e7b9      	b.n	8007816 <_malloc_r+0x46>
 80078a2:	230c      	movs	r3, #12
 80078a4:	603b      	str	r3, [r7, #0]
 80078a6:	4638      	mov	r0, r7
 80078a8:	f000 fc18 	bl	80080dc <__malloc_unlock>
 80078ac:	e7a1      	b.n	80077f2 <_malloc_r+0x22>
 80078ae:	6025      	str	r5, [r4, #0]
 80078b0:	e7de      	b.n	8007870 <_malloc_r+0xa0>
 80078b2:	bf00      	nop
 80078b4:	24000330 	.word	0x24000330

080078b8 <__sfputc_r>:
 80078b8:	6893      	ldr	r3, [r2, #8]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	b410      	push	{r4}
 80078c0:	6093      	str	r3, [r2, #8]
 80078c2:	da08      	bge.n	80078d6 <__sfputc_r+0x1e>
 80078c4:	6994      	ldr	r4, [r2, #24]
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	db01      	blt.n	80078ce <__sfputc_r+0x16>
 80078ca:	290a      	cmp	r1, #10
 80078cc:	d103      	bne.n	80078d6 <__sfputc_r+0x1e>
 80078ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078d2:	f000 b99f 	b.w	8007c14 <__swbuf_r>
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	1c58      	adds	r0, r3, #1
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	7019      	strb	r1, [r3, #0]
 80078de:	4608      	mov	r0, r1
 80078e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <__sfputs_r>:
 80078e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e8:	4606      	mov	r6, r0
 80078ea:	460f      	mov	r7, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	18d5      	adds	r5, r2, r3
 80078f0:	42ac      	cmp	r4, r5
 80078f2:	d101      	bne.n	80078f8 <__sfputs_r+0x12>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e007      	b.n	8007908 <__sfputs_r+0x22>
 80078f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fc:	463a      	mov	r2, r7
 80078fe:	4630      	mov	r0, r6
 8007900:	f7ff ffda 	bl	80078b8 <__sfputc_r>
 8007904:	1c43      	adds	r3, r0, #1
 8007906:	d1f3      	bne.n	80078f0 <__sfputs_r+0xa>
 8007908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800790c <_vfiprintf_r>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	460d      	mov	r5, r1
 8007912:	b09d      	sub	sp, #116	; 0x74
 8007914:	4614      	mov	r4, r2
 8007916:	4698      	mov	r8, r3
 8007918:	4606      	mov	r6, r0
 800791a:	b118      	cbz	r0, 8007924 <_vfiprintf_r+0x18>
 800791c:	6983      	ldr	r3, [r0, #24]
 800791e:	b90b      	cbnz	r3, 8007924 <_vfiprintf_r+0x18>
 8007920:	f7ff fa94 	bl	8006e4c <__sinit>
 8007924:	4b89      	ldr	r3, [pc, #548]	; (8007b4c <_vfiprintf_r+0x240>)
 8007926:	429d      	cmp	r5, r3
 8007928:	d11b      	bne.n	8007962 <_vfiprintf_r+0x56>
 800792a:	6875      	ldr	r5, [r6, #4]
 800792c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800792e:	07d9      	lsls	r1, r3, #31
 8007930:	d405      	bmi.n	800793e <_vfiprintf_r+0x32>
 8007932:	89ab      	ldrh	r3, [r5, #12]
 8007934:	059a      	lsls	r2, r3, #22
 8007936:	d402      	bmi.n	800793e <_vfiprintf_r+0x32>
 8007938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800793a:	f7ff fb2a 	bl	8006f92 <__retarget_lock_acquire_recursive>
 800793e:	89ab      	ldrh	r3, [r5, #12]
 8007940:	071b      	lsls	r3, r3, #28
 8007942:	d501      	bpl.n	8007948 <_vfiprintf_r+0x3c>
 8007944:	692b      	ldr	r3, [r5, #16]
 8007946:	b9eb      	cbnz	r3, 8007984 <_vfiprintf_r+0x78>
 8007948:	4629      	mov	r1, r5
 800794a:	4630      	mov	r0, r6
 800794c:	f000 f9c6 	bl	8007cdc <__swsetup_r>
 8007950:	b1c0      	cbz	r0, 8007984 <_vfiprintf_r+0x78>
 8007952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007954:	07dc      	lsls	r4, r3, #31
 8007956:	d50e      	bpl.n	8007976 <_vfiprintf_r+0x6a>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800795c:	b01d      	add	sp, #116	; 0x74
 800795e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007962:	4b7b      	ldr	r3, [pc, #492]	; (8007b50 <_vfiprintf_r+0x244>)
 8007964:	429d      	cmp	r5, r3
 8007966:	d101      	bne.n	800796c <_vfiprintf_r+0x60>
 8007968:	68b5      	ldr	r5, [r6, #8]
 800796a:	e7df      	b.n	800792c <_vfiprintf_r+0x20>
 800796c:	4b79      	ldr	r3, [pc, #484]	; (8007b54 <_vfiprintf_r+0x248>)
 800796e:	429d      	cmp	r5, r3
 8007970:	bf08      	it	eq
 8007972:	68f5      	ldreq	r5, [r6, #12]
 8007974:	e7da      	b.n	800792c <_vfiprintf_r+0x20>
 8007976:	89ab      	ldrh	r3, [r5, #12]
 8007978:	0598      	lsls	r0, r3, #22
 800797a:	d4ed      	bmi.n	8007958 <_vfiprintf_r+0x4c>
 800797c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800797e:	f7ff fb09 	bl	8006f94 <__retarget_lock_release_recursive>
 8007982:	e7e9      	b.n	8007958 <_vfiprintf_r+0x4c>
 8007984:	2300      	movs	r3, #0
 8007986:	9309      	str	r3, [sp, #36]	; 0x24
 8007988:	2320      	movs	r3, #32
 800798a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800798e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007992:	2330      	movs	r3, #48	; 0x30
 8007994:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b58 <_vfiprintf_r+0x24c>
 8007998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800799c:	f04f 0901 	mov.w	r9, #1
 80079a0:	4623      	mov	r3, r4
 80079a2:	469a      	mov	sl, r3
 80079a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079a8:	b10a      	cbz	r2, 80079ae <_vfiprintf_r+0xa2>
 80079aa:	2a25      	cmp	r2, #37	; 0x25
 80079ac:	d1f9      	bne.n	80079a2 <_vfiprintf_r+0x96>
 80079ae:	ebba 0b04 	subs.w	fp, sl, r4
 80079b2:	d00b      	beq.n	80079cc <_vfiprintf_r+0xc0>
 80079b4:	465b      	mov	r3, fp
 80079b6:	4622      	mov	r2, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7ff ff93 	bl	80078e6 <__sfputs_r>
 80079c0:	3001      	adds	r0, #1
 80079c2:	f000 80aa 	beq.w	8007b1a <_vfiprintf_r+0x20e>
 80079c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079c8:	445a      	add	r2, fp
 80079ca:	9209      	str	r2, [sp, #36]	; 0x24
 80079cc:	f89a 3000 	ldrb.w	r3, [sl]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 80a2 	beq.w	8007b1a <_vfiprintf_r+0x20e>
 80079d6:	2300      	movs	r3, #0
 80079d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e0:	f10a 0a01 	add.w	sl, sl, #1
 80079e4:	9304      	str	r3, [sp, #16]
 80079e6:	9307      	str	r3, [sp, #28]
 80079e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ec:	931a      	str	r3, [sp, #104]	; 0x68
 80079ee:	4654      	mov	r4, sl
 80079f0:	2205      	movs	r2, #5
 80079f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f6:	4858      	ldr	r0, [pc, #352]	; (8007b58 <_vfiprintf_r+0x24c>)
 80079f8:	f7f8 fc82 	bl	8000300 <memchr>
 80079fc:	9a04      	ldr	r2, [sp, #16]
 80079fe:	b9d8      	cbnz	r0, 8007a38 <_vfiprintf_r+0x12c>
 8007a00:	06d1      	lsls	r1, r2, #27
 8007a02:	bf44      	itt	mi
 8007a04:	2320      	movmi	r3, #32
 8007a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a0a:	0713      	lsls	r3, r2, #28
 8007a0c:	bf44      	itt	mi
 8007a0e:	232b      	movmi	r3, #43	; 0x2b
 8007a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a14:	f89a 3000 	ldrb.w	r3, [sl]
 8007a18:	2b2a      	cmp	r3, #42	; 0x2a
 8007a1a:	d015      	beq.n	8007a48 <_vfiprintf_r+0x13c>
 8007a1c:	9a07      	ldr	r2, [sp, #28]
 8007a1e:	4654      	mov	r4, sl
 8007a20:	2000      	movs	r0, #0
 8007a22:	f04f 0c0a 	mov.w	ip, #10
 8007a26:	4621      	mov	r1, r4
 8007a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a2c:	3b30      	subs	r3, #48	; 0x30
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d94e      	bls.n	8007ad0 <_vfiprintf_r+0x1c4>
 8007a32:	b1b0      	cbz	r0, 8007a62 <_vfiprintf_r+0x156>
 8007a34:	9207      	str	r2, [sp, #28]
 8007a36:	e014      	b.n	8007a62 <_vfiprintf_r+0x156>
 8007a38:	eba0 0308 	sub.w	r3, r0, r8
 8007a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007a40:	4313      	orrs	r3, r2
 8007a42:	9304      	str	r3, [sp, #16]
 8007a44:	46a2      	mov	sl, r4
 8007a46:	e7d2      	b.n	80079ee <_vfiprintf_r+0xe2>
 8007a48:	9b03      	ldr	r3, [sp, #12]
 8007a4a:	1d19      	adds	r1, r3, #4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	9103      	str	r1, [sp, #12]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	bfbb      	ittet	lt
 8007a54:	425b      	neglt	r3, r3
 8007a56:	f042 0202 	orrlt.w	r2, r2, #2
 8007a5a:	9307      	strge	r3, [sp, #28]
 8007a5c:	9307      	strlt	r3, [sp, #28]
 8007a5e:	bfb8      	it	lt
 8007a60:	9204      	strlt	r2, [sp, #16]
 8007a62:	7823      	ldrb	r3, [r4, #0]
 8007a64:	2b2e      	cmp	r3, #46	; 0x2e
 8007a66:	d10c      	bne.n	8007a82 <_vfiprintf_r+0x176>
 8007a68:	7863      	ldrb	r3, [r4, #1]
 8007a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a6c:	d135      	bne.n	8007ada <_vfiprintf_r+0x1ce>
 8007a6e:	9b03      	ldr	r3, [sp, #12]
 8007a70:	1d1a      	adds	r2, r3, #4
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	9203      	str	r2, [sp, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bfb8      	it	lt
 8007a7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a7e:	3402      	adds	r4, #2
 8007a80:	9305      	str	r3, [sp, #20]
 8007a82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b68 <_vfiprintf_r+0x25c>
 8007a86:	7821      	ldrb	r1, [r4, #0]
 8007a88:	2203      	movs	r2, #3
 8007a8a:	4650      	mov	r0, sl
 8007a8c:	f7f8 fc38 	bl	8000300 <memchr>
 8007a90:	b140      	cbz	r0, 8007aa4 <_vfiprintf_r+0x198>
 8007a92:	2340      	movs	r3, #64	; 0x40
 8007a94:	eba0 000a 	sub.w	r0, r0, sl
 8007a98:	fa03 f000 	lsl.w	r0, r3, r0
 8007a9c:	9b04      	ldr	r3, [sp, #16]
 8007a9e:	4303      	orrs	r3, r0
 8007aa0:	3401      	adds	r4, #1
 8007aa2:	9304      	str	r3, [sp, #16]
 8007aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa8:	482c      	ldr	r0, [pc, #176]	; (8007b5c <_vfiprintf_r+0x250>)
 8007aaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007aae:	2206      	movs	r2, #6
 8007ab0:	f7f8 fc26 	bl	8000300 <memchr>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d03f      	beq.n	8007b38 <_vfiprintf_r+0x22c>
 8007ab8:	4b29      	ldr	r3, [pc, #164]	; (8007b60 <_vfiprintf_r+0x254>)
 8007aba:	bb1b      	cbnz	r3, 8007b04 <_vfiprintf_r+0x1f8>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	3307      	adds	r3, #7
 8007ac0:	f023 0307 	bic.w	r3, r3, #7
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	9303      	str	r3, [sp, #12]
 8007ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aca:	443b      	add	r3, r7
 8007acc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ace:	e767      	b.n	80079a0 <_vfiprintf_r+0x94>
 8007ad0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	e7a5      	b.n	8007a26 <_vfiprintf_r+0x11a>
 8007ada:	2300      	movs	r3, #0
 8007adc:	3401      	adds	r4, #1
 8007ade:	9305      	str	r3, [sp, #20]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	f04f 0c0a 	mov.w	ip, #10
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aec:	3a30      	subs	r2, #48	; 0x30
 8007aee:	2a09      	cmp	r2, #9
 8007af0:	d903      	bls.n	8007afa <_vfiprintf_r+0x1ee>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0c5      	beq.n	8007a82 <_vfiprintf_r+0x176>
 8007af6:	9105      	str	r1, [sp, #20]
 8007af8:	e7c3      	b.n	8007a82 <_vfiprintf_r+0x176>
 8007afa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007afe:	4604      	mov	r4, r0
 8007b00:	2301      	movs	r3, #1
 8007b02:	e7f0      	b.n	8007ae6 <_vfiprintf_r+0x1da>
 8007b04:	ab03      	add	r3, sp, #12
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <_vfiprintf_r+0x258>)
 8007b0c:	a904      	add	r1, sp, #16
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7fd ff7e 	bl	8005a10 <_printf_float>
 8007b14:	4607      	mov	r7, r0
 8007b16:	1c78      	adds	r0, r7, #1
 8007b18:	d1d6      	bne.n	8007ac8 <_vfiprintf_r+0x1bc>
 8007b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b1c:	07d9      	lsls	r1, r3, #31
 8007b1e:	d405      	bmi.n	8007b2c <_vfiprintf_r+0x220>
 8007b20:	89ab      	ldrh	r3, [r5, #12]
 8007b22:	059a      	lsls	r2, r3, #22
 8007b24:	d402      	bmi.n	8007b2c <_vfiprintf_r+0x220>
 8007b26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b28:	f7ff fa34 	bl	8006f94 <__retarget_lock_release_recursive>
 8007b2c:	89ab      	ldrh	r3, [r5, #12]
 8007b2e:	065b      	lsls	r3, r3, #25
 8007b30:	f53f af12 	bmi.w	8007958 <_vfiprintf_r+0x4c>
 8007b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b36:	e711      	b.n	800795c <_vfiprintf_r+0x50>
 8007b38:	ab03      	add	r3, sp, #12
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <_vfiprintf_r+0x258>)
 8007b40:	a904      	add	r1, sp, #16
 8007b42:	4630      	mov	r0, r6
 8007b44:	f7fe f9f0 	bl	8005f28 <_printf_i>
 8007b48:	e7e4      	b.n	8007b14 <_vfiprintf_r+0x208>
 8007b4a:	bf00      	nop
 8007b4c:	0800834c 	.word	0x0800834c
 8007b50:	0800836c 	.word	0x0800836c
 8007b54:	0800832c 	.word	0x0800832c
 8007b58:	080084e4 	.word	0x080084e4
 8007b5c:	080084ee 	.word	0x080084ee
 8007b60:	08005a11 	.word	0x08005a11
 8007b64:	080078e7 	.word	0x080078e7
 8007b68:	080084ea 	.word	0x080084ea

08007b6c <_sbrk_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d06      	ldr	r5, [pc, #24]	; (8007b88 <_sbrk_r+0x1c>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	602b      	str	r3, [r5, #0]
 8007b78:	f7f9 f994 	bl	8000ea4 <_sbrk>
 8007b7c:	1c43      	adds	r3, r0, #1
 8007b7e:	d102      	bne.n	8007b86 <_sbrk_r+0x1a>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	b103      	cbz	r3, 8007b86 <_sbrk_r+0x1a>
 8007b84:	6023      	str	r3, [r4, #0]
 8007b86:	bd38      	pop	{r3, r4, r5, pc}
 8007b88:	24000338 	.word	0x24000338

08007b8c <__sread>:
 8007b8c:	b510      	push	{r4, lr}
 8007b8e:	460c      	mov	r4, r1
 8007b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b94:	f000 faa8 	bl	80080e8 <_read_r>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	bfab      	itete	ge
 8007b9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ba0:	181b      	addge	r3, r3, r0
 8007ba2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ba6:	bfac      	ite	ge
 8007ba8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007baa:	81a3      	strhlt	r3, [r4, #12]
 8007bac:	bd10      	pop	{r4, pc}

08007bae <__swrite>:
 8007bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb2:	461f      	mov	r7, r3
 8007bb4:	898b      	ldrh	r3, [r1, #12]
 8007bb6:	05db      	lsls	r3, r3, #23
 8007bb8:	4605      	mov	r5, r0
 8007bba:	460c      	mov	r4, r1
 8007bbc:	4616      	mov	r6, r2
 8007bbe:	d505      	bpl.n	8007bcc <__swrite+0x1e>
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f000 f9f8 	bl	8007fbc <_lseek_r>
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bd6:	81a3      	strh	r3, [r4, #12]
 8007bd8:	4632      	mov	r2, r6
 8007bda:	463b      	mov	r3, r7
 8007bdc:	4628      	mov	r0, r5
 8007bde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007be2:	f000 b869 	b.w	8007cb8 <_write_r>

08007be6 <__sseek>:
 8007be6:	b510      	push	{r4, lr}
 8007be8:	460c      	mov	r4, r1
 8007bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bee:	f000 f9e5 	bl	8007fbc <_lseek_r>
 8007bf2:	1c43      	adds	r3, r0, #1
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	bf15      	itete	ne
 8007bf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c02:	81a3      	strheq	r3, [r4, #12]
 8007c04:	bf18      	it	ne
 8007c06:	81a3      	strhne	r3, [r4, #12]
 8007c08:	bd10      	pop	{r4, pc}

08007c0a <__sclose>:
 8007c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0e:	f000 b8f1 	b.w	8007df4 <_close_r>
	...

08007c14 <__swbuf_r>:
 8007c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c16:	460e      	mov	r6, r1
 8007c18:	4614      	mov	r4, r2
 8007c1a:	4605      	mov	r5, r0
 8007c1c:	b118      	cbz	r0, 8007c26 <__swbuf_r+0x12>
 8007c1e:	6983      	ldr	r3, [r0, #24]
 8007c20:	b90b      	cbnz	r3, 8007c26 <__swbuf_r+0x12>
 8007c22:	f7ff f913 	bl	8006e4c <__sinit>
 8007c26:	4b21      	ldr	r3, [pc, #132]	; (8007cac <__swbuf_r+0x98>)
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	d12b      	bne.n	8007c84 <__swbuf_r+0x70>
 8007c2c:	686c      	ldr	r4, [r5, #4]
 8007c2e:	69a3      	ldr	r3, [r4, #24]
 8007c30:	60a3      	str	r3, [r4, #8]
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	071a      	lsls	r2, r3, #28
 8007c36:	d52f      	bpl.n	8007c98 <__swbuf_r+0x84>
 8007c38:	6923      	ldr	r3, [r4, #16]
 8007c3a:	b36b      	cbz	r3, 8007c98 <__swbuf_r+0x84>
 8007c3c:	6923      	ldr	r3, [r4, #16]
 8007c3e:	6820      	ldr	r0, [r4, #0]
 8007c40:	1ac0      	subs	r0, r0, r3
 8007c42:	6963      	ldr	r3, [r4, #20]
 8007c44:	b2f6      	uxtb	r6, r6
 8007c46:	4283      	cmp	r3, r0
 8007c48:	4637      	mov	r7, r6
 8007c4a:	dc04      	bgt.n	8007c56 <__swbuf_r+0x42>
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 f966 	bl	8007f20 <_fflush_r>
 8007c54:	bb30      	cbnz	r0, 8007ca4 <__swbuf_r+0x90>
 8007c56:	68a3      	ldr	r3, [r4, #8]
 8007c58:	3b01      	subs	r3, #1
 8007c5a:	60a3      	str	r3, [r4, #8]
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	6022      	str	r2, [r4, #0]
 8007c62:	701e      	strb	r6, [r3, #0]
 8007c64:	6963      	ldr	r3, [r4, #20]
 8007c66:	3001      	adds	r0, #1
 8007c68:	4283      	cmp	r3, r0
 8007c6a:	d004      	beq.n	8007c76 <__swbuf_r+0x62>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	07db      	lsls	r3, r3, #31
 8007c70:	d506      	bpl.n	8007c80 <__swbuf_r+0x6c>
 8007c72:	2e0a      	cmp	r6, #10
 8007c74:	d104      	bne.n	8007c80 <__swbuf_r+0x6c>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	f000 f951 	bl	8007f20 <_fflush_r>
 8007c7e:	b988      	cbnz	r0, 8007ca4 <__swbuf_r+0x90>
 8007c80:	4638      	mov	r0, r7
 8007c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c84:	4b0a      	ldr	r3, [pc, #40]	; (8007cb0 <__swbuf_r+0x9c>)
 8007c86:	429c      	cmp	r4, r3
 8007c88:	d101      	bne.n	8007c8e <__swbuf_r+0x7a>
 8007c8a:	68ac      	ldr	r4, [r5, #8]
 8007c8c:	e7cf      	b.n	8007c2e <__swbuf_r+0x1a>
 8007c8e:	4b09      	ldr	r3, [pc, #36]	; (8007cb4 <__swbuf_r+0xa0>)
 8007c90:	429c      	cmp	r4, r3
 8007c92:	bf08      	it	eq
 8007c94:	68ec      	ldreq	r4, [r5, #12]
 8007c96:	e7ca      	b.n	8007c2e <__swbuf_r+0x1a>
 8007c98:	4621      	mov	r1, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f000 f81e 	bl	8007cdc <__swsetup_r>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d0cb      	beq.n	8007c3c <__swbuf_r+0x28>
 8007ca4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ca8:	e7ea      	b.n	8007c80 <__swbuf_r+0x6c>
 8007caa:	bf00      	nop
 8007cac:	0800834c 	.word	0x0800834c
 8007cb0:	0800836c 	.word	0x0800836c
 8007cb4:	0800832c 	.word	0x0800832c

08007cb8 <_write_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d07      	ldr	r5, [pc, #28]	; (8007cd8 <_write_r+0x20>)
 8007cbc:	4604      	mov	r4, r0
 8007cbe:	4608      	mov	r0, r1
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	602a      	str	r2, [r5, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	f7f9 f89b 	bl	8000e02 <_write>
 8007ccc:	1c43      	adds	r3, r0, #1
 8007cce:	d102      	bne.n	8007cd6 <_write_r+0x1e>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	b103      	cbz	r3, 8007cd6 <_write_r+0x1e>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	bd38      	pop	{r3, r4, r5, pc}
 8007cd8:	24000338 	.word	0x24000338

08007cdc <__swsetup_r>:
 8007cdc:	4b32      	ldr	r3, [pc, #200]	; (8007da8 <__swsetup_r+0xcc>)
 8007cde:	b570      	push	{r4, r5, r6, lr}
 8007ce0:	681d      	ldr	r5, [r3, #0]
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	b125      	cbz	r5, 8007cf2 <__swsetup_r+0x16>
 8007ce8:	69ab      	ldr	r3, [r5, #24]
 8007cea:	b913      	cbnz	r3, 8007cf2 <__swsetup_r+0x16>
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7ff f8ad 	bl	8006e4c <__sinit>
 8007cf2:	4b2e      	ldr	r3, [pc, #184]	; (8007dac <__swsetup_r+0xd0>)
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d10f      	bne.n	8007d18 <__swsetup_r+0x3c>
 8007cf8:	686c      	ldr	r4, [r5, #4]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d00:	0719      	lsls	r1, r3, #28
 8007d02:	d42c      	bmi.n	8007d5e <__swsetup_r+0x82>
 8007d04:	06dd      	lsls	r5, r3, #27
 8007d06:	d411      	bmi.n	8007d2c <__swsetup_r+0x50>
 8007d08:	2309      	movs	r3, #9
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d16:	e03e      	b.n	8007d96 <__swsetup_r+0xba>
 8007d18:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <__swsetup_r+0xd4>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d101      	bne.n	8007d22 <__swsetup_r+0x46>
 8007d1e:	68ac      	ldr	r4, [r5, #8]
 8007d20:	e7eb      	b.n	8007cfa <__swsetup_r+0x1e>
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <__swsetup_r+0xd8>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	bf08      	it	eq
 8007d28:	68ec      	ldreq	r4, [r5, #12]
 8007d2a:	e7e6      	b.n	8007cfa <__swsetup_r+0x1e>
 8007d2c:	0758      	lsls	r0, r3, #29
 8007d2e:	d512      	bpl.n	8007d56 <__swsetup_r+0x7a>
 8007d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d32:	b141      	cbz	r1, 8007d46 <__swsetup_r+0x6a>
 8007d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	d002      	beq.n	8007d42 <__swsetup_r+0x66>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff fcdb 	bl	80076f8 <_free_r>
 8007d42:	2300      	movs	r3, #0
 8007d44:	6363      	str	r3, [r4, #52]	; 0x34
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d4c:	81a3      	strh	r3, [r4, #12]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f043 0308 	orr.w	r3, r3, #8
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	b94b      	cbnz	r3, 8007d76 <__swsetup_r+0x9a>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6c:	d003      	beq.n	8007d76 <__swsetup_r+0x9a>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	f000 f95b 	bl	800802c <__smakebuf_r>
 8007d76:	89a0      	ldrh	r0, [r4, #12]
 8007d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d7c:	f010 0301 	ands.w	r3, r0, #1
 8007d80:	d00a      	beq.n	8007d98 <__swsetup_r+0xbc>
 8007d82:	2300      	movs	r3, #0
 8007d84:	60a3      	str	r3, [r4, #8]
 8007d86:	6963      	ldr	r3, [r4, #20]
 8007d88:	425b      	negs	r3, r3
 8007d8a:	61a3      	str	r3, [r4, #24]
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	b943      	cbnz	r3, 8007da2 <__swsetup_r+0xc6>
 8007d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d94:	d1ba      	bne.n	8007d0c <__swsetup_r+0x30>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	0781      	lsls	r1, r0, #30
 8007d9a:	bf58      	it	pl
 8007d9c:	6963      	ldrpl	r3, [r4, #20]
 8007d9e:	60a3      	str	r3, [r4, #8]
 8007da0:	e7f4      	b.n	8007d8c <__swsetup_r+0xb0>
 8007da2:	2000      	movs	r0, #0
 8007da4:	e7f7      	b.n	8007d96 <__swsetup_r+0xba>
 8007da6:	bf00      	nop
 8007da8:	24000010 	.word	0x24000010
 8007dac:	0800834c 	.word	0x0800834c
 8007db0:	0800836c 	.word	0x0800836c
 8007db4:	0800832c 	.word	0x0800832c

08007db8 <__assert_func>:
 8007db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dba:	4614      	mov	r4, r2
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	4b09      	ldr	r3, [pc, #36]	; (8007de4 <__assert_func+0x2c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	68d8      	ldr	r0, [r3, #12]
 8007dc6:	b14c      	cbz	r4, 8007ddc <__assert_func+0x24>
 8007dc8:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <__assert_func+0x30>)
 8007dca:	9100      	str	r1, [sp, #0]
 8007dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dd0:	4906      	ldr	r1, [pc, #24]	; (8007dec <__assert_func+0x34>)
 8007dd2:	462b      	mov	r3, r5
 8007dd4:	f000 f8e0 	bl	8007f98 <fiprintf>
 8007dd8:	f000 f9a5 	bl	8008126 <abort>
 8007ddc:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <__assert_func+0x38>)
 8007dde:	461c      	mov	r4, r3
 8007de0:	e7f3      	b.n	8007dca <__assert_func+0x12>
 8007de2:	bf00      	nop
 8007de4:	24000010 	.word	0x24000010
 8007de8:	080084f5 	.word	0x080084f5
 8007dec:	08008502 	.word	0x08008502
 8007df0:	08008530 	.word	0x08008530

08007df4 <_close_r>:
 8007df4:	b538      	push	{r3, r4, r5, lr}
 8007df6:	4d06      	ldr	r5, [pc, #24]	; (8007e10 <_close_r+0x1c>)
 8007df8:	2300      	movs	r3, #0
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	602b      	str	r3, [r5, #0]
 8007e00:	f7f9 f81b 	bl	8000e3a <_close>
 8007e04:	1c43      	adds	r3, r0, #1
 8007e06:	d102      	bne.n	8007e0e <_close_r+0x1a>
 8007e08:	682b      	ldr	r3, [r5, #0]
 8007e0a:	b103      	cbz	r3, 8007e0e <_close_r+0x1a>
 8007e0c:	6023      	str	r3, [r4, #0]
 8007e0e:	bd38      	pop	{r3, r4, r5, pc}
 8007e10:	24000338 	.word	0x24000338

08007e14 <__sflush_r>:
 8007e14:	898a      	ldrh	r2, [r1, #12]
 8007e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	0710      	lsls	r0, r2, #28
 8007e1e:	460c      	mov	r4, r1
 8007e20:	d458      	bmi.n	8007ed4 <__sflush_r+0xc0>
 8007e22:	684b      	ldr	r3, [r1, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dc05      	bgt.n	8007e34 <__sflush_r+0x20>
 8007e28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	dc02      	bgt.n	8007e34 <__sflush_r+0x20>
 8007e2e:	2000      	movs	r0, #0
 8007e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e36:	2e00      	cmp	r6, #0
 8007e38:	d0f9      	beq.n	8007e2e <__sflush_r+0x1a>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e40:	682f      	ldr	r7, [r5, #0]
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	d032      	beq.n	8007eac <__sflush_r+0x98>
 8007e46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	075a      	lsls	r2, r3, #29
 8007e4c:	d505      	bpl.n	8007e5a <__sflush_r+0x46>
 8007e4e:	6863      	ldr	r3, [r4, #4]
 8007e50:	1ac0      	subs	r0, r0, r3
 8007e52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e54:	b10b      	cbz	r3, 8007e5a <__sflush_r+0x46>
 8007e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e58:	1ac0      	subs	r0, r0, r3
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e60:	6a21      	ldr	r1, [r4, #32]
 8007e62:	4628      	mov	r0, r5
 8007e64:	47b0      	blx	r6
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	d106      	bne.n	8007e7a <__sflush_r+0x66>
 8007e6c:	6829      	ldr	r1, [r5, #0]
 8007e6e:	291d      	cmp	r1, #29
 8007e70:	d82c      	bhi.n	8007ecc <__sflush_r+0xb8>
 8007e72:	4a2a      	ldr	r2, [pc, #168]	; (8007f1c <__sflush_r+0x108>)
 8007e74:	40ca      	lsrs	r2, r1
 8007e76:	07d6      	lsls	r6, r2, #31
 8007e78:	d528      	bpl.n	8007ecc <__sflush_r+0xb8>
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	6062      	str	r2, [r4, #4]
 8007e7e:	04d9      	lsls	r1, r3, #19
 8007e80:	6922      	ldr	r2, [r4, #16]
 8007e82:	6022      	str	r2, [r4, #0]
 8007e84:	d504      	bpl.n	8007e90 <__sflush_r+0x7c>
 8007e86:	1c42      	adds	r2, r0, #1
 8007e88:	d101      	bne.n	8007e8e <__sflush_r+0x7a>
 8007e8a:	682b      	ldr	r3, [r5, #0]
 8007e8c:	b903      	cbnz	r3, 8007e90 <__sflush_r+0x7c>
 8007e8e:	6560      	str	r0, [r4, #84]	; 0x54
 8007e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e92:	602f      	str	r7, [r5, #0]
 8007e94:	2900      	cmp	r1, #0
 8007e96:	d0ca      	beq.n	8007e2e <__sflush_r+0x1a>
 8007e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e9c:	4299      	cmp	r1, r3
 8007e9e:	d002      	beq.n	8007ea6 <__sflush_r+0x92>
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f7ff fc29 	bl	80076f8 <_free_r>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	6360      	str	r0, [r4, #52]	; 0x34
 8007eaa:	e7c1      	b.n	8007e30 <__sflush_r+0x1c>
 8007eac:	6a21      	ldr	r1, [r4, #32]
 8007eae:	2301      	movs	r3, #1
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	47b0      	blx	r6
 8007eb4:	1c41      	adds	r1, r0, #1
 8007eb6:	d1c7      	bne.n	8007e48 <__sflush_r+0x34>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0c4      	beq.n	8007e48 <__sflush_r+0x34>
 8007ebe:	2b1d      	cmp	r3, #29
 8007ec0:	d001      	beq.n	8007ec6 <__sflush_r+0xb2>
 8007ec2:	2b16      	cmp	r3, #22
 8007ec4:	d101      	bne.n	8007eca <__sflush_r+0xb6>
 8007ec6:	602f      	str	r7, [r5, #0]
 8007ec8:	e7b1      	b.n	8007e2e <__sflush_r+0x1a>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	e7ad      	b.n	8007e30 <__sflush_r+0x1c>
 8007ed4:	690f      	ldr	r7, [r1, #16]
 8007ed6:	2f00      	cmp	r7, #0
 8007ed8:	d0a9      	beq.n	8007e2e <__sflush_r+0x1a>
 8007eda:	0793      	lsls	r3, r2, #30
 8007edc:	680e      	ldr	r6, [r1, #0]
 8007ede:	bf08      	it	eq
 8007ee0:	694b      	ldreq	r3, [r1, #20]
 8007ee2:	600f      	str	r7, [r1, #0]
 8007ee4:	bf18      	it	ne
 8007ee6:	2300      	movne	r3, #0
 8007ee8:	eba6 0807 	sub.w	r8, r6, r7
 8007eec:	608b      	str	r3, [r1, #8]
 8007eee:	f1b8 0f00 	cmp.w	r8, #0
 8007ef2:	dd9c      	ble.n	8007e2e <__sflush_r+0x1a>
 8007ef4:	6a21      	ldr	r1, [r4, #32]
 8007ef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ef8:	4643      	mov	r3, r8
 8007efa:	463a      	mov	r2, r7
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b0      	blx	r6
 8007f00:	2800      	cmp	r0, #0
 8007f02:	dc06      	bgt.n	8007f12 <__sflush_r+0xfe>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f0a:	81a3      	strh	r3, [r4, #12]
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f10:	e78e      	b.n	8007e30 <__sflush_r+0x1c>
 8007f12:	4407      	add	r7, r0
 8007f14:	eba8 0800 	sub.w	r8, r8, r0
 8007f18:	e7e9      	b.n	8007eee <__sflush_r+0xda>
 8007f1a:	bf00      	nop
 8007f1c:	20400001 	.word	0x20400001

08007f20 <_fflush_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	690b      	ldr	r3, [r1, #16]
 8007f24:	4605      	mov	r5, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	b913      	cbnz	r3, 8007f30 <_fflush_r+0x10>
 8007f2a:	2500      	movs	r5, #0
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	b118      	cbz	r0, 8007f3a <_fflush_r+0x1a>
 8007f32:	6983      	ldr	r3, [r0, #24]
 8007f34:	b90b      	cbnz	r3, 8007f3a <_fflush_r+0x1a>
 8007f36:	f7fe ff89 	bl	8006e4c <__sinit>
 8007f3a:	4b14      	ldr	r3, [pc, #80]	; (8007f8c <_fflush_r+0x6c>)
 8007f3c:	429c      	cmp	r4, r3
 8007f3e:	d11b      	bne.n	8007f78 <_fflush_r+0x58>
 8007f40:	686c      	ldr	r4, [r5, #4]
 8007f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0ef      	beq.n	8007f2a <_fflush_r+0xa>
 8007f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f4c:	07d0      	lsls	r0, r2, #31
 8007f4e:	d404      	bmi.n	8007f5a <_fflush_r+0x3a>
 8007f50:	0599      	lsls	r1, r3, #22
 8007f52:	d402      	bmi.n	8007f5a <_fflush_r+0x3a>
 8007f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f56:	f7ff f81c 	bl	8006f92 <__retarget_lock_acquire_recursive>
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	4621      	mov	r1, r4
 8007f5e:	f7ff ff59 	bl	8007e14 <__sflush_r>
 8007f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f64:	07da      	lsls	r2, r3, #31
 8007f66:	4605      	mov	r5, r0
 8007f68:	d4e0      	bmi.n	8007f2c <_fflush_r+0xc>
 8007f6a:	89a3      	ldrh	r3, [r4, #12]
 8007f6c:	059b      	lsls	r3, r3, #22
 8007f6e:	d4dd      	bmi.n	8007f2c <_fflush_r+0xc>
 8007f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f72:	f7ff f80f 	bl	8006f94 <__retarget_lock_release_recursive>
 8007f76:	e7d9      	b.n	8007f2c <_fflush_r+0xc>
 8007f78:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <_fflush_r+0x70>)
 8007f7a:	429c      	cmp	r4, r3
 8007f7c:	d101      	bne.n	8007f82 <_fflush_r+0x62>
 8007f7e:	68ac      	ldr	r4, [r5, #8]
 8007f80:	e7df      	b.n	8007f42 <_fflush_r+0x22>
 8007f82:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <_fflush_r+0x74>)
 8007f84:	429c      	cmp	r4, r3
 8007f86:	bf08      	it	eq
 8007f88:	68ec      	ldreq	r4, [r5, #12]
 8007f8a:	e7da      	b.n	8007f42 <_fflush_r+0x22>
 8007f8c:	0800834c 	.word	0x0800834c
 8007f90:	0800836c 	.word	0x0800836c
 8007f94:	0800832c 	.word	0x0800832c

08007f98 <fiprintf>:
 8007f98:	b40e      	push	{r1, r2, r3}
 8007f9a:	b503      	push	{r0, r1, lr}
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	ab03      	add	r3, sp, #12
 8007fa0:	4805      	ldr	r0, [pc, #20]	; (8007fb8 <fiprintf+0x20>)
 8007fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa6:	6800      	ldr	r0, [r0, #0]
 8007fa8:	9301      	str	r3, [sp, #4]
 8007faa:	f7ff fcaf 	bl	800790c <_vfiprintf_r>
 8007fae:	b002      	add	sp, #8
 8007fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb4:	b003      	add	sp, #12
 8007fb6:	4770      	bx	lr
 8007fb8:	24000010 	.word	0x24000010

08007fbc <_lseek_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d07      	ldr	r5, [pc, #28]	; (8007fdc <_lseek_r+0x20>)
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	602a      	str	r2, [r5, #0]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f7f8 ff5c 	bl	8000e88 <_lseek>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_lseek_r+0x1e>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_lseek_r+0x1e>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	24000338 	.word	0x24000338

08007fe0 <__swhatbuf_r>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	460e      	mov	r6, r1
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	b096      	sub	sp, #88	; 0x58
 8007fec:	4614      	mov	r4, r2
 8007fee:	461d      	mov	r5, r3
 8007ff0:	da08      	bge.n	8008004 <__swhatbuf_r+0x24>
 8007ff2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	602a      	str	r2, [r5, #0]
 8007ffa:	061a      	lsls	r2, r3, #24
 8007ffc:	d410      	bmi.n	8008020 <__swhatbuf_r+0x40>
 8007ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008002:	e00e      	b.n	8008022 <__swhatbuf_r+0x42>
 8008004:	466a      	mov	r2, sp
 8008006:	f000 f895 	bl	8008134 <_fstat_r>
 800800a:	2800      	cmp	r0, #0
 800800c:	dbf1      	blt.n	8007ff2 <__swhatbuf_r+0x12>
 800800e:	9a01      	ldr	r2, [sp, #4]
 8008010:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008014:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008018:	425a      	negs	r2, r3
 800801a:	415a      	adcs	r2, r3
 800801c:	602a      	str	r2, [r5, #0]
 800801e:	e7ee      	b.n	8007ffe <__swhatbuf_r+0x1e>
 8008020:	2340      	movs	r3, #64	; 0x40
 8008022:	2000      	movs	r0, #0
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	b016      	add	sp, #88	; 0x58
 8008028:	bd70      	pop	{r4, r5, r6, pc}
	...

0800802c <__smakebuf_r>:
 800802c:	898b      	ldrh	r3, [r1, #12]
 800802e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008030:	079d      	lsls	r5, r3, #30
 8008032:	4606      	mov	r6, r0
 8008034:	460c      	mov	r4, r1
 8008036:	d507      	bpl.n	8008048 <__smakebuf_r+0x1c>
 8008038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	6123      	str	r3, [r4, #16]
 8008040:	2301      	movs	r3, #1
 8008042:	6163      	str	r3, [r4, #20]
 8008044:	b002      	add	sp, #8
 8008046:	bd70      	pop	{r4, r5, r6, pc}
 8008048:	ab01      	add	r3, sp, #4
 800804a:	466a      	mov	r2, sp
 800804c:	f7ff ffc8 	bl	8007fe0 <__swhatbuf_r>
 8008050:	9900      	ldr	r1, [sp, #0]
 8008052:	4605      	mov	r5, r0
 8008054:	4630      	mov	r0, r6
 8008056:	f7ff fbbb 	bl	80077d0 <_malloc_r>
 800805a:	b948      	cbnz	r0, 8008070 <__smakebuf_r+0x44>
 800805c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008060:	059a      	lsls	r2, r3, #22
 8008062:	d4ef      	bmi.n	8008044 <__smakebuf_r+0x18>
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	f043 0302 	orr.w	r3, r3, #2
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	e7e3      	b.n	8008038 <__smakebuf_r+0xc>
 8008070:	4b0d      	ldr	r3, [pc, #52]	; (80080a8 <__smakebuf_r+0x7c>)
 8008072:	62b3      	str	r3, [r6, #40]	; 0x28
 8008074:	89a3      	ldrh	r3, [r4, #12]
 8008076:	6020      	str	r0, [r4, #0]
 8008078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800807c:	81a3      	strh	r3, [r4, #12]
 800807e:	9b00      	ldr	r3, [sp, #0]
 8008080:	6163      	str	r3, [r4, #20]
 8008082:	9b01      	ldr	r3, [sp, #4]
 8008084:	6120      	str	r0, [r4, #16]
 8008086:	b15b      	cbz	r3, 80080a0 <__smakebuf_r+0x74>
 8008088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800808c:	4630      	mov	r0, r6
 800808e:	f000 f863 	bl	8008158 <_isatty_r>
 8008092:	b128      	cbz	r0, 80080a0 <__smakebuf_r+0x74>
 8008094:	89a3      	ldrh	r3, [r4, #12]
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	81a3      	strh	r3, [r4, #12]
 80080a0:	89a0      	ldrh	r0, [r4, #12]
 80080a2:	4305      	orrs	r5, r0
 80080a4:	81a5      	strh	r5, [r4, #12]
 80080a6:	e7cd      	b.n	8008044 <__smakebuf_r+0x18>
 80080a8:	08006de5 	.word	0x08006de5

080080ac <__ascii_mbtowc>:
 80080ac:	b082      	sub	sp, #8
 80080ae:	b901      	cbnz	r1, 80080b2 <__ascii_mbtowc+0x6>
 80080b0:	a901      	add	r1, sp, #4
 80080b2:	b142      	cbz	r2, 80080c6 <__ascii_mbtowc+0x1a>
 80080b4:	b14b      	cbz	r3, 80080ca <__ascii_mbtowc+0x1e>
 80080b6:	7813      	ldrb	r3, [r2, #0]
 80080b8:	600b      	str	r3, [r1, #0]
 80080ba:	7812      	ldrb	r2, [r2, #0]
 80080bc:	1e10      	subs	r0, r2, #0
 80080be:	bf18      	it	ne
 80080c0:	2001      	movne	r0, #1
 80080c2:	b002      	add	sp, #8
 80080c4:	4770      	bx	lr
 80080c6:	4610      	mov	r0, r2
 80080c8:	e7fb      	b.n	80080c2 <__ascii_mbtowc+0x16>
 80080ca:	f06f 0001 	mvn.w	r0, #1
 80080ce:	e7f8      	b.n	80080c2 <__ascii_mbtowc+0x16>

080080d0 <__malloc_lock>:
 80080d0:	4801      	ldr	r0, [pc, #4]	; (80080d8 <__malloc_lock+0x8>)
 80080d2:	f7fe bf5e 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 80080d6:	bf00      	nop
 80080d8:	2400032c 	.word	0x2400032c

080080dc <__malloc_unlock>:
 80080dc:	4801      	ldr	r0, [pc, #4]	; (80080e4 <__malloc_unlock+0x8>)
 80080de:	f7fe bf59 	b.w	8006f94 <__retarget_lock_release_recursive>
 80080e2:	bf00      	nop
 80080e4:	2400032c 	.word	0x2400032c

080080e8 <_read_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	; (8008108 <_read_r+0x20>)
 80080ec:	4604      	mov	r4, r0
 80080ee:	4608      	mov	r0, r1
 80080f0:	4611      	mov	r1, r2
 80080f2:	2200      	movs	r2, #0
 80080f4:	602a      	str	r2, [r5, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	f7f8 fe66 	bl	8000dc8 <_read>
 80080fc:	1c43      	adds	r3, r0, #1
 80080fe:	d102      	bne.n	8008106 <_read_r+0x1e>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b103      	cbz	r3, 8008106 <_read_r+0x1e>
 8008104:	6023      	str	r3, [r4, #0]
 8008106:	bd38      	pop	{r3, r4, r5, pc}
 8008108:	24000338 	.word	0x24000338

0800810c <__ascii_wctomb>:
 800810c:	b149      	cbz	r1, 8008122 <__ascii_wctomb+0x16>
 800810e:	2aff      	cmp	r2, #255	; 0xff
 8008110:	bf85      	ittet	hi
 8008112:	238a      	movhi	r3, #138	; 0x8a
 8008114:	6003      	strhi	r3, [r0, #0]
 8008116:	700a      	strbls	r2, [r1, #0]
 8008118:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800811c:	bf98      	it	ls
 800811e:	2001      	movls	r0, #1
 8008120:	4770      	bx	lr
 8008122:	4608      	mov	r0, r1
 8008124:	4770      	bx	lr

08008126 <abort>:
 8008126:	b508      	push	{r3, lr}
 8008128:	2006      	movs	r0, #6
 800812a:	f000 f84d 	bl	80081c8 <raise>
 800812e:	2001      	movs	r0, #1
 8008130:	f7f8 fe40 	bl	8000db4 <_exit>

08008134 <_fstat_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4d07      	ldr	r5, [pc, #28]	; (8008154 <_fstat_r+0x20>)
 8008138:	2300      	movs	r3, #0
 800813a:	4604      	mov	r4, r0
 800813c:	4608      	mov	r0, r1
 800813e:	4611      	mov	r1, r2
 8008140:	602b      	str	r3, [r5, #0]
 8008142:	f7f8 fe86 	bl	8000e52 <_fstat>
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d102      	bne.n	8008150 <_fstat_r+0x1c>
 800814a:	682b      	ldr	r3, [r5, #0]
 800814c:	b103      	cbz	r3, 8008150 <_fstat_r+0x1c>
 800814e:	6023      	str	r3, [r4, #0]
 8008150:	bd38      	pop	{r3, r4, r5, pc}
 8008152:	bf00      	nop
 8008154:	24000338 	.word	0x24000338

08008158 <_isatty_r>:
 8008158:	b538      	push	{r3, r4, r5, lr}
 800815a:	4d06      	ldr	r5, [pc, #24]	; (8008174 <_isatty_r+0x1c>)
 800815c:	2300      	movs	r3, #0
 800815e:	4604      	mov	r4, r0
 8008160:	4608      	mov	r0, r1
 8008162:	602b      	str	r3, [r5, #0]
 8008164:	f7f8 fe85 	bl	8000e72 <_isatty>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_isatty_r+0x1a>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_isatty_r+0x1a>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	24000338 	.word	0x24000338

08008178 <_raise_r>:
 8008178:	291f      	cmp	r1, #31
 800817a:	b538      	push	{r3, r4, r5, lr}
 800817c:	4604      	mov	r4, r0
 800817e:	460d      	mov	r5, r1
 8008180:	d904      	bls.n	800818c <_raise_r+0x14>
 8008182:	2316      	movs	r3, #22
 8008184:	6003      	str	r3, [r0, #0]
 8008186:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800818a:	bd38      	pop	{r3, r4, r5, pc}
 800818c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800818e:	b112      	cbz	r2, 8008196 <_raise_r+0x1e>
 8008190:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008194:	b94b      	cbnz	r3, 80081aa <_raise_r+0x32>
 8008196:	4620      	mov	r0, r4
 8008198:	f000 f830 	bl	80081fc <_getpid_r>
 800819c:	462a      	mov	r2, r5
 800819e:	4601      	mov	r1, r0
 80081a0:	4620      	mov	r0, r4
 80081a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a6:	f000 b817 	b.w	80081d8 <_kill_r>
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d00a      	beq.n	80081c4 <_raise_r+0x4c>
 80081ae:	1c59      	adds	r1, r3, #1
 80081b0:	d103      	bne.n	80081ba <_raise_r+0x42>
 80081b2:	2316      	movs	r3, #22
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	2001      	movs	r0, #1
 80081b8:	e7e7      	b.n	800818a <_raise_r+0x12>
 80081ba:	2400      	movs	r4, #0
 80081bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081c0:	4628      	mov	r0, r5
 80081c2:	4798      	blx	r3
 80081c4:	2000      	movs	r0, #0
 80081c6:	e7e0      	b.n	800818a <_raise_r+0x12>

080081c8 <raise>:
 80081c8:	4b02      	ldr	r3, [pc, #8]	; (80081d4 <raise+0xc>)
 80081ca:	4601      	mov	r1, r0
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	f7ff bfd3 	b.w	8008178 <_raise_r>
 80081d2:	bf00      	nop
 80081d4:	24000010 	.word	0x24000010

080081d8 <_kill_r>:
 80081d8:	b538      	push	{r3, r4, r5, lr}
 80081da:	4d07      	ldr	r5, [pc, #28]	; (80081f8 <_kill_r+0x20>)
 80081dc:	2300      	movs	r3, #0
 80081de:	4604      	mov	r4, r0
 80081e0:	4608      	mov	r0, r1
 80081e2:	4611      	mov	r1, r2
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	f7f8 fdd5 	bl	8000d94 <_kill>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d102      	bne.n	80081f4 <_kill_r+0x1c>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	b103      	cbz	r3, 80081f4 <_kill_r+0x1c>
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
 80081f6:	bf00      	nop
 80081f8:	24000338 	.word	0x24000338

080081fc <_getpid_r>:
 80081fc:	f7f8 bdc2 	b.w	8000d84 <_getpid>

08008200 <_init>:
 8008200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008202:	bf00      	nop
 8008204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008206:	bc08      	pop	{r3}
 8008208:	469e      	mov	lr, r3
 800820a:	4770      	bx	lr

0800820c <_fini>:
 800820c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800820e:	bf00      	nop
 8008210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008212:	bc08      	pop	{r3}
 8008214:	469e      	mov	lr, r3
 8008216:	4770      	bx	lr
